
DAQ_2CH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d20c  0800d20c  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  0800d20c  0800d20c  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d20c  0800d20c  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d20c  0800d20c  0001d20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d210  0800d210  0001d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800d214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ba8  20000134  0800d348  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cdc  0800d348  00022cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f8e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043bb  00000000  00000000  0003512e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  000394f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9e  00000000  00000000  0003a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c51a  00000000  00000000  0003b4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b54e  00000000  00000000  000579f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dac1  00000000  00000000  00072f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048ac  00000000  00000000  00100a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001052b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000134 	.word	0x20000134
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d058 	.word	0x0800d058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000138 	.word	0x20000138
 8000148:	0800d058 	.word	0x0800d058

0800014c <_w25qEraseSector>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Special command for deleting a sector
void _w25qEraseSector(uint32_t sector) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   w25qSetBlockProtect(0x00);
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fc11 	bl	800097c <w25qSetBlockProtect>
   sector = (sector << 4);  // Отличие
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	011b      	lsls	r3, r3, #4
 800015e:	607b      	str	r3, [r7, #4]

   uint8_t com = W25Q_WRITE_ENABLE;
 8000160:	2306      	movs	r3, #6
 8000162:	73fb      	strb	r3, [r7, #15]
   uint8_t temp[4] = { W25Q_SECTOR_ERASE_4, (uint8_t) (sector >> 8),
 8000164:	2320      	movs	r3, #32
 8000166:	723b      	strb	r3, [r7, #8]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	0a1b      	lsrs	r3, r3, #8
 800016c:	b2db      	uxtb	r3, r3
 800016e:	727b      	strb	r3, [r7, #9]
         (uint8_t) (sector & 0x00FF), 0x00 };
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	b2db      	uxtb	r3, r3
   uint8_t temp[4] = { W25Q_SECTOR_ERASE_4, (uint8_t) (sector >> 8),
 8000174:	72bb      	strb	r3, [r7, #10]
 8000176:	2300      	movs	r3, #0
 8000178:	72fb      	strb	r3, [r7, #11]

   W25Q_CS_LO();
 800017a:	2200      	movs	r2, #0
 800017c:	2104      	movs	r1, #4
 800017e:	481e      	ldr	r0, [pc, #120]	; (80001f8 <_w25qEraseSector+0xac>)
 8000180:	f001 fc36 	bl	80019f0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(W25Q_SPI, &com, 1, 10);
 8000184:	f107 010f 	add.w	r1, r7, #15
 8000188:	230a      	movs	r3, #10
 800018a:	2201      	movs	r2, #1
 800018c:	481b      	ldr	r0, [pc, #108]	; (80001fc <_w25qEraseSector+0xb0>)
 800018e:	f003 fefb 	bl	8003f88 <HAL_SPI_Transmit>
   W25Q_CS_HI();
 8000192:	2201      	movs	r2, #1
 8000194:	2104      	movs	r1, #4
 8000196:	4818      	ldr	r0, [pc, #96]	; (80001f8 <_w25qEraseSector+0xac>)
 8000198:	f001 fc2a 	bl	80019f0 <HAL_GPIO_WritePin>

   W25Q_CS_LO();
 800019c:	2200      	movs	r2, #0
 800019e:	2104      	movs	r1, #4
 80001a0:	4815      	ldr	r0, [pc, #84]	; (80001f8 <_w25qEraseSector+0xac>)
 80001a2:	f001 fc25 	bl	80019f0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(W25Q_SPI, temp, 4, 10);
 80001a6:	f107 0108 	add.w	r1, r7, #8
 80001aa:	230a      	movs	r3, #10
 80001ac:	2204      	movs	r2, #4
 80001ae:	4813      	ldr	r0, [pc, #76]	; (80001fc <_w25qEraseSector+0xb0>)
 80001b0:	f003 feea 	bl	8003f88 <HAL_SPI_Transmit>
   W25Q_CS_HI();
 80001b4:	2201      	movs	r2, #1
 80001b6:	2104      	movs	r1, #4
 80001b8:	480f      	ldr	r0, [pc, #60]	; (80001f8 <_w25qEraseSector+0xac>)
 80001ba:	f001 fc19 	bl	80019f0 <HAL_GPIO_WritePin>

   w25qWaitForReady();
 80001be:	f000 fbab 	bl	8000918 <w25qWaitForReady>

   temp[0] = W25Q_WRRITE_DISABLE;
 80001c2:	2304      	movs	r3, #4
 80001c4:	723b      	strb	r3, [r7, #8]

   W25Q_CS_LO();
 80001c6:	2200      	movs	r2, #0
 80001c8:	2104      	movs	r1, #4
 80001ca:	480b      	ldr	r0, [pc, #44]	; (80001f8 <_w25qEraseSector+0xac>)
 80001cc:	f001 fc10 	bl	80019f0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(W25Q_SPI, temp, 1, 10);
 80001d0:	f107 0108 	add.w	r1, r7, #8
 80001d4:	230a      	movs	r3, #10
 80001d6:	2201      	movs	r2, #1
 80001d8:	4808      	ldr	r0, [pc, #32]	; (80001fc <_w25qEraseSector+0xb0>)
 80001da:	f003 fed5 	bl	8003f88 <HAL_SPI_Transmit>
   W25Q_CS_HI();
 80001de:	2201      	movs	r2, #1
 80001e0:	2104      	movs	r1, #4
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <_w25qEraseSector+0xac>)
 80001e4:	f001 fc04 	bl	80019f0 <HAL_GPIO_WritePin>

   w25qSetBlockProtect(0x0F);
 80001e8:	200f      	movs	r0, #15
 80001ea:	f000 fbc7 	bl	800097c <w25qSetBlockProtect>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800
 80001fc:	20000180 	.word	0x20000180

08000200 <w25qWritingByUSB>:
// write via USB - erase the vector, press and write
void w25qWritingByUSB(uint16_t dpagenum, uint8_t *bufByUSB) {
 8000200:	b580      	push	{r7, lr}
 8000202:	f5ad 5d88 	sub.w	sp, sp, #4352	; 0x1100
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	4602      	mov	r2, r0
 800020c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000210:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000214:	6019      	str	r1, [r3, #0]
 8000216:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800021a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800021e:	801a      	strh	r2, [r3, #0]

   uint8_t current_sector_buf[4096];
   uint16_t current_sector_addr = dpagenum / 8;
 8000220:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000224:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	08db      	lsrs	r3, r3, #3
 800022c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000230:	f102 0212 	add.w	r2, r2, #18
 8000234:	8013      	strh	r3, [r2, #0]
   uint16_t startPage = current_sector_addr * 16;
 8000236:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800023a:	f103 0312 	add.w	r3, r3, #18
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	011b      	lsls	r3, r3, #4
 8000242:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000246:	f102 0210 	add.w	r2, r2, #16
 800024a:	8013      	strh	r3, [r2, #0]
   int offset = 512 * (dpagenum % 8);
 800024c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000250:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	f003 0307 	and.w	r3, r3, #7
 800025a:	025b      	lsls	r3, r3, #9
 800025c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000260:	f102 020c 	add.w	r2, r2, #12
 8000264:	6013      	str	r3, [r2, #0]

   for (uint16_t i = 0; i < 16; i++) {
 8000266:	2300      	movs	r3, #0
 8000268:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800026c:	f102 0216 	add.w	r2, r2, #22
 8000270:	8013      	strh	r3, [r2, #0]
 8000272:	e024      	b.n	80002be <w25qWritingByUSB+0xbe>
      w25qReadPage(current_sector_buf + 256 * i, startPage + i);
 8000274:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000278:	f103 0316 	add.w	r3, r3, #22
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	461a      	mov	r2, r3
 8000282:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000286:	3b0c      	subs	r3, #12
 8000288:	1898      	adds	r0, r3, r2
 800028a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800028e:	f103 0310 	add.w	r3, r3, #16
 8000292:	881a      	ldrh	r2, [r3, #0]
 8000294:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000298:	f103 0316 	add.w	r3, r3, #22
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	4413      	add	r3, r2
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	4619      	mov	r1, r3
 80002a4:	f000 fc04 	bl	8000ab0 <w25qReadPage>
   for (uint16_t i = 0; i < 16; i++) {
 80002a8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80002ac:	f103 0316 	add.w	r3, r3, #22
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	3301      	adds	r3, #1
 80002b4:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80002b8:	f102 0216 	add.w	r2, r2, #22
 80002bc:	8013      	strh	r3, [r2, #0]
 80002be:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80002c2:	f103 0316 	add.w	r3, r3, #22
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	2b0f      	cmp	r3, #15
 80002ca:	d9d3      	bls.n	8000274 <w25qWritingByUSB+0x74>
   }

   memcpy(current_sector_buf + offset, bufByUSB, 512);
 80002cc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80002d0:	f103 030c 	add.w	r3, r3, #12
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002da:	3b0c      	subs	r3, #12
 80002dc:	1898      	adds	r0, r3, r2
 80002de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ea:	6819      	ldr	r1, [r3, #0]
 80002ec:	f00c fea6 	bl	800d03c <memcpy>

   _w25qEraseSector(current_sector_addr);
 80002f0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80002f4:	f103 0312 	add.w	r3, r3, #18
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff26 	bl	800014c <_w25qEraseSector>

   startPage = current_sector_addr * 16;
 8000300:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000304:	f103 0312 	add.w	r3, r3, #18
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	011b      	lsls	r3, r3, #4
 800030c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000310:	f102 0210 	add.w	r2, r2, #16
 8000314:	8013      	strh	r3, [r2, #0]

   for (uint16_t i = 0; i < 16; i++) {
 8000316:	2300      	movs	r3, #0
 8000318:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800031c:	f102 0214 	add.w	r2, r2, #20
 8000320:	8013      	strh	r3, [r2, #0]
 8000322:	e033      	b.n	800038c <w25qWritingByUSB+0x18c>
      uint8_t buf[256];
      memcpy(buf, current_sector_buf + i * 256, 256);
 8000324:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000328:	f103 0314 	add.w	r3, r3, #20
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	461a      	mov	r2, r3
 8000332:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000336:	3b0c      	subs	r3, #12
 8000338:	4413      	add	r3, r2
 800033a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800033e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000342:	4610      	mov	r0, r2
 8000344:	4619      	mov	r1, r3
 8000346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034a:	461a      	mov	r2, r3
 800034c:	f00c fe76 	bl	800d03c <memcpy>
      w25qWritePage(buf, startPage + i);
 8000350:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000354:	f103 0310 	add.w	r3, r3, #16
 8000358:	881a      	ldrh	r2, [r3, #0]
 800035a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800035e:	f103 0314 	add.w	r3, r3, #20
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	4413      	add	r3, r2
 8000366:	b29a      	uxth	r2, r3
 8000368:	f107 0318 	add.w	r3, r7, #24
 800036c:	3b0c      	subs	r3, #12
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fbd1 	bl	8000b18 <w25qWritePage>
   for (uint16_t i = 0; i < 16; i++) {
 8000376:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800037a:	f103 0314 	add.w	r3, r3, #20
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	8013      	strh	r3, [r2, #0]
 800038c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000390:	f103 0314 	add.w	r3, r3, #20
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	2b0f      	cmp	r3, #15
 8000398:	d9c4      	bls.n	8000324 <w25qWritingByUSB+0x124>
   }
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	f507 5788 	add.w	r7, r7, #4352	; 0x1100
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fc96 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f842 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f930 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 80003b8:	f000 f910 	bl	80005dc <MX_DMA_Init>
  MX_ADC1_Init();
 80003bc:	f000 f89a 	bl	80004f4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80003c0:	f000 f8d6 	bl	8000570 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80003c4:	f00c f986 	bl	800c6d4 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80003c8:	f006 fe94 	bl	80070f4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80003cc:	2064      	movs	r0, #100	; 0x64
 80003ce:	f000 fce7 	bl	8000da0 <HAL_Delay>





      FATFS_LinkDriver(&USER_Driver, SFLASHPath);
 80003d2:	4913      	ldr	r1, [pc, #76]	; (8000420 <main+0x78>)
 80003d4:	4813      	ldr	r0, [pc, #76]	; (8000424 <main+0x7c>)
 80003d6:	f00c f96d 	bl	800c6b4 <FATFS_LinkDriver>



      //format drive
      fres = f_mkfs("0:", 0, 4096);
 80003da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003de:	2100      	movs	r1, #0
 80003e0:	4811      	ldr	r0, [pc, #68]	; (8000428 <main+0x80>)
 80003e2:	f00b fc2b 	bl	800bc3c <f_mkfs>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <main+0x84>)
 80003ec:	701a      	strb	r2, [r3, #0]

      //Mount drive
      fres = f_mount(&FatFs, "0:", 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	490d      	ldr	r1, [pc, #52]	; (8000428 <main+0x80>)
 80003f2:	480f      	ldr	r0, [pc, #60]	; (8000430 <main+0x88>)
 80003f4:	f00b f8d2 	bl	800b59c <f_mount>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <main+0x84>)
 80003fe:	701a      	strb	r2, [r3, #0]

      if (fres != FR_OK)
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <main+0x84>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d000      	beq.n	800040a <main+0x62>
      {
        while(1);
 8000408:	e7fe      	b.n	8000408 <main+0x60>
      }


      fres = f_open(&SFLASHPath, "0:/test.txt", FA_READ);
 800040a:	2201      	movs	r2, #1
 800040c:	4909      	ldr	r1, [pc, #36]	; (8000434 <main+0x8c>)
 800040e:	4804      	ldr	r0, [pc, #16]	; (8000420 <main+0x78>)
 8000410:	f00b f90e 	bl	800b630 <f_open>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <main+0x84>)
 800041a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800041c:	e7fe      	b.n	800041c <main+0x74>
 800041e:	bf00      	nop
 8000420:	20001250 	.word	0x20001250
 8000424:	2000000c 	.word	0x2000000c
 8000428:	0800d070 	.word	0x0800d070
 800042c:	2000124c 	.word	0x2000124c
 8000430:	2000021c 	.word	0x2000021c
 8000434:	0800d074 	.word	0x0800d074

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b094      	sub	sp, #80	; 0x50
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000442:	2228      	movs	r2, #40	; 0x28
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f00c fdcc 	bl	800cfe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000468:	2301      	movs	r3, #1
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000484:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	4618      	mov	r0, r3
 8000490:	f003 f862 	bl	8003558 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800049a:	f000 f929 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2102      	movs	r1, #2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 face 	bl	8003a5c <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004c6:	f000 f913 	bl	80006f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80004ca:	2312      	movs	r3, #18
 80004cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f003 fc1a 	bl	8003d14 <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004e6:	f000 f903 	bl	80006f0 <Error_Handler>
  }
}
 80004ea:	bf00      	nop
 80004ec:	3750      	adds	r7, #80	; 0x50
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ADC1_Init+0x74>)
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <MX_ADC1_Init+0x78>)
 8000508:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_ADC1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_ADC1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_ADC1_Init+0x74>)
 800051e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_ADC1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_ADC1_Init+0x74>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_ADC1_Init+0x74>)
 8000532:	f000 fc59 	bl	8000de8 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800053c:	f000 f8d8 	bl	80006f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000540:	2310      	movs	r3, #16
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000544:	2301      	movs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0x74>)
 8000552:	f000 fd21 	bl	8000f98 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800055c:	f000 f8c8 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000150 	.word	0x20000150
 800056c:	40012400 	.word	0x40012400

08000570 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_SPI1_Init+0x64>)
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <MX_SPI1_Init+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_SPI1_Init+0x64>)
 800057c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_SPI1_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_SPI1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_SPI1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_SPI1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_SPI1_Init+0x64>)
 800059c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_SPI1_Init+0x64>)
 80005a4:	2208      	movs	r2, #8
 80005a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_SPI1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_SPI1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_SPI1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_SPI1_Init+0x64>)
 80005bc:	220a      	movs	r2, #10
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_SPI1_Init+0x64>)
 80005c2:	f003 fc5d 	bl	8003e80 <HAL_SPI_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005cc:	f000 f890 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000180 	.word	0x20000180
 80005d8:	40013000 	.word	0x40013000

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_DMA_Init+0x38>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <MX_DMA_Init+0x38>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_DMA_Init+0x38>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200d      	movs	r0, #13
 8000600:	f000 fedb 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000604:	200d      	movs	r0, #13
 8000606:	f000 fef4 	bl	80013f2 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a2b      	ldr	r2, [pc, #172]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0320 	and.w	r3, r3, #32
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Hold_W25Q_Pin|WS_W25Q_Pin|CS_W25Q_Pin|AdsCS_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2117      	movs	r1, #23
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <MX_GPIO_Init+0xcc>)
 800067a:	f001 f9b9 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2130      	movs	r1, #48	; 0x30
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <MX_GPIO_Init+0xd0>)
 8000684:	f001 f9b4 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Hold_W25Q_Pin WS_W25Q_Pin CS_W25Q_Pin AdsCS_Pin */
  GPIO_InitStruct.Pin = Hold_W25Q_Pin|WS_W25Q_Pin|CS_W25Q_Pin|AdsCS_Pin;
 8000688:	2317      	movs	r3, #23
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_GPIO_Init+0xcc>)
 80006a0:	f001 f822 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AdsInterupt_Pin */
  GPIO_InitStruct.Pin = AdsInterupt_Pin;
 80006a4:	2308      	movs	r3, #8
 80006a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_GPIO_Init+0xd4>)
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AdsInterupt_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0xcc>)
 80006b8:	f001 f816 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80006bc:	2330      	movs	r3, #48	; 0x30
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0xd0>)
 80006d4:	f001 f808 	bl	80016e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	10110000 	.word	0x10110000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_MspInit+0x5c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <HAL_MspInit+0x5c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_MspInit+0x60>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_MspInit+0x60>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000
 800075c:	40010000 	.word	0x40010000

08000760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <HAL_ADC_MspInit+0x34>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d10b      	bne.n	800078a <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_ADC_MspInit+0x38>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_ADC_MspInit+0x38>)
 8000778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_ADC_MspInit+0x38>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40012400 	.word	0x40012400
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <HAL_SPI_MspInit+0xd4>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d155      	bne.n	8000868 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <HAL_SPI_MspInit+0xd8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <HAL_SPI_MspInit+0xd8>)
 80007c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_SPI_MspInit+0xd8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_SPI_MspInit+0xd8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <HAL_SPI_MspInit+0xd8>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_SPI_MspInit+0xd8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	481e      	ldr	r0, [pc, #120]	; (8000878 <HAL_SPI_MspInit+0xdc>)
 8000800:	f000 ff72 	bl	80016e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4818      	ldr	r0, [pc, #96]	; (8000878 <HAL_SPI_MspInit+0xdc>)
 8000818:	f000 ff66 	bl	80016e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_SPI_MspInit+0xe0>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_SPI_MspInit+0xe4>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000824:	2210      	movs	r2, #16
 8000826:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_SPI_MspInit+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_SPI_MspInit+0xe0>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_SPI_MspInit+0xe0>)
 800084e:	f000 fdeb 	bl	8001428 <HAL_DMA_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8000858:	f7ff ff4a 	bl	80006f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000860:	649a      	str	r2, [r3, #72]	; 0x48
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_SPI_MspInit+0xe0>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40013000 	.word	0x40013000
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800
 800087c:	200001d8 	.word	0x200001d8
 8000880:	40020030 	.word	0x40020030

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 fa4d 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <DMA1_Channel3_IRQHandler+0x10>)
 80008da:	f000 fdff 	bl	80014dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001d8 	.word	0x200001d8

080008e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008ee:	f001 f9bc 	bl	8001c6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000277c 	.word	0x2000277c

080008fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <w25qDiskInitialize>:
//#include "spi.h"
//#include "gpio.h"
#include "w25q.h"

int32_t w25qDiskInitialize(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
	...

08000918 <w25qWaitForReady>:
  W25Q_CS_HI();
}

// Чтение бита занятости
void w25qWaitForReady(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  uint8_t reg = W25Q_RD_STATUS_1;
 800091e:	2305      	movs	r3, #5
 8000920:	71fb      	strb	r3, [r7, #7]
  uint8_t status = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	71bb      	strb	r3, [r7, #6]

  W25Q_CS_LO();
 8000926:	2200      	movs	r2, #0
 8000928:	2104      	movs	r1, #4
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <w25qWaitForReady+0x5c>)
 800092c:	f001 f860 	bl	80019f0 <HAL_GPIO_WritePin>
    
  do
  {
    status = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	71bb      	strb	r3, [r7, #6]
    
    W25Q_CS_LO(); 
 8000934:	2200      	movs	r2, #0
 8000936:	2104      	movs	r1, #4
 8000938:	480e      	ldr	r0, [pc, #56]	; (8000974 <w25qWaitForReady+0x5c>)
 800093a:	f001 f859 	bl	80019f0 <HAL_GPIO_WritePin>
    // Передать команду чтения статусного регистра
    HAL_SPI_Transmit(W25Q_SPI, &reg, 1, 100);
 800093e:	1df9      	adds	r1, r7, #7
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	2201      	movs	r2, #1
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <w25qWaitForReady+0x60>)
 8000946:	f003 fb1f 	bl	8003f88 <HAL_SPI_Transmit>
    // Прочитать статусный регистр
    HAL_SPI_Receive(W25Q_SPI, &status, 1, 100);
 800094a:	1db9      	adds	r1, r7, #6
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2201      	movs	r2, #1
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <w25qWaitForReady+0x60>)
 8000952:	f003 fc5c 	bl	800420e <HAL_SPI_Receive>
    W25Q_CS_HI();
 8000956:	2201      	movs	r2, #1
 8000958:	2104      	movs	r1, #4
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <w25qWaitForReady+0x5c>)
 800095c:	f001 f848 	bl	80019f0 <HAL_GPIO_WritePin>
  }
  while (status & 0x01);
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1e2      	bne.n	8000930 <w25qWaitForReady+0x18>
    
  
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40010800 	.word	0x40010800
 8000978:	20000180 	.word	0x20000180

0800097c <w25qSetBlockProtect>:

// Установка защитных бит
void w25qSetBlockProtect(uint8_t protect)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  uint8_t temp[] = {0x50, 0x00};
 8000986:	2350      	movs	r3, #80	; 0x50
 8000988:	81bb      	strh	r3, [r7, #12]

  W25Q_CS_LO();
 800098a:	2200      	movs	r2, #0
 800098c:	2104      	movs	r1, #4
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <w25qSetBlockProtect+0x6c>)
 8000990:	f001 f82e 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(W25Q_SPI, temp, 1, 100);
 8000994:	f107 010c 	add.w	r1, r7, #12
 8000998:	2364      	movs	r3, #100	; 0x64
 800099a:	2201      	movs	r2, #1
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <w25qSetBlockProtect+0x70>)
 800099e:	f003 faf3 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 80009a2:	2201      	movs	r2, #1
 80009a4:	2104      	movs	r1, #4
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <w25qSetBlockProtect+0x6c>)
 80009a8:	f001 f822 	bl	80019f0 <HAL_GPIO_WritePin>
    
  temp[0] = W25Q_WR_STATUS;
 80009ac:	2301      	movs	r3, #1
 80009ae:	733b      	strb	r3, [r7, #12]
  temp[1] = ((protect & 0x0F) << 2);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	737b      	strb	r3, [r7, #13]

  W25Q_CS_LO();
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <w25qSetBlockProtect+0x6c>)
 80009c4:	f001 f814 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(W25Q_SPI, temp, 2, 100);
 80009c8:	f107 010c 	add.w	r1, r7, #12
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	2202      	movs	r2, #2
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <w25qSetBlockProtect+0x70>)
 80009d2:	f003 fad9 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <w25qSetBlockProtect+0x6c>)
 80009dc:	f001 f808 	bl	80019f0 <HAL_GPIO_WritePin>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010800 	.word	0x40010800
 80009ec:	20000180 	.word	0x20000180

080009f0 <w25qReadSector>:
  W25Q_CS_HI();
}


// Read Sector
void w25qReadSector(uint32_t nSector, char* pBuffer){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	// Create an array for the command
	  uint8_t cmd[5] = {W25Q_READ_DATA,
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	711a      	strb	r2, [r3, #4]
 8000a04:	2303      	movs	r3, #3
 8000a06:	723b      	strb	r3, [r7, #8]
			  (uint8_t)(nSector >> 16),
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0c1b      	lsrs	r3, r3, #16
 8000a0c:	b2db      	uxtb	r3, r3
	  uint8_t cmd[5] = {W25Q_READ_DATA,
 8000a0e:	727b      	strb	r3, [r7, #9]
	          (uint8_t)(nSector >> 8),
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b2db      	uxtb	r3, r3
	  uint8_t cmd[5] = {W25Q_READ_DATA,
 8000a16:	72bb      	strb	r3, [r7, #10]
			  (uint8_t) nSector};
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	b2db      	uxtb	r3, r3
	  uint8_t cmd[5] = {W25Q_READ_DATA,
 8000a1c:	72fb      	strb	r3, [r7, #11]
	  W25Q_CS_LO();
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <w25qReadSector+0x6c>)
 8000a24:	f000 ffe4 	bl	80019f0 <HAL_GPIO_WritePin>
	  // Pass command and page address
	  HAL_SPI_Transmit(W25Q_SPI, cmd, 4, 100);
 8000a28:	f107 0108 	add.w	r1, r7, #8
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	2204      	movs	r2, #4
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <w25qReadSector+0x70>)
 8000a32:	f003 faa9 	bl	8003f88 <HAL_SPI_Transmit>
	  // Read page
	  HAL_SPI_Receive(W25Q_SPI, pBuffer, FLASH_SECTOR_SIZE, 500); // was 100
 8000a36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <w25qReadSector+0x70>)
 8000a42:	f003 fbe4 	bl	800420e <HAL_SPI_Receive>
	  W25Q_CS_HI();
 8000a46:	2201      	movs	r2, #1
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <w25qReadSector+0x6c>)
 8000a4c:	f000 ffd0 	bl	80019f0 <HAL_GPIO_WritePin>

	  w25qWaitForReady();
 8000a50:	f7ff ff62 	bl	8000918 <w25qWaitForReady>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	20000180 	.word	0x20000180

08000a64 <w25qWriteSector>:

//Write Sector
void w25qWriteSector(uint32_t nSector, char* pBuffer)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	int i,j;

	nSector *= FLASH_SECTOR_SIZE;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	031b      	lsls	r3, r3, #12
 8000a72:	607b      	str	r3, [r7, #4]
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e012      	b.n	8000aa0 <w25qWriteSector+0x3c>
		{
			w25qWritePage(pBuffer, nSector);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6838      	ldr	r0, [r7, #0]
 8000a82:	f000 f849 	bl	8000b18 <w25qWritePage>
			pBuffer += FLASH_PAGE_SIZE;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a8c:	603b      	str	r3, [r7, #0]
			nSector += FLASH_PAGE_SIZE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a94:	607b      	str	r3, [r7, #4]
			w25qWaitForReady();
 8000a96:	f7ff ff3f 	bl	8000918 <w25qWaitForReady>
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	dde9      	ble.n	8000a7a <w25qWriteSector+0x16>
		}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <w25qReadPage>:

// Reading the page
void w25qReadPage(uint8_t *page, uint16_t pagenum)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
  // Create an array for the command
  uint8_t com[5] = {W25Q_READ_PAGE, (uint8_t)(pagenum >> 8), 
 8000abc:	230b      	movs	r3, #11
 8000abe:	723b      	strb	r3, [r7, #8]
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	727b      	strb	r3, [r7, #9]
                   (uint8_t)(pagenum & 0x00FF), 0x00, 0x00};
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	b2db      	uxtb	r3, r3
  uint8_t com[5] = {W25Q_READ_PAGE, (uint8_t)(pagenum >> 8), 
 8000ace:	72bb      	strb	r3, [r7, #10]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	72fb      	strb	r3, [r7, #11]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	733b      	strb	r3, [r7, #12]
  
  W25Q_CS_LO();
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <w25qReadPage+0x60>)
 8000ade:	f000 ff87 	bl	80019f0 <HAL_GPIO_WritePin>
  // Pass command and page address
  HAL_SPI_Transmit(W25Q_SPI, com, 5, 100);
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	2205      	movs	r2, #5
 8000aea:	480a      	ldr	r0, [pc, #40]	; (8000b14 <w25qReadPage+0x64>)
 8000aec:	f003 fa4c 	bl	8003f88 <HAL_SPI_Transmit>
  // Read page
  HAL_SPI_Receive(W25Q_SPI, page, W25Q_PAGE_LEN, 10); // было 100
 8000af0:	230a      	movs	r3, #10
 8000af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <w25qReadPage+0x64>)
 8000afa:	f003 fb88 	bl	800420e <HAL_SPI_Receive>
  W25Q_CS_HI();
 8000afe:	2201      	movs	r2, #1
 8000b00:	2104      	movs	r1, #4
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <w25qReadPage+0x60>)
 8000b04:	f000 ff74 	bl	80019f0 <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40010800 	.word	0x40010800
 8000b14:	20000180 	.word	0x20000180

08000b18 <w25qWritePage>:

// Page entry
// Takes an array of data as an argument
// a page long and the page number for the entry
void w25qWritePage(uint8_t *page, uint16_t pagenum)
{  
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
  uint8_t temp[4] = {W25Q_WRITE_ENABLE, 0x00, 0x00, 0x00};
 8000b24:	2306      	movs	r3, #6
 8000b26:	60fb      	str	r3, [r7, #12]
  
  w25qSetBlockProtect(0x00);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ff27 	bl	800097c <w25qSetBlockProtect>

  W25Q_CS_LO();
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2104      	movs	r1, #4
 8000b32:	4827      	ldr	r0, [pc, #156]	; (8000bd0 <w25qWritePage+0xb8>)
 8000b34:	f000 ff5c 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(W25Q_SPI, temp, 1, 100); // было 100
 8000b38:	f107 010c 	add.w	r1, r7, #12
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4824      	ldr	r0, [pc, #144]	; (8000bd4 <w25qWritePage+0xbc>)
 8000b42:	f003 fa21 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 8000b46:	2201      	movs	r2, #1
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <w25qWritePage+0xb8>)
 8000b4c:	f000 ff50 	bl	80019f0 <HAL_GPIO_WritePin>
    
  temp[0] = W25Q_PAGE_PROGRAM;
 8000b50:	2302      	movs	r3, #2
 8000b52:	733b      	strb	r3, [r7, #12]
  temp[1] = (uint8_t)(pagenum >> 8);
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	737b      	strb	r3, [r7, #13]
  temp[2] = (uint8_t)(pagenum & 0x00FF);
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	73bb      	strb	r3, [r7, #14]
  temp[3] = 0x00;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]

  W25Q_CS_LO();
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <w25qWritePage+0xb8>)
 8000b6e:	f000 ff3f 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(W25Q_SPI, temp, 4, 100);
 8000b72:	f107 010c 	add.w	r1, r7, #12
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2204      	movs	r2, #4
 8000b7a:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <w25qWritePage+0xbc>)
 8000b7c:	f003 fa04 	bl	8003f88 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(W25Q_SPI, page, W25Q_PAGE_LEN, 100); // было 100
 8000b80:	2364      	movs	r3, #100	; 0x64
 8000b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <w25qWritePage+0xbc>)
 8000b8a:	f003 f9fd 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2104      	movs	r1, #4
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <w25qWritePage+0xb8>)
 8000b94:	f000 ff2c 	bl	80019f0 <HAL_GPIO_WritePin>
    
  w25qWaitForReady();
 8000b98:	f7ff febe 	bl	8000918 <w25qWaitForReady>
    
  temp[0] = W25Q_WRRITE_DISABLE;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	733b      	strb	r3, [r7, #12]

  W25Q_CS_LO();
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <w25qWritePage+0xb8>)
 8000ba6:	f000 ff23 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(W25Q_SPI, temp, 1, 100); // было 100
 8000baa:	f107 010c 	add.w	r1, r7, #12
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <w25qWritePage+0xbc>)
 8000bb4:	f003 f9e8 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <w25qWritePage+0xb8>)
 8000bbe:	f000 ff17 	bl	80019f0 <HAL_GPIO_WritePin>
    
  w25qSetBlockProtect(0x0F);
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f7ff feda 	bl	800097c <w25qSetBlockProtect>
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	20000180 	.word	0x20000180

08000bd8 <w25qEraseSector>:

// Очистка сектора
void w25qEraseSector(uint16_t sector)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
  w25qSetBlockProtect(0x00);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff feca 	bl	800097c <w25qSetBlockProtect>
  
  sector = (sector << 1);  
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	80fb      	strh	r3, [r7, #6]
  uint8_t com = W25Q_WRITE_ENABLE;
 8000bee:	2306      	movs	r3, #6
 8000bf0:	73fb      	strb	r3, [r7, #15]
  uint8_t temp[4] = {W25Q_SECTOR_ERASE_4, (uint8_t)(sector >> 8), 
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	723b      	strb	r3, [r7, #8]
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	727b      	strb	r3, [r7, #9]
                    (uint8_t)(sector & 0x00FF), 0x00};
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2db      	uxtb	r3, r3
  uint8_t temp[4] = {W25Q_SECTOR_ERASE_4, (uint8_t)(sector >> 8), 
 8000c04:	72bb      	strb	r3, [r7, #10]
 8000c06:	2300      	movs	r3, #0
 8000c08:	72fb      	strb	r3, [r7, #11]
  W25Q_CS_LO();
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	481e      	ldr	r0, [pc, #120]	; (8000c88 <w25qEraseSector+0xb0>)
 8000c10:	f000 feee 	bl	80019f0 <HAL_GPIO_WritePin>
  // Передать команду и адрес страницы
  HAL_SPI_Transmit(W25Q_SPI, &com, 1, 100);
 8000c14:	f107 010f 	add.w	r1, r7, #15
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	481b      	ldr	r0, [pc, #108]	; (8000c8c <w25qEraseSector+0xb4>)
 8000c1e:	f003 f9b3 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 8000c22:	2201      	movs	r2, #1
 8000c24:	2104      	movs	r1, #4
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <w25qEraseSector+0xb0>)
 8000c28:	f000 fee2 	bl	80019f0 <HAL_GPIO_WritePin>

  W25Q_CS_LO();
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <w25qEraseSector+0xb0>)
 8000c32:	f000 fedd 	bl	80019f0 <HAL_GPIO_WritePin>
  // Передать команду и адрес страницы
  HAL_SPI_Transmit(W25Q_SPI, temp, 4, 100);
 8000c36:	f107 0108 	add.w	r1, r7, #8
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <w25qEraseSector+0xb4>)
 8000c40:	f003 f9a2 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 8000c44:	2201      	movs	r2, #1
 8000c46:	2104      	movs	r1, #4
 8000c48:	480f      	ldr	r0, [pc, #60]	; (8000c88 <w25qEraseSector+0xb0>)
 8000c4a:	f000 fed1 	bl	80019f0 <HAL_GPIO_WritePin>

  w25qWaitForReady();
 8000c4e:	f7ff fe63 	bl	8000918 <w25qWaitForReady>
   
  temp[0] = W25Q_WRRITE_DISABLE;
 8000c52:	2304      	movs	r3, #4
 8000c54:	723b      	strb	r3, [r7, #8]
   
  W25Q_CS_LO();
 8000c56:	2200      	movs	r2, #0
 8000c58:	2104      	movs	r1, #4
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <w25qEraseSector+0xb0>)
 8000c5c:	f000 fec8 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(W25Q_SPI, temp, 1, 100);
 8000c60:	f107 0108 	add.w	r1, r7, #8
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2201      	movs	r2, #1
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <w25qEraseSector+0xb4>)
 8000c6a:	f003 f98d 	bl	8003f88 <HAL_SPI_Transmit>
  W25Q_CS_HI();
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2104      	movs	r1, #4
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <w25qEraseSector+0xb0>)
 8000c74:	f000 febc 	bl	80019f0 <HAL_GPIO_WritePin>

  w25qSetBlockProtect(0x0F);
 8000c78:	200f      	movs	r0, #15
 8000c7a:	f7ff fe7f 	bl	800097c <w25qSetBlockProtect>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010800 	.word	0x40010800
 8000c8c:	20000180 	.word	0x20000180

08000c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c90:	f7ff fe34 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cac:	4c09      	ldr	r4, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f00c f99b 	bl	800cff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fb73 	bl	80003a8 <main>
  bx lr
 8000cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000ccc:	0800d214 	.word	0x0800d214
  ldr r2, =_sbss
 8000cd0:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000cd4:	20002cdc 	.word	0x20002cdc

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x28>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x28>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 fb59 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fd00 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fb71 	bl	800140e <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 fb39 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000008 	.word	0x20000008
 8000d88:	2000227c 	.word	0x2000227c

08000d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	2000227c 	.word	0x2000227c

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff fff0 	bl	8000d8c <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffe0 	bl	8000d8c <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e0be      	b.n	8000f88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fc9a 	bl	8000760 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f9ab 	bl	8001188 <ADC_ConversionStop_Disable>
 8000e32:	4603      	mov	r3, r0
 8000e34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8099 	bne.w	8000f76 <HAL_ADC_Init+0x18e>
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f040 8095 	bne.w	8000f76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e54:	f023 0302 	bic.w	r3, r3, #2
 8000e58:	f043 0202 	orr.w	r2, r3, #2
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7b1b      	ldrb	r3, [r3, #12]
 8000e6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e80:	d003      	beq.n	8000e8a <HAL_ADC_Init+0xa2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d102      	bne.n	8000e90 <HAL_ADC_Init+0xa8>
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	e000      	b.n	8000e92 <HAL_ADC_Init+0xaa>
 8000e90:	2300      	movs	r3, #0
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7d1b      	ldrb	r3, [r3, #20]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d119      	bne.n	8000ed4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	035a      	lsls	r2, r3, #13
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e00b      	b.n	8000ed4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f043 0220 	orr.w	r2, r3, #32
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_ADC_Init+0x1a8>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f04:	d003      	beq.n	8000f0e <HAL_ADC_Init+0x126>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d104      	bne.n	8000f18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	051b      	lsls	r3, r3, #20
 8000f16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_ADC_Init+0x1ac>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10b      	bne.n	8000f54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f52:	e018      	b.n	8000f86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f023 0312 	bic.w	r3, r3, #18
 8000f5c:	f043 0210 	orr.w	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f74:	e007      	b.n	8000f86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	ffe1f7fd 	.word	0xffe1f7fd
 8000f94:	ff1f0efe 	.word	0xff1f0efe

08000f98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x20>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e0dc      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1da>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b06      	cmp	r3, #6
 8000fc6:	d81c      	bhi.n	8001002 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b05      	subs	r3, #5
 8000fda:	221f      	movs	r2, #31
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4019      	ands	r1, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b05      	subs	r3, #5
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8001000:	e03c      	b.n	800107c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d81c      	bhi.n	8001044 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	3b23      	subs	r3, #35	; 0x23
 800101c:	221f      	movs	r2, #31
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	4019      	ands	r1, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b23      	subs	r3, #35	; 0x23
 8001036:	fa00 f203 	lsl.w	r2, r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
 8001042:	e01b      	b.n	800107c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3b41      	subs	r3, #65	; 0x41
 8001056:	221f      	movs	r2, #31
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	4019      	ands	r1, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b41      	subs	r3, #65	; 0x41
 8001070:	fa00 f203 	lsl.w	r2, r0, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b09      	cmp	r3, #9
 8001082:	d91c      	bls.n	80010be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	3b1e      	subs	r3, #30
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	4019      	ands	r1, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6898      	ldr	r0, [r3, #8]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	3b1e      	subs	r3, #30
 80010b0:	fa00 f203 	lsl.w	r2, r0, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	e019      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	2207      	movs	r2, #7
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d003      	beq.n	8001102 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010fe:	2b11      	cmp	r3, #17
 8001100:	d132      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_ADC_ConfigChannel+0x1e4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d125      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d126      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001128:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b10      	cmp	r3, #16
 8001130:	d11a      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_ADC_ConfigChannel+0x1e8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <HAL_ADC_ConfigChannel+0x1ec>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9a      	lsrs	r2, r3, #18
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001148:	e002      	b.n	8001150 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <HAL_ADC_ConfigChannel+0x1b2>
 8001156:	e007      	b.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f043 0220 	orr.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40012400 	.word	0x40012400
 8001180:	20000000 	.word	0x20000000
 8001184:	431bde83 	.word	0x431bde83

08001188 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d12e      	bne.n	8001200 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011b2:	f7ff fdeb 	bl	8000d8c <HAL_GetTick>
 80011b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011b8:	e01b      	b.n	80011f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ba:	f7ff fde7 	bl	8000d8c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d914      	bls.n	80011f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10d      	bne.n	80011f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f043 0210 	orr.w	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e007      	b.n	8001202 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d0dc      	beq.n	80011ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4906      	ldr	r1, [pc, #24]	; (80012a4 <__NVIC_EnableIRQ+0x34>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff90 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff2d 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff42 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff90 	bl	80012fc <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5f 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff35 	bl	8001270 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e043      	b.n	80014c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_DMA_Init+0xa8>)
 8001446:	4413      	add	r3, r2
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_DMA_Init+0xac>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	009a      	lsls	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_DMA_Init+0xb0>)
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001472:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	bffdfff8 	.word	0xbffdfff8
 80014d4:	cccccccd 	.word	0xcccccccd
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2204      	movs	r2, #4
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d04f      	beq.n	80015a4 <HAL_DMA_IRQHandler+0xc8>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d04a      	beq.n	80015a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d107      	bne.n	800152c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a66      	ldr	r2, [pc, #408]	; (80016cc <HAL_DMA_IRQHandler+0x1f0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d029      	beq.n	800158a <HAL_DMA_IRQHandler+0xae>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a65      	ldr	r2, [pc, #404]	; (80016d0 <HAL_DMA_IRQHandler+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d022      	beq.n	8001586 <HAL_DMA_IRQHandler+0xaa>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_DMA_IRQHandler+0x1f8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01a      	beq.n	8001580 <HAL_DMA_IRQHandler+0xa4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a62      	ldr	r2, [pc, #392]	; (80016d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d012      	beq.n	800157a <HAL_DMA_IRQHandler+0x9e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a60      	ldr	r2, [pc, #384]	; (80016dc <HAL_DMA_IRQHandler+0x200>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00a      	beq.n	8001574 <HAL_DMA_IRQHandler+0x98>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <HAL_DMA_IRQHandler+0x204>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d102      	bne.n	800156e <HAL_DMA_IRQHandler+0x92>
 8001568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156c:	e00e      	b.n	800158c <HAL_DMA_IRQHandler+0xb0>
 800156e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001572:	e00b      	b.n	800158c <HAL_DMA_IRQHandler+0xb0>
 8001574:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001578:	e008      	b.n	800158c <HAL_DMA_IRQHandler+0xb0>
 800157a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157e:	e005      	b.n	800158c <HAL_DMA_IRQHandler+0xb0>
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	e002      	b.n	800158c <HAL_DMA_IRQHandler+0xb0>
 8001586:	2340      	movs	r3, #64	; 0x40
 8001588:	e000      	b.n	800158c <HAL_DMA_IRQHandler+0xb0>
 800158a:	2304      	movs	r3, #4
 800158c:	4a55      	ldr	r2, [pc, #340]	; (80016e4 <HAL_DMA_IRQHandler+0x208>)
 800158e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8094 	beq.w	80016c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015a2:	e08e      	b.n	80016c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2202      	movs	r2, #2
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d056      	beq.n	8001662 <HAL_DMA_IRQHandler+0x186>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d051      	beq.n	8001662 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10b      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020a 	bic.w	r2, r2, #10
 80015da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a38      	ldr	r2, [pc, #224]	; (80016cc <HAL_DMA_IRQHandler+0x1f0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d029      	beq.n	8001642 <HAL_DMA_IRQHandler+0x166>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <HAL_DMA_IRQHandler+0x1f4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d022      	beq.n	800163e <HAL_DMA_IRQHandler+0x162>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <HAL_DMA_IRQHandler+0x1f8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01a      	beq.n	8001638 <HAL_DMA_IRQHandler+0x15c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_DMA_IRQHandler+0x1fc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <HAL_DMA_IRQHandler+0x156>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a32      	ldr	r2, [pc, #200]	; (80016dc <HAL_DMA_IRQHandler+0x200>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <HAL_DMA_IRQHandler+0x150>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <HAL_DMA_IRQHandler+0x204>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_DMA_IRQHandler+0x14a>
 8001620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001624:	e00e      	b.n	8001644 <HAL_DMA_IRQHandler+0x168>
 8001626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162a:	e00b      	b.n	8001644 <HAL_DMA_IRQHandler+0x168>
 800162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001630:	e008      	b.n	8001644 <HAL_DMA_IRQHandler+0x168>
 8001632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001636:	e005      	b.n	8001644 <HAL_DMA_IRQHandler+0x168>
 8001638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163c:	e002      	b.n	8001644 <HAL_DMA_IRQHandler+0x168>
 800163e:	2320      	movs	r3, #32
 8001640:	e000      	b.n	8001644 <HAL_DMA_IRQHandler+0x168>
 8001642:	2302      	movs	r3, #2
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_DMA_IRQHandler+0x208>)
 8001646:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d034      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001660:	e02f      	b.n	80016c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2208      	movs	r2, #8
 8001668:	409a      	lsls	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d028      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x1e8>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 020e 	bic.w	r2, r2, #14
 800168a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
 800169a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
    }
  }
  return;
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
}
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40020008 	.word	0x40020008
 80016d0:	4002001c 	.word	0x4002001c
 80016d4:	40020030 	.word	0x40020030
 80016d8:	40020044 	.word	0x40020044
 80016dc:	40020058 	.word	0x40020058
 80016e0:	4002006c 	.word	0x4002006c
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e169      	b.n	80019d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016fc:	2201      	movs	r2, #1
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8158 	bne.w	80019ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a9a      	ldr	r2, [pc, #616]	; (8001988 <HAL_GPIO_Init+0x2a0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d05e      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001724:	4a98      	ldr	r2, [pc, #608]	; (8001988 <HAL_GPIO_Init+0x2a0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d875      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800172a:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d058      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001730:	4a96      	ldr	r2, [pc, #600]	; (800198c <HAL_GPIO_Init+0x2a4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d86f      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001736:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d052      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 800173c:	4a94      	ldr	r2, [pc, #592]	; (8001990 <HAL_GPIO_Init+0x2a8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d869      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001742:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2ac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d04c      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001748:	4a92      	ldr	r2, [pc, #584]	; (8001994 <HAL_GPIO_Init+0x2ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d863      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800174e:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d046      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001754:	4a90      	ldr	r2, [pc, #576]	; (8001998 <HAL_GPIO_Init+0x2b0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d85d      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800175a:	2b12      	cmp	r3, #18
 800175c:	d82a      	bhi.n	80017b4 <HAL_GPIO_Init+0xcc>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d859      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_GPIO_Init+0x80>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	080017e3 	.word	0x080017e3
 800176c:	080017bd 	.word	0x080017bd
 8001770:	080017cf 	.word	0x080017cf
 8001774:	08001811 	.word	0x08001811
 8001778:	08001817 	.word	0x08001817
 800177c:	08001817 	.word	0x08001817
 8001780:	08001817 	.word	0x08001817
 8001784:	08001817 	.word	0x08001817
 8001788:	08001817 	.word	0x08001817
 800178c:	08001817 	.word	0x08001817
 8001790:	08001817 	.word	0x08001817
 8001794:	08001817 	.word	0x08001817
 8001798:	08001817 	.word	0x08001817
 800179c:	08001817 	.word	0x08001817
 80017a0:	08001817 	.word	0x08001817
 80017a4:	08001817 	.word	0x08001817
 80017a8:	08001817 	.word	0x08001817
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017d9 	.word	0x080017d9
 80017b4:	4a79      	ldr	r2, [pc, #484]	; (800199c <HAL_GPIO_Init+0x2b4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ba:	e02c      	b.n	8001816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e029      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e024      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	3308      	adds	r3, #8
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e01f      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	330c      	adds	r3, #12
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e01a      	b.n	8001818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ea:	2304      	movs	r3, #4
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e013      	b.n	8001818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	611a      	str	r2, [r3, #16]
          break;
 8001802:	e009      	b.n	8001818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	615a      	str	r2, [r3, #20]
          break;
 800180e:	e003      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x130>
          break;
 8001816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d801      	bhi.n	8001822 <HAL_GPIO_Init+0x13a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_Init+0x13e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d802      	bhi.n	8001834 <HAL_GPIO_Init+0x14c>
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x152>
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	3b08      	subs	r3, #8
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	210f      	movs	r1, #15
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80b1 	beq.w	80019ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2bc>)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a40      	ldr	r2, [pc, #256]	; (80019a8 <HAL_GPIO_Init+0x2c0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3f      	ldr	r2, [pc, #252]	; (80019ac <HAL_GPIO_Init+0x2c4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3e      	ldr	r2, [pc, #248]	; (80019b0 <HAL_GPIO_Init+0x2c8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1e4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3d      	ldr	r2, [pc, #244]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1e0>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018d4:	2300      	movs	r3, #0
 80018d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e6:	492f      	ldr	r1, [pc, #188]	; (80019a4 <HAL_GPIO_Init+0x2bc>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	492c      	ldr	r1, [pc, #176]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4928      	ldr	r1, [pc, #160]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	491e      	ldr	r1, [pc, #120]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4918      	ldr	r1, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4914      	ldr	r1, [pc, #80]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001968:	4013      	ands	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d021      	beq.n	80019bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	490e      	ldr	r1, [pc, #56]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e021      	b.n	80019ca <HAL_GPIO_Init+0x2e2>
 8001986:	bf00      	nop
 8001988:	10320000 	.word	0x10320000
 800198c:	10310000 	.word	0x10310000
 8001990:	10220000 	.word	0x10220000
 8001994:	10210000 	.word	0x10210000
 8001998:	10120000 	.word	0x10120000
 800199c:	10110000 	.word	0x10110000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010800 	.word	0x40010800
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40011400 	.word	0x40011400
 80019b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_GPIO_Init+0x304>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <HAL_GPIO_Init+0x304>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f ae8e 	bne.w	80016fc <HAL_GPIO_Init+0x14>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	372c      	adds	r7, #44	; 0x2c
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	b08b      	sub	sp, #44	; 0x2c
 8001a24:	af06      	add	r7, sp, #24
 8001a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0f1      	b.n	8001c16 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f00b f80c 	bl	800ca64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 ffbf 	bl	80049dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	687e      	ldr	r6, [r7, #4]
 8001a66:	466d      	mov	r5, sp
 8001a68:	f106 0410 	add.w	r4, r6, #16
 8001a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	602b      	str	r3, [r5, #0]
 8001a74:	1d33      	adds	r3, r6, #4
 8001a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f002 ff89 	bl	8004990 <USB_CoreInit>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0c2      	b.n	8001c16 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 ffba 	bl	8004a10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e040      	b.n	8001b24 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3303      	adds	r3, #3
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	3338      	adds	r3, #56	; 0x38
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	333c      	adds	r3, #60	; 0x3c
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3340      	adds	r3, #64	; 0x40
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	3301      	adds	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3b9      	bcc.n	8001aa2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e044      	b.n	8001bbe <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d3b5      	bcc.n	8001b34 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	687e      	ldr	r6, [r7, #4]
 8001bd0:	466d      	mov	r5, sp
 8001bd2:	f106 0410 	add.w	r4, r6, #16
 8001bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	602b      	str	r3, [r5, #0]
 8001bde:	1d33      	adds	r3, r6, #4
 8001be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be2:	6838      	ldr	r0, [r7, #0]
 8001be4:	f002 ff20 	bl	8004a28 <USB_DevInit>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00d      	b.n	8001c16 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 f9b7 	bl	8006f82 <USB_DevDisconnect>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_PCD_Start+0x16>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e016      	b.n	8001c62 <HAL_PCD_Start+0x44>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 feb5 	bl	80049b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c46:	2101      	movs	r1, #1
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f00b f994 	bl	800cf76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f005 f98b 	bl	8006f6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b088      	sub	sp, #32
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 f98d 	bl	8006f96 <USB_ReadInterrupts>
 8001c7c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fb48 	bl	800231e <PCD_EP_ISR_Handler>

    return;
 8001c8e:	e119      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cac:	b292      	uxth	r2, r2
 8001cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f00a ff51 	bl	800cb5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f905 	bl	8001eca <HAL_PCD_SetAddress>

    return;
 8001cc0:	e100      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ce4:	e0ee      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d02:	b292      	uxth	r2, r2
 8001d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d08:	e0dc      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d027      	beq.n	8001d64 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	b292      	uxth	r2, r2
 8001d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0208 	bic.w	r2, r2, #8
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f00a ff41 	bl	800cbcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d62:	e0af      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8083 	beq.w	8001e76 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	77fb      	strb	r3, [r7, #31]
 8001d74:	e010      	b.n	8001d98 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	b292      	uxth	r2, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	3320      	adds	r3, #32
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001d92:	7ffb      	ldrb	r3, [r7, #31]
 8001d94:	3301      	adds	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	d9eb      	bls.n	8001d76 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	b292      	uxth	r2, r2
 8001db2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001dce:	bf00      	nop
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f6      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df4:	b292      	uxth	r2, r2
 8001df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	77fb      	strb	r3, [r7, #31]
 8001dfe:	e00f      	b.n	8001e20 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e00:	7ffb      	ldrb	r3, [r7, #31]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4611      	mov	r1, r2
 8001e08:	7ffa      	ldrb	r2, [r7, #31]
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	440a      	add	r2, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	3320      	adds	r3, #32
 8001e12:	443b      	add	r3, r7
 8001e14:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001e18:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	d9ec      	bls.n	8001e00 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0208 	orr.w	r2, r2, #8
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e50:	b292      	uxth	r2, r2
 8001e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0204 	orr.w	r2, r2, #4
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f00a fe92 	bl	800cb98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e74:	e026      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00f      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f00a fe50 	bl	800cb3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e9e:	e011      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ec2:	bf00      	nop
  }
}
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_PCD_SetAddress+0x1a>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e013      	b.n	8001f0c <HAL_PCD_SetAddress+0x42>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f005 f823 	bl	8006f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	70fb      	strb	r3, [r7, #3]
 8001f26:	460b      	mov	r3, r1
 8001f28:	803b      	strh	r3, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da0e      	bge.n	8001f58 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	705a      	strb	r2, [r3, #1]
 8001f56:	e00e      	b.n	8001f76 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 0207 	and.w	r2, r3, #7
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f82:	883a      	ldrh	r2, [r7, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	78ba      	ldrb	r2, [r7, #2]
 8001f8c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f8e:	78bb      	ldrb	r3, [r7, #2]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_Open+0x94>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_Open+0xb2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fd6c 	bl	8004a94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0e      	bge.n	8002000 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	705a      	strb	r2, [r3, #1]
 8001ffe:	e00e      	b.n	800201e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 0207 	and.w	r2, r3, #7
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_PCD_EP_Close+0x6a>
 8002034:	2302      	movs	r3, #2
 8002036:	e00e      	b.n	8002056 <HAL_PCD_EP_Close+0x88>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68f9      	ldr	r1, [r7, #12]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 f8e4 	bl	8005214 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	460b      	mov	r3, r1
 800206c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	f003 0207 	and.w	r2, r3, #7
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fa9b 	bl	80055ec <USB_EPStartXfer>

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0207 	and.w	r2, r3, #7
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	460b      	mov	r3, r1
 80020fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2201      	movs	r2, #1
 8002138:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	b2da      	uxtb	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fa4d 	bl	80055ec <USB_EPStartXfer>

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 0207 	and.w	r2, r3, #7
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d901      	bls.n	800217a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e04c      	b.n	8002214 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800217a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	da0e      	bge.n	80021a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	705a      	strb	r2, [r3, #1]
 800219e:	e00c      	b.n	80021ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_PCD_EP_SetStall+0x7e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e01c      	b.n	8002214 <HAL_PCD_EP_SetStall+0xb8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fdb0 	bl	8006d4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f004 fed5 	bl	8006fb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 020f 	and.w	r2, r3, #15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d901      	bls.n	800223a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e040      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800223a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0e      	bge.n	8002260 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	705a      	strb	r2, [r3, #1]
 800225e:	e00e      	b.n	800227e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 0207 	and.w	r2, r3, #7
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_EP_ClrStall+0x82>
 800229a:	2302      	movs	r3, #2
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fd9e 	bl	8006dee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_EP_Flush+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e01b      	b.n	8002316 <HAL_PCD_EP_Flush+0x52>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da09      	bge.n	8002302 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f002 fbb4 	bl	8004a68 <USB_FlushTxFifo>
 8002300:	e004      	b.n	800230c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fbb9 	bl	8004a7e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b096      	sub	sp, #88	; 0x58
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002326:	e3bf      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002334:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002342:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8179 	bne.w	800263e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800234c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d152      	bne.n	80023fe <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002368:	81fb      	strh	r3, [r7, #14]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002378:	b29b      	uxth	r3, r3
 800237a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3328      	adds	r3, #40	; 0x28
 8002380:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	3302      	adds	r3, #2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	441a      	add	r2, r3
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023bc:	2100      	movs	r1, #0
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f00a fba3 	bl	800cb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 836b 	beq.w	8002aa8 <PCD_EP_ISR_Handler+0x78a>
 80023d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 8366 	bne.w	8002aa8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023fc:	e354      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002404:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002410:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002418:	2b00      	cmp	r3, #0
 800241a:	d034      	beq.n	8002486 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	3306      	adds	r3, #6
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002446:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002454:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002458:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800245a:	b29b      	uxth	r3, r3
 800245c:	f004 fdfa 	bl	8007054 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f640 738f 	movw	r3, #3983	; 0xf8f
 800246c:	4013      	ands	r3, r2
 800246e:	823b      	strh	r3, [r7, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	8a3a      	ldrh	r2, [r7, #16]
 8002476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800247a:	b292      	uxth	r2, r2
 800247c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f00a fb16 	bl	800cab0 <HAL_PCD_SetupStageCallback>
 8002484:	e310      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002486:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800248a:	2b00      	cmp	r3, #0
 800248c:	f280 830c 	bge.w	8002aa8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29a      	uxth	r2, r3
 8002498:	f640 738f 	movw	r3, #3983	; 0xf8f
 800249c:	4013      	ands	r3, r2
 800249e:	83fb      	strh	r3, [r7, #30]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	8bfa      	ldrh	r2, [r7, #30]
 80024a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024aa:	b292      	uxth	r2, r2
 80024ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	3306      	adds	r3, #6
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d019      	beq.n	8002516 <PCD_EP_ISR_Handler+0x1f8>
 80024e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d015      	beq.n	8002516 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	6959      	ldr	r1, [r3, #20]
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f004 fdaa 	bl	8007054 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	441a      	add	r2, r3
 800250a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800250e:	2100      	movs	r1, #0
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f00a fadf 	bl	800cad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002520:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002528:	2b00      	cmp	r3, #0
 800252a:	f040 82bd 	bne.w	8002aa8 <PCD_EP_ISR_Handler+0x78a>
 800252e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002532:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800253a:	f000 82b5 	beq.w	8002aa8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002568:	b29a      	uxth	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b3e      	cmp	r3, #62	; 0x3e
 8002574:	d91d      	bls.n	80025b2 <PCD_EP_ISR_Handler+0x294>
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <PCD_EP_ISR_Handler+0x272>
 800258a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258c:	3b01      	subs	r3, #1
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29a      	uxth	r2, r3
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	b29b      	uxth	r3, r3
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	b29b      	uxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	e026      	b.n	8002600 <PCD_EP_ISR_Handler+0x2e2>
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10a      	bne.n	80025d0 <PCD_EP_ISR_Handler+0x2b2>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e017      	b.n	8002600 <PCD_EP_ISR_Handler+0x2e2>
 80025d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <PCD_EP_ISR_Handler+0x2cc>
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e6:	3301      	adds	r3, #1
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	029b      	lsls	r3, r3, #10
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002610:	827b      	strh	r3, [r7, #18]
 8002612:	8a7b      	ldrh	r3, [r7, #18]
 8002614:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002618:	827b      	strh	r3, [r7, #18]
 800261a:	8a7b      	ldrh	r3, [r7, #18]
 800261c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002620:	827b      	strh	r3, [r7, #18]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	8a7b      	ldrh	r3, [r7, #18]
 8002628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002638:	b29b      	uxth	r3, r3
 800263a:	8013      	strh	r3, [r2, #0]
 800263c:	e234      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002652:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002656:	2b00      	cmp	r3, #0
 8002658:	f280 80fc 	bge.w	8002854 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29a      	uxth	r2, r3
 800266e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002672:	4013      	ands	r3, r2
 8002674:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800268a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268e:	b292      	uxth	r2, r2
 8002690:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002692:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026aa:	7b1b      	ldrb	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d125      	bne.n	80026fc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	3306      	adds	r3, #6
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80026dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8092 	beq.w	800280a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	6959      	ldr	r1, [r3, #20]
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	88da      	ldrh	r2, [r3, #6]
 80026f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026f6:	f004 fcad 	bl	8007054 <USB_ReadPMA>
 80026fa:	e086      	b.n	800280a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	78db      	ldrb	r3, [r3, #3]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d10a      	bne.n	800271a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002704:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002708:	461a      	mov	r2, r3
 800270a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f9d9 	bl	8002ac4 <HAL_PCD_EP_DB_Receive>
 8002712:	4603      	mov	r3, r0
 8002714:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002718:	e077      	b.n	800280a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002734:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	441a      	add	r2, r3
 8002746:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800274a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800274e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002756:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800275a:	b29b      	uxth	r3, r3
 800275c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d024      	beq.n	80027c2 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	3302      	adds	r3, #2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d02e      	beq.n	800280a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	6959      	ldr	r1, [r3, #20]
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	891a      	ldrh	r2, [r3, #8]
 80027b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027bc:	f004 fc4a 	bl	8007054 <USB_ReadPMA>
 80027c0:	e023      	b.n	800280a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	3306      	adds	r3, #6
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	6959      	ldr	r1, [r3, #20]
 80027fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002800:	895a      	ldrh	r2, [r3, #10]
 8002802:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002806:	f004 fc25 	bl	8007054 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002812:	441a      	add	r2, r3
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002820:	441a      	add	r2, r3
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <PCD_EP_ISR_Handler+0x51c>
 800282e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	429a      	cmp	r2, r3
 8002838:	d206      	bcs.n	8002848 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f00a f947 	bl	800cad4 <HAL_PCD_DataOutStageCallback>
 8002846:	e005      	b.n	8002854 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fecc 	bl	80055ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002854:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8123 	beq.w	8002aa8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002862:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002890:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	441a      	add	r2, r3
 80028a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80028b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b4:	78db      	ldrb	r3, [r3, #3]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	f040 80a2 	bne.w	8002a00 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	2200      	movs	r2, #0
 80028c0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	7b1b      	ldrb	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8093 	beq.w	80029f2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d046      	beq.n	8002966 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d126      	bne.n	800292e <PCD_EP_ISR_Handler+0x610>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	4413      	add	r3, r2
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	011a      	lsls	r2, r3, #4
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	4413      	add	r3, r2
 8002902:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002906:	623b      	str	r3, [r7, #32]
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002912:	b29a      	uxth	r2, r3
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002926:	b29a      	uxth	r2, r3
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e061      	b.n	80029f2 <PCD_EP_ISR_Handler+0x6d4>
 800292e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d15d      	bne.n	80029f2 <PCD_EP_ISR_Handler+0x6d4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	4413      	add	r3, r2
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	011a      	lsls	r2, r3, #4
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	4413      	add	r3, r2
 8002958:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	2200      	movs	r2, #0
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	e045      	b.n	80029f2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d126      	bne.n	80029c2 <PCD_EP_ISR_Handler+0x6a4>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	4413      	add	r3, r2
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
 800298c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	011a      	lsls	r2, r3, #4
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	4413      	add	r3, r2
 8002996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	801a      	strh	r2, [r3, #0]
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	801a      	strh	r2, [r3, #0]
 80029c0:	e017      	b.n	80029f2 <PCD_EP_ISR_Handler+0x6d4>
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d113      	bne.n	80029f2 <PCD_EP_ISR_Handler+0x6d4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d8:	4413      	add	r3, r2
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011a      	lsls	r2, r3, #4
 80029e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	2200      	movs	r2, #0
 80029f0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f00a f886 	bl	800cb0a <HAL_PCD_DataInStageCallback>
 80029fe:	e053      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d146      	bne.n	8002a9a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3302      	adds	r3, #2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d907      	bls.n	8002a54 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	619a      	str	r2, [r3, #24]
 8002a52:	e002      	b.n	8002a5a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f00a f84e 	bl	800cb0a <HAL_PCD_DataInStageCallback>
 8002a6e:	e01b      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a78:	441a      	add	r2, r3
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a86:	441a      	add	r2, r3
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fdaa 	bl	80055ec <USB_EPStartXfer>
 8002a98:	e006      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f91b 	bl	8002cde <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f6ff ac37 	blt.w	8002328 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3758      	adds	r7, #88	; 0x58
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d07e      	beq.n	8002bda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	3302      	adds	r3, #2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	8b7b      	ldrh	r3, [r7, #26]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d306      	bcc.n	8002b1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	8b7b      	ldrh	r3, [r7, #26]
 8002b16:	1ad2      	subs	r2, r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	e002      	b.n	8002b24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d123      	bne.n	8002b74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	833b      	strh	r3, [r7, #24]
 8002b48:	8b3b      	ldrh	r3, [r7, #24]
 8002b4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b4e:	833b      	strh	r3, [r7, #24]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	8b3b      	ldrh	r3, [r7, #24]
 8002b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01f      	beq.n	8002bbe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b98:	82fb      	strh	r3, [r7, #22]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	441a      	add	r2, r3
 8002ba8:	8afb      	ldrh	r3, [r7, #22]
 8002baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bbe:	8b7b      	ldrh	r3, [r7, #26]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8087 	beq.w	8002cd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6959      	ldr	r1, [r3, #20]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	891a      	ldrh	r2, [r3, #8]
 8002bd2:	8b7b      	ldrh	r3, [r7, #26]
 8002bd4:	f004 fa3e 	bl	8007054 <USB_ReadPMA>
 8002bd8:	e07c      	b.n	8002cd4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3306      	adds	r3, #6
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	8b7b      	ldrh	r3, [r7, #26]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d306      	bcc.n	8002c1c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	8b7b      	ldrh	r3, [r7, #26]
 8002c14:	1ad2      	subs	r2, r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	619a      	str	r2, [r3, #24]
 8002c1a:	e002      	b.n	8002c22 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d123      	bne.n	8002c72 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c44:	83fb      	strh	r3, [r7, #30]
 8002c46:	8bfb      	ldrh	r3, [r7, #30]
 8002c48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c4c:	83fb      	strh	r3, [r7, #30]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	441a      	add	r2, r3
 8002c5c:	8bfb      	ldrh	r3, [r7, #30]
 8002c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11f      	bne.n	8002cbc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	83bb      	strh	r3, [r7, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	441a      	add	r2, r3
 8002ca6:	8bbb      	ldrh	r3, [r7, #28]
 8002ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6959      	ldr	r1, [r3, #20]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	895a      	ldrh	r2, [r3, #10]
 8002cce:	8b7b      	ldrh	r3, [r7, #26]
 8002cd0:	f004 f9c0 	bl	8007054 <USB_ReadPMA>
    }
  }

  return count;
 8002cd4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b0a4      	sub	sp, #144	; 0x90
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 81dd 	beq.w	80030b2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d20:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d907      	bls.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d38:	1ad2      	subs	r2, r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	619a      	str	r2, [r3, #24]
 8002d3e:	e002      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80b9 	bne.w	8002ec2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d126      	bne.n	8002da6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	011a      	lsls	r2, r3, #4
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	4413      	add	r3, r2
 8002d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	e01a      	b.n	8002ddc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	785b      	ldrb	r3, [r3, #1]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d116      	bne.n	8002ddc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	4413      	add	r3, r2
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	011a      	lsls	r2, r3, #4
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dce:	4413      	add	r3, r2
 8002dd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	2200      	movs	r2, #0
 8002dda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d126      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	011a      	lsls	r2, r3, #4
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	e017      	b.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d113      	bne.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	4413      	add	r3, r2
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	011a      	lsls	r2, r3, #4
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2200      	movs	r2, #0
 8002e66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f009 fe4b 	bl	800cb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 82fc 	beq.w	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	82fb      	strh	r3, [r7, #22]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	8afb      	ldrh	r3, [r7, #22]
 8002eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]
 8002ec0:	e2da      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d021      	beq.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	f040 82ae 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f24:	441a      	add	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f32:	441a      	add	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d30b      	bcc.n	8002f5c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f54:	1ad2      	subs	r2, r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	621a      	str	r2, [r3, #32]
 8002f5a:	e017      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002f64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f74:	e00a      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d165      	bne.n	8003060 <HAL_PCD_EP_DB_Transmit+0x382>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	4413      	add	r3, r2
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	011a      	lsls	r2, r3, #4
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	801a      	strh	r2, [r3, #0]
 8002fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd2:	d91d      	bls.n	8003010 <HAL_PCD_EP_DB_Transmit+0x332>
 8002fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_EP_DB_Transmit+0x310>
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	3b01      	subs	r3, #1
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	029b      	lsls	r3, r3, #10
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003008:	b29a      	uxth	r2, r3
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	e044      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <HAL_PCD_EP_DB_Transmit+0x350>
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003026:	b29a      	uxth	r2, r3
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	e035      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	64bb      	str	r3, [r7, #72]	; 0x48
 8003036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003044:	3301      	adds	r3, #1
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003050:	b29b      	uxth	r3, r3
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	b29b      	uxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b29a      	uxth	r2, r3
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e01c      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d118      	bne.n	800309a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307c:	4413      	add	r3, r2
 800307e:	647b      	str	r3, [r7, #68]	; 0x44
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	011a      	lsls	r2, r3, #4
 8003086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003088:	4413      	add	r3, r2
 800308a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
 8003090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003094:	b29a      	uxth	r2, r3
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6959      	ldr	r1, [r3, #20]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	891a      	ldrh	r2, [r3, #8]
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f003 ff8d 	bl	8006fca <USB_WritePMA>
 80030b0:	e1e2      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	3306      	adds	r3, #6
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d307      	bcc.n	80030fa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f2:	1ad2      	subs	r2, r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	619a      	str	r2, [r3, #24]
 80030f8:	e002      	b.n	8003100 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 80c0 	bne.w	800328a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d126      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x482>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003126:	4413      	add	r3, r2
 8003128:	67fb      	str	r3, [r7, #124]	; 0x7c
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	011a      	lsls	r2, r3, #4
 8003130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003132:	4413      	add	r3, r2
 8003134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003138:	67bb      	str	r3, [r7, #120]	; 0x78
 800313a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003144:	b29a      	uxth	r2, r3
 8003146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003158:	b29a      	uxth	r2, r3
 800315a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e01a      	b.n	8003196 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d116      	bne.n	8003196 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	667b      	str	r3, [r7, #100]	; 0x64
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317c:	4413      	add	r3, r2
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	011a      	lsls	r2, r3, #4
 8003186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003188:	4413      	add	r3, r2
 800318a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800318e:	663b      	str	r3, [r7, #96]	; 0x60
 8003190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003192:	2200      	movs	r2, #0
 8003194:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	677b      	str	r3, [r7, #116]	; 0x74
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d12b      	bne.n	80031fc <HAL_PCD_EP_DB_Transmit+0x51e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	4413      	add	r3, r2
 80031ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	011a      	lsls	r2, r3, #4
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	4413      	add	r3, r2
 80031c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031da:	b29a      	uxth	r2, r3
 80031dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	e017      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x54e>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d113      	bne.n	800322c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003212:	4413      	add	r3, r2
 8003214:	677b      	str	r3, [r7, #116]	; 0x74
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	011a      	lsls	r2, r3, #4
 800321c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321e:	4413      	add	r3, r2
 8003220:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003224:	673b      	str	r3, [r7, #112]	; 0x70
 8003226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003228:	2200      	movs	r2, #0
 800322a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f009 fc69 	bl	800cb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 811a 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	441a      	add	r2, r3
 8003270:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003284:	b29b      	uxth	r3, r3
 8003286:	8013      	strh	r3, [r2, #0]
 8003288:	e0f6      	b.n	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d121      	bne.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f040 80ca 	bne.w	8003478 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ec:	441a      	add	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032fa:	441a      	add	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6a1a      	ldr	r2, [r3, #32]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	429a      	cmp	r2, r3
 800330a:	d30b      	bcc.n	8003324 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331c:	1ad2      	subs	r2, r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	621a      	str	r2, [r3, #32]
 8003322:	e017      	b.n	8003354 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d108      	bne.n	800333e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800332c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003330:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800333c:	e00a      	b.n	8003354 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	657b      	str	r3, [r7, #84]	; 0x54
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d165      	bne.n	800342e <HAL_PCD_EP_DB_Transmit+0x750>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003370:	b29b      	uxth	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003376:	4413      	add	r3, r2
 8003378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	011a      	lsls	r2, r3, #4
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	4413      	add	r3, r2
 8003384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003388:	65bb      	str	r3, [r7, #88]	; 0x58
 800338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003394:	b29a      	uxth	r2, r3
 8003396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339e:	2b3e      	cmp	r3, #62	; 0x3e
 80033a0:	d91d      	bls.n	80033de <HAL_PCD_EP_DB_Transmit+0x700>
 80033a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x6de>
 80033b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b8:	3b01      	subs	r3, #1
 80033ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80033bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	4313      	orrs	r3, r2
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	e041      	b.n	8003462 <HAL_PCD_EP_DB_Transmit+0x784>
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x71e>
 80033e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e032      	b.n	8003462 <HAL_PCD_EP_DB_Transmit+0x784>
 80033fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	66bb      	str	r3, [r7, #104]	; 0x68
 8003404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_PCD_EP_DB_Transmit+0x738>
 8003410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003412:	3301      	adds	r3, #1
 8003414:	66bb      	str	r3, [r7, #104]	; 0x68
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29a      	uxth	r2, r3
 800341c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800341e:	b29b      	uxth	r3, r3
 8003420:	029b      	lsls	r3, r3, #10
 8003422:	b29b      	uxth	r3, r3
 8003424:	4313      	orrs	r3, r2
 8003426:	b29a      	uxth	r2, r3
 8003428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	e019      	b.n	8003462 <HAL_PCD_EP_DB_Transmit+0x784>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d115      	bne.n	8003462 <HAL_PCD_EP_DB_Transmit+0x784>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003444:	4413      	add	r3, r2
 8003446:	657b      	str	r3, [r7, #84]	; 0x54
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	011a      	lsls	r2, r3, #4
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	4413      	add	r3, r2
 8003452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
 8003458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345c:	b29a      	uxth	r2, r3
 800345e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003460:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6959      	ldr	r1, [r3, #20]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	895a      	ldrh	r2, [r3, #10]
 800346e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003472:	b29b      	uxth	r3, r3
 8003474:	f003 fda9 	bl	8006fca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003492:	82bb      	strh	r3, [r7, #20]
 8003494:	8abb      	ldrh	r3, [r7, #20]
 8003496:	f083 0310 	eor.w	r3, r3, #16
 800349a:	82bb      	strh	r3, [r7, #20]
 800349c:	8abb      	ldrh	r3, [r7, #20]
 800349e:	f083 0320 	eor.w	r3, r3, #32
 80034a2:	82bb      	strh	r3, [r7, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	8abb      	ldrh	r3, [r7, #20]
 80034b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3790      	adds	r7, #144	; 0x90
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e009      	b.n	800351c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003508:	897a      	ldrh	r2, [r7, #10]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d107      	bne.n	8003532 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b29a      	uxth	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	80da      	strh	r2, [r3, #6]
 8003530:	e00b      	b.n	800354a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2201      	movs	r2, #1
 8003536:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	b29a      	uxth	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
	...

08003558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e272      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003578:	4b92      	ldr	r3, [pc, #584]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b04      	cmp	r3, #4
 8003582:	d00c      	beq.n	800359e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003584:	4b8f      	ldr	r3, [pc, #572]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d112      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5e>
 8003590:	4b8c      	ldr	r3, [pc, #560]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	4b89      	ldr	r3, [pc, #548]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d06c      	beq.n	8003684 <HAL_RCC_OscConfig+0x12c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d168      	bne.n	8003684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e24c      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x76>
 80035c0:	4b80      	ldr	r3, [pc, #512]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e02e      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x98>
 80035d6:	4b7b      	ldr	r3, [pc, #492]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7a      	ldr	r2, [pc, #488]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b78      	ldr	r3, [pc, #480]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a77      	ldr	r2, [pc, #476]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0xbc>
 80035fa:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a71      	ldr	r2, [pc, #452]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6f      	ldr	r3, [pc, #444]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6e      	ldr	r2, [pc, #440]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 8003614:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6a      	ldr	r2, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a67      	ldr	r2, [pc, #412]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fbaa 	bl	8000d8c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fba6 	bl	8000d8c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e200      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5d      	ldr	r3, [pc, #372]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xe4>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd fb96 	bl	8000d8c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fd fb92 	bl	8000d8c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1ec      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x10c>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003692:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800369e:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x18c>
 80036aa:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c0      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4939      	ldr	r1, [pc, #228]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fb4b 	bl	8000d8c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fd fb47 	bl	8000d8c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a1      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4927      	ldr	r1, [pc, #156]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fb2a 	bl	8000d8c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fd fb26 	bl	8000d8c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e180      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03a      	beq.n	80037dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_RCC_OscConfig+0x274>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fd fb0a 	bl	8000d8c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd fb06 	bl	8000d8c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e160      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800379a:	2001      	movs	r0, #1
 800379c:	f000 fa9c 	bl	8003cd8 <RCC_Delay>
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_RCC_OscConfig+0x274>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a8:	f7fd faf0 	bl	8000d8c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ae:	e00f      	b.n	80037d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fd faec 	bl	8000d8c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d908      	bls.n	80037d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e146      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	42420000 	.word	0x42420000
 80037cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e9      	bne.n	80037b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a6 	beq.w	8003936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b8b      	ldr	r3, [pc, #556]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a87      	ldr	r2, [pc, #540]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	61d3      	str	r3, [r2, #28]
 8003806:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b7f      	ldr	r3, [pc, #508]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7e      	ldr	r2, [pc, #504]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fd faad 	bl	8000d8c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fd faa9 	bl	8000d8c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e103      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x312>
 800385c:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	e02d      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x334>
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a69      	ldr	r2, [pc, #420]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	e01c      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x356>
 8003894:	4b61      	ldr	r3, [pc, #388]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a60      	ldr	r2, [pc, #384]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	e00b      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 80038ae:	4b5b      	ldr	r3, [pc, #364]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a5a      	ldr	r2, [pc, #360]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	4b58      	ldr	r3, [pc, #352]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d015      	beq.n	80038fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fd fa5d 	bl	8000d8c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fd fa59 	bl	8000d8c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0b1      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	4b4b      	ldr	r3, [pc, #300]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ee      	beq.n	80038d6 <HAL_RCC_OscConfig+0x37e>
 80038f8:	e014      	b.n	8003924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fd fa47 	bl	8000d8c <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fd fa43 	bl	8000d8c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e09b      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ee      	bne.n	8003902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003940:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d061      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d146      	bne.n	80039e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fd fa17 	bl	8000d8c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7fd fa13 	bl	8000d8c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e06d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d108      	bne.n	800399c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4921      	ldr	r1, [pc, #132]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a19      	ldr	r1, [r3, #32]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	430b      	orrs	r3, r1
 80039ae:	491b      	ldr	r1, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7fd f9e7 	bl	8000d8c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fd f9e3 	bl	8000d8c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x46a>
 80039e0:	e035      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd f9d0 	bl	8000d8c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd f9cc 	bl	8000d8c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e026      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x498>
 8003a0e:	e01e      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e019      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_OscConfig+0x500>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0d0      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d910      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	4965      	ldr	r1, [pc, #404]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b63      	ldr	r3, [pc, #396]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b8      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b50      	ldr	r3, [pc, #320]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	494d      	ldr	r1, [pc, #308]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d040      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d115      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e073      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06b      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3a:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4936      	ldr	r1, [pc, #216]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4c:	f7fd f91e 	bl	8000d8c <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b54:	f7fd f91a 	bl	8000d8c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e053      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 020c 	and.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1eb      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d210      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 0207 	bic.w	r2, r3, #7
 8003b92:	4922      	ldr	r1, [pc, #136]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e032      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4916      	ldr	r1, [pc, #88]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	490e      	ldr	r1, [pc, #56]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bea:	f000 f821 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	490a      	ldr	r1, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	5ccb      	ldrb	r3, [r1, r3]
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1cc>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_ClockConfig+0x1d0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f87c 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0800d0fc 	.word	0x0800d0fc
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000004 	.word	0x20000004

08003c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x30>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x36>
 8003c5e:	e027      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c62:	613b      	str	r3, [r7, #16]
      break;
 8003c64:	e027      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c70:	5cd3      	ldrb	r3, [r2, r3]
 8003c72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d010      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c5b      	lsrs	r3, r3, #17
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c92:	fb03 f202 	mul.w	r2, r3, r2
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e004      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	613b      	str	r3, [r7, #16]
      break;
 8003cae:	e002      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb2:	613b      	str	r3, [r7, #16]
      break;
 8003cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb6:	693b      	ldr	r3, [r7, #16]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	0800d10c 	.word	0x0800d10c
 8003cd0:	0800d11c 	.word	0x0800d11c
 8003cd4:	003d0900 	.word	0x003d0900

08003cd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <RCC_Delay+0x34>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <RCC_Delay+0x38>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a5b      	lsrs	r3, r3, #9
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf4:	bf00      	nop
  }
  while (Delay --);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	60fa      	str	r2, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f9      	bne.n	8003cf4 <RCC_Delay+0x1c>
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d07d      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10d      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b4c      	ldr	r3, [pc, #304]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4a4b      	ldr	r2, [pc, #300]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	61d3      	str	r3, [r2, #28]
 8003d4c:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d118      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d68:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d74:	f7fd f80a 	bl	8000d8c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	e008      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7c:	f7fd f806 	bl	8000d8c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e06d      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d9a:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d02e      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d027      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db8:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dce:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d014      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fc ffd5 	bl	8000d8c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fc ffd1 	bl	8000d8c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e036      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ee      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4917      	ldr	r1, [pc, #92]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	490b      	ldr	r1, [pc, #44]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4904      	ldr	r1, [pc, #16]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	42420440 	.word	0x42420440

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e076      	b.n	8003f80 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc fc62 	bl	800079c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1a      	lsrs	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f002 0204 	and.w	r2, r2, #4
 8003f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_SPI_Transmit+0x22>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e12d      	b.n	8004206 <HAL_SPI_Transmit+0x27e>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb2:	f7fc feeb 	bl	8000d8c <HAL_GetTick>
 8003fb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fcc:	e116      	b.n	80041fc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_SPI_Transmit+0x52>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fde:	e10d      	b.n	80041fc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d10f      	bne.n	8004048 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004046:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d007      	beq.n	8004066 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406e:	d14f      	bne.n	8004110 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Transmit+0xf6>
 8004078:	8afb      	ldrh	r3, [r7, #22]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d142      	bne.n	8004104 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040a2:	e02f      	b.n	8004104 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d112      	bne.n	80040d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80040d6:	e015      	b.n	8004104 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d8:	f7fc fe58 	bl	8000d8c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d803      	bhi.n	80040f0 <HAL_SPI_Transmit+0x168>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d102      	bne.n	80040f6 <HAL_SPI_Transmit+0x16e>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004102:	e07b      	b.n	80041fc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ca      	bne.n	80040a4 <HAL_SPI_Transmit+0x11c>
 800410e:	e050      	b.n	80041b2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_SPI_Transmit+0x196>
 8004118:	8afb      	ldrh	r3, [r7, #22]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d144      	bne.n	80041a8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004144:	e030      	b.n	80041a8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d113      	bne.n	800417c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	86da      	strh	r2, [r3, #54]	; 0x36
 800417a:	e015      	b.n	80041a8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417c:	f7fc fe06 	bl	8000d8c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d803      	bhi.n	8004194 <HAL_SPI_Transmit+0x20c>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d102      	bne.n	800419a <HAL_SPI_Transmit+0x212>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80041a6:	e029      	b.n	80041fc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1c9      	bne.n	8004146 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	6839      	ldr	r1, [r7, #0]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fbcc 	bl	8004954 <SPI_EndRxTxTransaction>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e003      	b.n	80041fc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004204:	7ffb      	ldrb	r3, [r7, #31]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b088      	sub	sp, #32
 8004212:	af02      	add	r7, sp, #8
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800422e:	2302      	movs	r3, #2
 8004230:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004232:	e0fb      	b.n	800442c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800423c:	d112      	bne.n	8004264 <HAL_SPI_Receive+0x56>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10e      	bne.n	8004264 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2204      	movs	r2, #4
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f8ef 	bl	800443e <HAL_SPI_TransmitReceive>
 8004260:	4603      	mov	r3, r0
 8004262:	e0e8      	b.n	8004436 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_SPI_Receive+0x64>
 800426e:	2302      	movs	r3, #2
 8004270:	e0e1      	b.n	8004436 <HAL_SPI_Receive+0x228>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800427a:	f7fc fd87 	bl	8000d8c <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Receive+0x7e>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004290:	e0cc      	b.n	800442c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2204      	movs	r2, #4
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d8:	d10f      	bne.n	80042fa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d007      	beq.n	8004318 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d16a      	bne.n	80043f6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004320:	e032      	b.n	8004388 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d115      	bne.n	800435c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f103 020c 	add.w	r2, r3, #12
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	87da      	strh	r2, [r3, #62]	; 0x3e
 800435a:	e015      	b.n	8004388 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800435c:	f7fc fd16 	bl	8000d8c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d803      	bhi.n	8004374 <HAL_SPI_Receive+0x166>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d102      	bne.n	800437a <HAL_SPI_Receive+0x16c>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004386:	e051      	b.n	800442c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1c7      	bne.n	8004322 <HAL_SPI_Receive+0x114>
 8004392:	e035      	b.n	8004400 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d113      	bne.n	80043ca <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	b292      	uxth	r2, r2
 80043ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	1c9a      	adds	r2, r3, #2
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c8:	e015      	b.n	80043f6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ca:	f7fc fcdf 	bl	8000d8c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d803      	bhi.n	80043e2 <HAL_SPI_Receive+0x1d4>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d102      	bne.n	80043e8 <HAL_SPI_Receive+0x1da>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043f4:	e01a      	b.n	800442c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1c9      	bne.n	8004394 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	6839      	ldr	r1, [r7, #0]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 fa53 	bl	80048b0 <SPI_EndRxTransaction>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
 8004422:	e003      	b.n	800442c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b08c      	sub	sp, #48	; 0x30
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800444c:	2301      	movs	r3, #1
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x26>
 8004460:	2302      	movs	r3, #2
 8004462:	e198      	b.n	8004796 <HAL_SPI_TransmitReceive+0x358>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446c:	f7fc fc8e 	bl	8000d8c <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004482:	887b      	ldrh	r3, [r7, #2]
 8004484:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800448a:	2b01      	cmp	r3, #1
 800448c:	d00f      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x70>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004494:	d107      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x68>
 800449e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d003      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044ac:	e16d      	b.n	800478a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x82>
 80044ba:	887b      	ldrh	r3, [r7, #2]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044c6:	e160      	b.n	800478a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d003      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2205      	movs	r2, #5
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	887a      	ldrh	r2, [r7, #2]
 80044f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d007      	beq.n	8004530 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004538:	d17c      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x10a>
 8004542:	8b7b      	ldrh	r3, [r7, #26]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d16a      	bne.n	800461e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	1c9a      	adds	r2, r3, #2
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456c:	e057      	b.n	800461e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d11b      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x176>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x176>
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d113      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d119      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x1b8>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d014      	beq.n	80045f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	b292      	uxth	r2, r2
 80045d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045f2:	2301      	movs	r3, #1
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045f6:	f7fc fbc9 	bl	8000d8c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004602:	429a      	cmp	r2, r3
 8004604:	d80b      	bhi.n	800461e <HAL_SPI_TransmitReceive+0x1e0>
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d007      	beq.n	800461e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800461c:	e0b5      	b.n	800478a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1a2      	bne.n	800456e <HAL_SPI_TransmitReceive+0x130>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d19d      	bne.n	800456e <HAL_SPI_TransmitReceive+0x130>
 8004632:	e080      	b.n	8004736 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x204>
 800463c:	8b7b      	ldrh	r3, [r7, #26]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d16f      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004668:	e05b      	b.n	8004722 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d11c      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x274>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d017      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x274>
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d114      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d119      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2b6>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d014      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046f0:	2301      	movs	r3, #1
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046f4:	f7fc fb4a 	bl	8000d8c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004700:	429a      	cmp	r2, r3
 8004702:	d803      	bhi.n	800470c <HAL_SPI_TransmitReceive+0x2ce>
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d102      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x2d4>
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004720:	e033      	b.n	800478a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d19e      	bne.n	800466a <HAL_SPI_TransmitReceive+0x22c>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d199      	bne.n	800466a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f90a 	bl	8004954 <SPI_EndRxTxTransaction>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004752:	e01a      	b.n	800478a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004780:	e003      	b.n	800478a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004796:	4618      	mov	r0, r3
 8004798:	3730      	adds	r7, #48	; 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047b0:	f7fc faec 	bl	8000d8c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047c0:	f7fc fae4 	bl	8000d8c <HAL_GetTick>
 80047c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	015b      	lsls	r3, r3, #5
 80047cc:	0d1b      	lsrs	r3, r3, #20
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	e054      	b.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d050      	beq.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e0:	f7fc fad4 	bl	8000d8c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d902      	bls.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d13d      	bne.n	8004872 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480e:	d111      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	d004      	beq.n	8004824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d107      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d10f      	bne.n	800485e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e017      	b.n	80048a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3b01      	subs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d19b      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000000 	.word	0x20000000

080048b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c4:	d111      	bne.n	80048ea <SPI_EndRxTransaction+0x3a>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d004      	beq.n	80048da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d107      	bne.n	80048ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f2:	d117      	bne.n	8004924 <SPI_EndRxTransaction+0x74>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d112      	bne.n	8004924 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	2101      	movs	r1, #1
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff ff49 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01a      	beq.n	800494a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e013      	b.n	800494c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	2180      	movs	r1, #128	; 0x80
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff ff36 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e000      	b.n	800494c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2200      	movs	r2, #0
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ff18 	bl	80047a0 <SPI_WaitFlagStateUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e000      	b.n	8004988 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004990:	b084      	sub	sp, #16
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	f107 0014 	add.w	r0, r7, #20
 800499e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	b004      	add	sp, #16
 80049ae:	4770      	bx	lr

080049b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4013      	ands	r3, r2
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a28:	b084      	sub	sp, #16
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	f107 0014 	add.w	r0, r7, #20
 8004a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	b004      	add	sp, #16
 8004a66:	4770      	bx	lr

08004a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
	...

08004a94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b09d      	sub	sp, #116	; 0x74
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d81f      	bhi.n	8004b06 <USB_ActivateEndpoint+0x72>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <USB_ActivateEndpoint+0x38>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004b0f 	.word	0x08004b0f
 8004ad8:	08004aeb 	.word	0x08004aeb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004adc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ae4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ae8:	e012      	b.n	8004b10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004aea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004aee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004af2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004af6:	e00b      	b.n	8004b10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004af8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b04:	e004      	b.n	8004b10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004b0c:	e000      	b.n	8004b10 <USB_ActivateEndpoint+0x7c>
      break;
 8004b0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	7b1b      	ldrb	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f040 8178 	bne.w	8004e72 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8084 	beq.w	8004c94 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	011a      	lsls	r2, r3, #4
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	88db      	ldrh	r3, [r3, #6]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	827b      	strh	r3, [r7, #18]
 8004bce:	8a7b      	ldrh	r3, [r7, #18]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01b      	beq.n	8004c10 <USB_ActivateEndpoint+0x17c>
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	823b      	strh	r3, [r7, #16]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	8a3b      	ldrh	r3, [r7, #16]
 8004bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	78db      	ldrb	r3, [r3, #3]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d020      	beq.n	8004c5a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2e:	81bb      	strh	r3, [r7, #12]
 8004c30:	89bb      	ldrh	r3, [r7, #12]
 8004c32:	f083 0320 	eor.w	r3, r3, #32
 8004c36:	81bb      	strh	r3, [r7, #12]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	89bb      	ldrh	r3, [r7, #12]
 8004c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8013      	strh	r3, [r2, #0]
 8004c58:	e2d5      	b.n	8005206 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c70:	81fb      	strh	r3, [r7, #14]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
 8004c92:	e2b8      	b.n	8005206 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	4413      	add	r3, r2
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	011a      	lsls	r2, r3, #4
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	88db      	ldrh	r3, [r3, #6]
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	4413      	add	r3, r2
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	011a      	lsls	r2, r3, #4
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b3e      	cmp	r3, #62	; 0x3e
 8004d02:	d91d      	bls.n	8004d40 <USB_ActivateEndpoint+0x2ac>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <USB_ActivateEndpoint+0x28a>
 8004d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	e026      	b.n	8004d8e <USB_ActivateEndpoint+0x2fa>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <USB_ActivateEndpoint+0x2ca>
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e017      	b.n	8004d8e <USB_ActivateEndpoint+0x2fa>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <USB_ActivateEndpoint+0x2e4>
 8004d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d74:	3301      	adds	r3, #1
 8004d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	029b      	lsls	r3, r3, #10
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	4313      	orrs	r3, r2
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01b      	beq.n	8004dde <USB_ActivateEndpoint+0x34a>
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	843b      	strh	r3, [r7, #32]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	8c3b      	ldrh	r3, [r7, #32]
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d124      	bne.n	8004e30 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	83bb      	strh	r3, [r7, #28]
 8004dfe:	8bbb      	ldrh	r3, [r7, #28]
 8004e00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e04:	83bb      	strh	r3, [r7, #28]
 8004e06:	8bbb      	ldrh	r3, [r7, #28]
 8004e08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e0c:	83bb      	strh	r3, [r7, #28]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8bbb      	ldrh	r3, [r7, #28]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]
 8004e2e:	e1ea      	b.n	8005206 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	83fb      	strh	r3, [r7, #30]
 8004e48:	8bfb      	ldrh	r3, [r7, #30]
 8004e4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e4e:	83fb      	strh	r3, [r7, #30]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	8bfb      	ldrh	r3, [r7, #30]
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
 8004e70:	e1c9      	b.n	8005206 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d11e      	bne.n	8004eb8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]
 8004eb6:	e01d      	b.n	8004ef4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f04:	4413      	add	r3, r2
 8004f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	011a      	lsls	r2, r3, #4
 8004f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	891b      	ldrh	r3, [r3, #8]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f38:	4413      	add	r3, r2
 8004f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	011a      	lsls	r2, r3, #4
 8004f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	895b      	ldrh	r3, [r3, #10]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 8093 	bne.w	800508c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01b      	beq.n	8004fba <USB_ActivateEndpoint+0x526>
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <USB_ActivateEndpoint+0x576>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	873b      	strh	r3, [r7, #56]	; 0x38
 8005022:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005024:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005028:	873b      	strh	r3, [r7, #56]	; 0x38
 800502a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800502c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005030:	873b      	strh	r3, [r7, #56]	; 0x38
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800503e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504e:	b29b      	uxth	r3, r3
 8005050:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	86fb      	strh	r3, [r7, #54]	; 0x36
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]
 800508a:	e0bc      	b.n	8005206 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800509c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01d      	beq.n	80050e4 <USB_ActivateEndpoint+0x650>
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80050d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01d      	beq.n	800513c <USB_ActivateEndpoint+0x6a8>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	78db      	ldrb	r3, [r3, #3]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d024      	beq.n	800518e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800515e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005162:	f083 0320 	eor.w	r3, r3, #32
 8005166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]
 800518c:	e01d      	b.n	80051ca <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005206:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800520a:	4618      	mov	r0, r3
 800520c:	3774      	adds	r7, #116	; 0x74
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005214:	b480      	push	{r7}
 8005216:	b08d      	sub	sp, #52	; 0x34
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	7b1b      	ldrb	r3, [r3, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 808e 	bne.w	8005344 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d044      	beq.n	80052ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	81bb      	strh	r3, [r7, #12]
 800523e:	89bb      	ldrh	r3, [r7, #12]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01b      	beq.n	8005280 <USB_DeactivateEndpoint+0x6c>
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	817b      	strh	r3, [r7, #10]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	441a      	add	r2, r3
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800527c:	b29b      	uxth	r3, r3
 800527e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005296:	813b      	strh	r3, [r7, #8]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
 80052b8:	e192      	b.n	80055e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	827b      	strh	r3, [r7, #18]
 80052c8:	8a7b      	ldrh	r3, [r7, #18]
 80052ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01b      	beq.n	800530a <USB_DeactivateEndpoint+0xf6>
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	823b      	strh	r3, [r7, #16]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	8a3b      	ldrh	r3, [r7, #16]
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	81fb      	strh	r3, [r7, #14]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	441a      	add	r2, r3
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533e:	b29b      	uxth	r3, r3
 8005340:	8013      	strh	r3, [r2, #0]
 8005342:	e14d      	b.n	80055e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 80a5 	bne.w	8005498 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	843b      	strh	r3, [r7, #32]
 800535c:	8c3b      	ldrh	r3, [r7, #32]
 800535e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01b      	beq.n	800539e <USB_DeactivateEndpoint+0x18a>
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	83fb      	strh	r3, [r7, #30]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	8bfb      	ldrh	r3, [r7, #30]
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	83bb      	strh	r3, [r7, #28]
 80053ac:	8bbb      	ldrh	r3, [r7, #28]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01b      	beq.n	80053ee <USB_DeactivateEndpoint+0x1da>
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	837b      	strh	r3, [r7, #26]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	8b7b      	ldrh	r3, [r7, #26]
 80053da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	833b      	strh	r3, [r7, #24]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	8b3b      	ldrh	r3, [r7, #24]
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	82fb      	strh	r3, [r7, #22]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	8afb      	ldrh	r3, [r7, #22]
 800544a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005474:	82bb      	strh	r3, [r7, #20]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	8abb      	ldrh	r3, [r7, #20]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
 8005496:	e0a3      	b.n	80055e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01b      	beq.n	80054e8 <USB_DeactivateEndpoint+0x2d4>
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <USB_DeactivateEndpoint+0x324>
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	853b      	strh	r3, [r7, #40]	; 0x28
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005534:	b29b      	uxth	r3, r3
 8005536:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800555c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005586:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	847b      	strh	r3, [r7, #34]	; 0x22
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3734      	adds	r7, #52	; 0x34
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b0c2      	sub	sp, #264	; 0x108
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055fa:	6018      	str	r0, [r3, #0]
 80055fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005604:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	2b01      	cmp	r3, #1
 8005614:	f040 86b7 	bne.w	8006386 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	429a      	cmp	r2, r3
 8005632:	d908      	bls.n	8005646 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005644:	e007      	b.n	8005656 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	7b1b      	ldrb	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d13a      	bne.n	80056dc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6959      	ldr	r1, [r3, #20]
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	88da      	ldrh	r2, [r3, #6]
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	b29b      	uxth	r3, r3
 8005684:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005688:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800568c:	6800      	ldr	r0, [r0, #0]
 800568e:	f001 fc9c 	bl	8006fca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	011a      	lsls	r2, r3, #4
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	f000 be1f 	b.w	800631a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	78db      	ldrb	r3, [r3, #3]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f040 8462 	bne.w	8005fb2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	f240 83df 	bls.w	8005eca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800570c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005764:	b29b      	uxth	r3, r3
 8005766:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	1ad2      	subs	r2, r2, r3
 800577a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 81c7 	beq.w	8005b3c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d177      	bne.n	80058ba <USB_EPStartXfer+0x2ce>
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	4413      	add	r3, r2
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	011a      	lsls	r2, r3, #4
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	4413      	add	r3, r2
 8005800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005810:	b29a      	uxth	r2, r3
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	2b3e      	cmp	r3, #62	; 0x3e
 800581c:	d921      	bls.n	8005862 <USB_EPStartXfer+0x276>
 800581e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <USB_EPStartXfer+0x252>
 8005834:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005838:	3b01      	subs	r3, #1
 800583a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29a      	uxth	r2, r3
 8005844:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005848:	b29b      	uxth	r3, r3
 800584a:	029b      	lsls	r3, r3, #10
 800584c:	b29b      	uxth	r3, r3
 800584e:	4313      	orrs	r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e050      	b.n	8005904 <USB_EPStartXfer+0x318>
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <USB_EPStartXfer+0x294>
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005878:	b29a      	uxth	r2, r3
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e041      	b.n	8005904 <USB_EPStartXfer+0x318>
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <USB_EPStartXfer+0x2b4>
 8005896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800589a:	3301      	adds	r3, #1
 800589c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e024      	b.n	8005904 <USB_EPStartXfer+0x318>
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11c      	bne.n	8005904 <USB_EPStartXfer+0x318>
 80058ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	4413      	add	r3, r2
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
 80058e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	011a      	lsls	r2, r3, #4
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	4413      	add	r3, r2
 80058f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	895b      	ldrh	r3, [r3, #10]
 8005910:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6959      	ldr	r1, [r3, #20]
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005924:	b29b      	uxth	r3, r3
 8005926:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800592a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800592e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005932:	6800      	ldr	r0, [r0, #0]
 8005934:	f001 fb49 	bl	8006fca <USB_WritePMA>
            ep->xfer_buff += len;
 8005938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005948:	441a      	add	r2, r3
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	429a      	cmp	r2, r3
 8005970:	d90f      	bls.n	8005992 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005982:	1ad2      	subs	r2, r2, r3
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	621a      	str	r2, [r3, #32]
 8005990:	e00e      	b.n	80059b0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80059a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2200      	movs	r2, #0
 80059ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d177      	bne.n	8005ab0 <USB_EPStartXfer+0x4c4>
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	4413      	add	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	011a      	lsls	r2, r3, #4
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4413      	add	r3, r2
 80059f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a10:	2b3e      	cmp	r3, #62	; 0x3e
 8005a12:	d921      	bls.n	8005a58 <USB_EPStartXfer+0x46c>
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <USB_EPStartXfer+0x448>
 8005a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	029b      	lsls	r3, r3, #10
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4313      	orrs	r3, r2
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	e056      	b.n	8005b06 <USB_EPStartXfer+0x51a>
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <USB_EPStartXfer+0x48a>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e047      	b.n	8005b06 <USB_EPStartXfer+0x51a>
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <USB_EPStartXfer+0x4aa>
 8005a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a90:	3301      	adds	r3, #1
 8005a92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e02a      	b.n	8005b06 <USB_EPStartXfer+0x51a>
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d122      	bne.n	8005b06 <USB_EPStartXfer+0x51a>
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	011a      	lsls	r2, r3, #4
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	891b      	ldrh	r3, [r3, #8]
 8005b12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6959      	ldr	r1, [r3, #20]
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b34:	6800      	ldr	r0, [r0, #0]
 8005b36:	f001 fa48 	bl	8006fca <USB_WritePMA>
 8005b3a:	e3ee      	b.n	800631a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d177      	bne.n	8005c3c <USB_EPStartXfer+0x650>
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6c:	4413      	add	r3, r2
 8005b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	011a      	lsls	r2, r3, #4
 8005b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9e:	d921      	bls.n	8005be4 <USB_EPStartXfer+0x5f8>
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <USB_EPStartXfer+0x5d4>
 8005bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e056      	b.n	8005c92 <USB_EPStartXfer+0x6a6>
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <USB_EPStartXfer+0x616>
 8005bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e047      	b.n	8005c92 <USB_EPStartXfer+0x6a6>
 8005c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USB_EPStartXfer+0x636>
 8005c18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	029b      	lsls	r3, r3, #10
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	e02a      	b.n	8005c92 <USB_EPStartXfer+0x6a6>
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d122      	bne.n	8005c92 <USB_EPStartXfer+0x6a6>
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	653b      	str	r3, [r7, #80]	; 0x50
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	4413      	add	r3, r2
 8005c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	011a      	lsls	r2, r3, #4
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	891b      	ldrh	r3, [r3, #8]
 8005c9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6959      	ldr	r1, [r3, #20]
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cc0:	6800      	ldr	r0, [r0, #0]
 8005cc2:	f001 f982 	bl	8006fca <USB_WritePMA>
            ep->xfer_buff += len;
 8005cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd6:	441a      	add	r2, r3
 8005cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d90f      	bls.n	8005d20 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	621a      	str	r2, [r3, #32]
 8005d1e:	e00e      	b.n	8005d3e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	643b      	str	r3, [r7, #64]	; 0x40
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d177      	bne.n	8005e4a <USB_EPStartXfer+0x85e>
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	4413      	add	r3, r2
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	011a      	lsls	r2, r3, #4
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005daa:	2b3e      	cmp	r3, #62	; 0x3e
 8005dac:	d921      	bls.n	8005df2 <USB_EPStartXfer+0x806>
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <USB_EPStartXfer+0x7e2>
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	029b      	lsls	r3, r3, #10
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e050      	b.n	8005e94 <USB_EPStartXfer+0x8a8>
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <USB_EPStartXfer+0x824>
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e041      	b.n	8005e94 <USB_EPStartXfer+0x8a8>
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d004      	beq.n	8005e30 <USB_EPStartXfer+0x844>
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e024      	b.n	8005e94 <USB_EPStartXfer+0x8a8>
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d11c      	bne.n	8005e94 <USB_EPStartXfer+0x8a8>
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6e:	4413      	add	r3, r2
 8005e70:	643b      	str	r3, [r7, #64]	; 0x40
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	011a      	lsls	r2, r3, #4
 8005e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e82:	4413      	add	r3, r2
 8005e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	895b      	ldrh	r3, [r3, #10]
 8005ea0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6959      	ldr	r1, [r3, #20]
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005eba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ebe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	f001 f881 	bl	8006fca <USB_WritePMA>
 8005ec8:	e227      	b.n	800631a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f56:	4413      	add	r3, r2
 8005f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	011a      	lsls	r2, r3, #4
 8005f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f70:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	891b      	ldrh	r3, [r3, #8]
 8005f88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6959      	ldr	r1, [r3, #20]
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fa2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fa6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	f001 f80d 	bl	8006fca <USB_WritePMA>
 8005fb0:	e1b3      	b.n	800631a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80c6 	beq.w	8006184 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	673b      	str	r3, [r7, #112]	; 0x70
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d177      	bne.n	8006104 <USB_EPStartXfer+0xb18>
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006034:	4413      	add	r3, r2
 8006036:	66bb      	str	r3, [r7, #104]	; 0x68
 8006038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006048:	4413      	add	r3, r2
 800604a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800604e:	667b      	str	r3, [r7, #100]	; 0x64
 8006050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605a:	b29a      	uxth	r2, r3
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	2b3e      	cmp	r3, #62	; 0x3e
 8006066:	d921      	bls.n	80060ac <USB_EPStartXfer+0xac0>
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <USB_EPStartXfer+0xa9c>
 800607e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006082:	3b01      	subs	r3, #1
 8006084:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29a      	uxth	r2, r3
 800608e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006092:	b29b      	uxth	r3, r3
 8006094:	029b      	lsls	r3, r3, #10
 8006096:	b29b      	uxth	r3, r3
 8006098:	4313      	orrs	r3, r2
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e050      	b.n	800614e <USB_EPStartXfer+0xb62>
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <USB_EPStartXfer+0xade>
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	e041      	b.n	800614e <USB_EPStartXfer+0xb62>
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USB_EPStartXfer+0xafe>
 80060e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e024      	b.n	800614e <USB_EPStartXfer+0xb62>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d11c      	bne.n	800614e <USB_EPStartXfer+0xb62>
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006128:	4413      	add	r3, r2
 800612a:	673b      	str	r3, [r7, #112]	; 0x70
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613c:	4413      	add	r3, r2
 800613e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	b29a      	uxth	r2, r3
 800614a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	895b      	ldrh	r3, [r3, #10]
 800615a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6959      	ldr	r1, [r3, #20]
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616e:	b29b      	uxth	r3, r3
 8006170:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006174:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006178:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	f000 ff24 	bl	8006fca <USB_WritePMA>
 8006182:	e0ca      	b.n	800631a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d177      	bne.n	8006284 <USB_EPStartXfer+0xc98>
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061b4:	4413      	add	r3, r2
 80061b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	011a      	lsls	r2, r3, #4
 80061c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80061d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	2b3e      	cmp	r3, #62	; 0x3e
 80061e6:	d921      	bls.n	800622c <USB_EPStartXfer+0xc40>
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <USB_EPStartXfer+0xc1c>
 80061fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006202:	3b01      	subs	r3, #1
 8006204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006212:	b29b      	uxth	r3, r3
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	b29b      	uxth	r3, r3
 8006218:	4313      	orrs	r3, r2
 800621a:	b29b      	uxth	r3, r3
 800621c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006224:	b29a      	uxth	r2, r3
 8006226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	e05c      	b.n	80062e6 <USB_EPStartXfer+0xcfa>
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <USB_EPStartXfer+0xc5e>
 8006234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e04d      	b.n	80062e6 <USB_EPStartXfer+0xcfa>
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <USB_EPStartXfer+0xc7e>
 8006260:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006264:	3301      	adds	r3, #1
 8006266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800626a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29a      	uxth	r2, r3
 8006270:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006274:	b29b      	uxth	r3, r3
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	b29b      	uxth	r3, r3
 800627a:	4313      	orrs	r3, r2
 800627c:	b29a      	uxth	r2, r3
 800627e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e030      	b.n	80062e6 <USB_EPStartXfer+0xcfa>
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d128      	bne.n	80062e6 <USB_EPStartXfer+0xcfa>
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b8:	4413      	add	r3, r2
 80062ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	011a      	lsls	r2, r3, #4
 80062cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	b29a      	uxth	r2, r3
 80062e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	891b      	ldrh	r3, [r3, #8]
 80062f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6959      	ldr	r1, [r3, #20]
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006306:	b29b      	uxth	r3, r3
 8006308:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800630c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006310:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006314:	6800      	ldr	r0, [r0, #0]
 8006316:	f000 fe58 	bl	8006fca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006340:	817b      	strh	r3, [r7, #10]
 8006342:	897b      	ldrh	r3, [r7, #10]
 8006344:	f083 0310 	eor.w	r3, r3, #16
 8006348:	817b      	strh	r3, [r7, #10]
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	f083 0320 	eor.w	r3, r3, #32
 8006350:	817b      	strh	r3, [r7, #10]
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	897b      	ldrh	r3, [r7, #10]
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]
 8006382:	f000 bcde 	b.w	8006d42 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	7b1b      	ldrb	r3, [r3, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 80bb 	bne.w	800650e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d917      	bls.n	80063e4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80063c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	619a      	str	r2, [r3, #24]
 80063e2:	e00e      	b.n	8006402 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006426:	4413      	add	r3, r2
 8006428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800643e:	4413      	add	r3, r2
 8006440:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	2b3e      	cmp	r3, #62	; 0x3e
 8006462:	d924      	bls.n	80064ae <USB_EPStartXfer+0xec2>
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <USB_EPStartXfer+0xe98>
 800647a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800647e:	3b01      	subs	r3, #1
 8006480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29a      	uxth	r2, r3
 800648c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006490:	b29b      	uxth	r3, r3
 8006492:	029b      	lsls	r3, r3, #10
 8006494:	b29b      	uxth	r3, r3
 8006496:	4313      	orrs	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	f000 bc10 	b.w	8006cce <USB_EPStartXfer+0x16e2>
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10c      	bne.n	80064d0 <USB_EPStartXfer+0xee4>
 80064b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	e3fe      	b.n	8006cce <USB_EPStartXfer+0x16e2>
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USB_EPStartXfer+0xf04>
 80064e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ea:	3301      	adds	r3, #1
 80064ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	b29b      	uxth	r3, r3
 8006502:	4313      	orrs	r3, r2
 8006504:	b29a      	uxth	r2, r3
 8006506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	e3df      	b.n	8006cce <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	78db      	ldrb	r3, [r3, #3]
 800651a:	2b02      	cmp	r3, #2
 800651c:	f040 8218 	bne.w	8006950 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 809d 	bne.w	800666c <USB_EPStartXfer+0x1080>
 8006532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006556:	4413      	add	r3, r2
 8006558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800656e:	4413      	add	r3, r2
 8006570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b3e      	cmp	r3, #62	; 0x3e
 800659a:	d92b      	bls.n	80065f4 <USB_EPStartXfer+0x1008>
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <USB_EPStartXfer+0xfe0>
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	3b01      	subs	r3, #1
 80065c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d8:	b29b      	uxth	r3, r3
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	b29b      	uxth	r3, r3
 80065de:	4313      	orrs	r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e070      	b.n	80066d6 <USB_EPStartXfer+0x10ea>
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10c      	bne.n	800661e <USB_EPStartXfer+0x1032>
 8006604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006614:	b29a      	uxth	r2, r3
 8006616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	e05b      	b.n	80066d6 <USB_EPStartXfer+0x10ea>
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <USB_EPStartXfer+0x1062>
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	3301      	adds	r3, #1
 800664a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800664e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665a:	b29b      	uxth	r3, r3
 800665c:	029b      	lsls	r3, r3, #10
 800665e:	b29b      	uxth	r3, r3
 8006660:	4313      	orrs	r3, r2
 8006662:	b29a      	uxth	r2, r3
 8006664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e034      	b.n	80066d6 <USB_EPStartXfer+0x10ea>
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d12c      	bne.n	80066d6 <USB_EPStartXfer+0x10ea>
 800667c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006698:	b29b      	uxth	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066a0:	4413      	add	r3, r2
 80066a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	011a      	lsls	r2, r3, #4
 80066b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 809d 	bne.w	8006830 <USB_EPStartXfer+0x1244>
 80066f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800671a:	4413      	add	r3, r2
 800671c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	011a      	lsls	r2, r3, #4
 800672e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006732:	4413      	add	r3, r2
 8006734:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800673c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006748:	b29a      	uxth	r2, r3
 800674a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b3e      	cmp	r3, #62	; 0x3e
 800675e:	d92b      	bls.n	80067b8 <USB_EPStartXfer+0x11cc>
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <USB_EPStartXfer+0x11a4>
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678a:	3b01      	subs	r3, #1
 800678c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e069      	b.n	800688c <USB_EPStartXfer+0x12a0>
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10c      	bne.n	80067e2 <USB_EPStartXfer+0x11f6>
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e054      	b.n	800688c <USB_EPStartXfer+0x12a0>
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d004      	beq.n	8006812 <USB_EPStartXfer+0x1226>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680c:	3301      	adds	r3, #1
 800680e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006812:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	b29b      	uxth	r3, r3
 8006820:	029b      	lsls	r3, r3, #10
 8006822:	b29b      	uxth	r3, r3
 8006824:	4313      	orrs	r3, r2
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e02d      	b.n	800688c <USB_EPStartXfer+0x12a0>
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d125      	bne.n	800688c <USB_EPStartXfer+0x12a0>
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006856:	4413      	add	r3, r2
 8006858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	011a      	lsls	r2, r3, #4
 800686a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800686e:	4413      	add	r3, r2
 8006870:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	b29a      	uxth	r2, r3
 8006886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800688a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8218 	beq.w	8006cce <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800689e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <USB_EPStartXfer+0x12ea>
 80068ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10d      	bne.n	80068f2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 81f5 	bne.w	8006cce <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 81ee 	bne.w	8006cce <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80068f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006918:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	e1be      	b.n	8006cce <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	2b01      	cmp	r3, #1
 800695e:	f040 81b4 	bne.w	8006cca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	429a      	cmp	r2, r3
 800697c:	d917      	bls.n	80069ae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800697e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800698e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	619a      	str	r2, [r3, #24]
 80069ac:	e00e      	b.n	80069cc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80069ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 8085 	bne.w	8006ae8 <USB_EPStartXfer+0x14fc>
 80069de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a02:	4413      	add	r3, r2
 8006a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a3e:	d923      	bls.n	8006a88 <USB_EPStartXfer+0x149c>
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <USB_EPStartXfer+0x1474>
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	029b      	lsls	r3, r3, #10
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e060      	b.n	8006b4a <USB_EPStartXfer+0x155e>
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10c      	bne.n	8006aaa <USB_EPStartXfer+0x14be>
 8006a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	e04f      	b.n	8006b4a <USB_EPStartXfer+0x155e>
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <USB_EPStartXfer+0x14de>
 8006ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	029b      	lsls	r3, r3, #10
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4313      	orrs	r3, r2
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	e030      	b.n	8006b4a <USB_EPStartXfer+0x155e>
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d128      	bne.n	8006b4a <USB_EPStartXfer+0x155e>
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	011a      	lsls	r2, r3, #4
 8006b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 8085 	bne.w	8006c74 <USB_EPStartXfer+0x1688>
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b8e:	4413      	add	r3, r2
 8006b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bca:	d923      	bls.n	8006c14 <USB_EPStartXfer+0x1628>
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <USB_EPStartXfer+0x1600>
 8006be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be6:	3b01      	subs	r3, #1
 8006be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	029b      	lsls	r3, r3, #10
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e05c      	b.n	8006cce <USB_EPStartXfer+0x16e2>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10c      	bne.n	8006c36 <USB_EPStartXfer+0x164a>
 8006c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	e04b      	b.n	8006cce <USB_EPStartXfer+0x16e2>
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3a:	085b      	lsrs	r3, r3, #1
 8006c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <USB_EPStartXfer+0x166a>
 8006c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c50:	3301      	adds	r3, #1
 8006c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	029b      	lsls	r3, r3, #10
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c70:	801a      	strh	r2, [r3, #0]
 8006c72:	e02c      	b.n	8006cce <USB_EPStartXfer+0x16e2>
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d124      	bne.n	8006cce <USB_EPStartXfer+0x16e2>
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	011a      	lsls	r2, r3, #4
 8006cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	e001      	b.n	8006cce <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e03a      	b.n	8006d44 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d020      	beq.n	8006da2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d76:	81bb      	strh	r3, [r7, #12]
 8006d78:	89bb      	ldrh	r3, [r7, #12]
 8006d7a:	f083 0310 	eor.w	r3, r3, #16
 8006d7e:	81bb      	strh	r3, [r7, #12]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	89bb      	ldrh	r3, [r7, #12]
 8006d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	8013      	strh	r3, [r2, #0]
 8006da0:	e01f      	b.n	8006de2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	81fb      	strh	r3, [r7, #14]
 8006dba:	89fb      	ldrh	r3, [r7, #14]
 8006dbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dc0:	81fb      	strh	r3, [r7, #14]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b087      	sub	sp, #28
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	7b1b      	ldrb	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 809d 	bne.w	8006f3c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d04c      	beq.n	8006ea4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	823b      	strh	r3, [r7, #16]
 8006e18:	8a3b      	ldrh	r3, [r7, #16]
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01b      	beq.n	8006e5a <USB_EPClearStall+0x6c>
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e38:	81fb      	strh	r3, [r7, #14]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	441a      	add	r2, r3
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	78db      	ldrb	r3, [r3, #3]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d06c      	beq.n	8006f3c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	81bb      	strh	r3, [r7, #12]
 8006e7a:	89bb      	ldrh	r3, [r7, #12]
 8006e7c:	f083 0320 	eor.w	r3, r3, #32
 8006e80:	81bb      	strh	r3, [r7, #12]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	89bb      	ldrh	r3, [r7, #12]
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]
 8006ea2:	e04b      	b.n	8006f3c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	82fb      	strh	r3, [r7, #22]
 8006eb2:	8afb      	ldrh	r3, [r7, #22]
 8006eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <USB_EPClearStall+0x106>
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	82bb      	strh	r3, [r7, #20]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	8abb      	ldrh	r3, [r7, #20]
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	827b      	strh	r3, [r7, #18]
 8006f0c:	8a7b      	ldrh	r3, [r7, #18]
 8006f0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f12:	827b      	strh	r3, [r7, #18]
 8006f14:	8a7b      	ldrh	r3, [r7, #18]
 8006f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f1a:	827b      	strh	r3, [r7, #18]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	8a7b      	ldrh	r3, [r7, #18]
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	371c      	adds	r7, #28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2280      	movs	r2, #128	; 0x80
 8006f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr

08006f96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b08b      	sub	sp, #44	; 0x2c
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	460b      	mov	r3, r1
 8006fda:	80fb      	strh	r3, [r7, #6]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fe0:	88bb      	ldrh	r3, [r7, #4]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	005a      	lsls	r2, r3, #1
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ffc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
 8007002:	e01e      	b.n	8007042 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	3301      	adds	r3, #1
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	b21a      	sxth	r2, r3
 8007014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007018:	4313      	orrs	r3, r2
 800701a:	b21b      	sxth	r3, r3
 800701c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	8a7a      	ldrh	r2, [r7, #18]
 8007022:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	3302      	adds	r3, #2
 8007028:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	3302      	adds	r3, #2
 800702e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	3301      	adds	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3301      	adds	r3, #1
 800703a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	3b01      	subs	r3, #1
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1dd      	bne.n	8007004 <USB_WritePMA+0x3a>
  }
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	372c      	adds	r7, #44	; 0x2c
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007054:	b480      	push	{r7}
 8007056:	b08b      	sub	sp, #44	; 0x2c
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4611      	mov	r1, r2
 8007060:	461a      	mov	r2, r3
 8007062:	460b      	mov	r3, r1
 8007064:	80fb      	strh	r3, [r7, #6]
 8007066:	4613      	mov	r3, r2
 8007068:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800706a:	88bb      	ldrh	r3, [r7, #4]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	005a      	lsls	r2, r3, #1
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007086:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
 800708c:	e01b      	b.n	80070c6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	3302      	adds	r3, #2
 800709a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3301      	adds	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	3302      	adds	r3, #2
 80070be:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	3b01      	subs	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e0      	bne.n	800708e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80070cc:	88bb      	ldrh	r3, [r7, #4]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	701a      	strb	r2, [r3, #0]
  }
}
 80070e8:	bf00      	nop
 80070ea:	372c      	adds	r7, #44	; 0x2c
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
	...

080070f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070f8:	4904      	ldr	r1, [pc, #16]	; (800710c <MX_FATFS_Init+0x18>)
 80070fa:	4805      	ldr	r0, [pc, #20]	; (8007110 <MX_FATFS_Init+0x1c>)
 80070fc:	f005 fada 	bl	800c6b4 <FATFS_LinkDriver>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <MX_FATFS_Init+0x20>)
 8007106:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20002284 	.word	0x20002284
 8007110:	2000000c 	.word	0x2000000c
 8007114:	20002280 	.word	0x20002280

08007118 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800711c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	4603      	mov	r3, r0
 800712e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if(pdrv)
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <USER_initialize+0x14>
		return STA_NOINIT;
 8007136:	2301      	movs	r3, #1
 8007138:	e007      	b.n	800714a <USER_initialize+0x24>
	else
		return (w25qDiskInitialize() ? STA_NOINIT : 0);
 800713a:	f7f9 fbe5 	bl	8000908 <w25qDiskInitialize>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	4603      	mov	r3, r0
 800715a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return 0;
 800715c:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	uint32_t i;
	for(i=0;i<count;i++)
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e00d      	b.n	800719a <USER_read+0x32>
	{
		w25qReadSector(sector,buff);
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7f9 fc35 	bl	80009f0 <w25qReadSector>
		sector ++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3301      	adds	r3, #1
 800718a:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007192:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	3301      	adds	r3, #1
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d3ed      	bcc.n	800717e <USER_read+0x16>
	}

	return RES_OK;
 80071a2:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	int i;
	for(i=0;i<count;i++)
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e012      	b.n	80071e8 <USER_write+0x3c>
	{
		w25qEraseSector(sector);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7f9 fd06 	bl	8000bd8 <w25qEraseSector>

		w25qWriteSector(sector,(char*)buff);
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7f9 fc48 	bl	8000a64 <w25qWriteSector>
		sector ++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3301      	adds	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3301      	adds	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d8e8      	bhi.n	80071c2 <USER_write+0x16>
	}

	return RES_OK;
 80071f0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	603a      	str	r2, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
 8007208:	460b      	mov	r3, r1
 800720a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]

	switch(cmd)
 8007210:	79bb      	ldrb	r3, [r7, #6]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d819      	bhi.n	800724a <USER_ioctl+0x4e>
 8007216:	a201      	add	r2, pc, #4	; (adr r2, 800721c <USER_ioctl+0x20>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	0800724b 	.word	0x0800724b
 8007220:	08007241 	.word	0x08007241
 8007224:	08007237 	.word	0x08007237
 8007228:	0800722d 	.word	0x0800722d
	//				W25X_Erase_Sector(i);
	//
	//			break;

			case GET_BLOCK_SIZE:
				*(DWORD*)buff = FLASH_BLOCK_SIZE;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007232:	601a      	str	r2, [r3, #0]
			//	buf[1] = (u8)(FLASH_BLOCK_SIZE & 0xFF);
			//	buf[0] = (u8)(FLASH_BLOCK_SIZE >> 8);
				break;
 8007234:	e00a      	b.n	800724c <USER_ioctl+0x50>


			case GET_SECTOR_SIZE:
				*(DWORD*)buff = FLASH_SECTOR_SIZE;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800723c:	601a      	str	r2, [r3, #0]
			//	buf[0] = (u8)(FLASH_SECTOR_SIZE & 0xFF);
			//	buf[1] = (u8)(FLASH_SECTOR_SIZE >> 8);
				break;
 800723e:	e005      	b.n	800724c <USER_ioctl+0x50>

			case GET_SECTOR_COUNT:
				*(DWORD*)buff = FLASH_SECTOR_COUNT;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007246:	601a      	str	r2, [r3, #0]
			//	buf[0] = (u8)(FLASH_SECTOR_COUNT & 0xFF);
			//	buf[1] = (u8)(FLASH_SECTOR_COUNT >> 8);
				break;
 8007248:	e000      	b.n	800724c <USER_ioctl+0x50>

			default:
				//res = RES_PARERR;
				break;
 800724a:	bf00      	nop
		}
		return res;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr

08007258 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	7c1b      	ldrb	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d115      	bne.n	8007298 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800726c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007270:	2202      	movs	r2, #2
 8007272:	2101      	movs	r1, #1
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f005 fd22 	bl	800ccbe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007286:	2202      	movs	r2, #2
 8007288:	2181      	movs	r1, #129	; 0x81
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f005 fd17 	bl	800ccbe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	62da      	str	r2, [r3, #44]	; 0x2c
 8007296:	e012      	b.n	80072be <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	2202      	movs	r2, #2
 800729c:	2101      	movs	r1, #1
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f005 fd0d 	bl	800ccbe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	2202      	movs	r2, #2
 80072b0:	2181      	movs	r1, #129	; 0x81
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f005 fd03 	bl	800ccbe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80072be:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80072c2:	f005 fe43 	bl	800cf4c <USBD_static_malloc>
 80072c6:	4602      	mov	r2, r0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	e003      	b.n	80072e4 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f9d9 	bl	8007694 <MSC_BOT_Init>

  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80072f8:	2101      	movs	r1, #1
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f005 fd05 	bl	800cd0a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8007308:	2181      	movs	r1, #129	; 0x81
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f005 fcfd 	bl	800cd0a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa06 	bl	8007728 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	4618      	mov	r0, r3
 800732e:	f005 fe19 	bl	800cf64 <USBD_static_free>
    pdev->pClassData  = NULL;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007354:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007366:	2b00      	cmp	r3, #0
 8007368:	d04d      	beq.n	8007406 <USBD_MSC_Setup+0xc2>
 800736a:	2b20      	cmp	r3, #32
 800736c:	f040 8113 	bne.w	8007596 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	2bfe      	cmp	r3, #254	; 0xfe
 8007376:	d002      	beq.n	800737e <USBD_MSC_Setup+0x3a>
 8007378:	2bff      	cmp	r3, #255	; 0xff
 800737a:	d024      	beq.n	80073c6 <USBD_MSC_Setup+0x82>
 800737c:	e03b      	b.n	80073f6 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d118      	bne.n	80073b8 <USBD_MSC_Setup+0x74>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	88db      	ldrh	r3, [r3, #6]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d114      	bne.n	80073b8 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007394:	2b00      	cmp	r3, #0
 8007396:	da0f      	bge.n	80073b8 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	4798      	blx	r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	461a      	mov	r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2201      	movs	r2, #1
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f002 f992 	bl	80096da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073b6:	e025      	b.n	8007404 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f002 f923 	bl	8009606 <USBD_CtlError>
            ret = USBD_FAIL;
 80073c0:	2302      	movs	r3, #2
 80073c2:	75fb      	strb	r3, [r7, #23]
          break;
 80073c4:	e01e      	b.n	8007404 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	885b      	ldrh	r3, [r3, #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <USBD_MSC_Setup+0xa4>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	88db      	ldrh	r3, [r3, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d108      	bne.n	80073e8 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80073dc:	2b00      	cmp	r3, #0
 80073de:	db03      	blt.n	80073e8 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f987 	bl	80076f4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073e6:	e00d      	b.n	8007404 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f002 f90b 	bl	8009606 <USBD_CtlError>
            ret = USBD_FAIL;
 80073f0:	2302      	movs	r3, #2
 80073f2:	75fb      	strb	r3, [r7, #23]
          break;
 80073f4:	e006      	b.n	8007404 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f002 f904 	bl	8009606 <USBD_CtlError>
          ret = USBD_FAIL;
 80073fe:	2302      	movs	r3, #2
 8007400:	75fb      	strb	r3, [r7, #23]
          break;
 8007402:	bf00      	nop
      }
      break;
 8007404:	e0ce      	b.n	80075a4 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b0b      	cmp	r3, #11
 800740c:	f200 80bb 	bhi.w	8007586 <USBD_MSC_Setup+0x242>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <USBD_MSC_Setup+0xd4>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	08007449 	.word	0x08007449
 800741c:	080074bf 	.word	0x080074bf
 8007420:	08007587 	.word	0x08007587
 8007424:	08007587 	.word	0x08007587
 8007428:	08007587 	.word	0x08007587
 800742c:	08007587 	.word	0x08007587
 8007430:	08007587 	.word	0x08007587
 8007434:	08007587 	.word	0x08007587
 8007438:	08007587 	.word	0x08007587
 800743c:	08007587 	.word	0x08007587
 8007440:	08007471 	.word	0x08007471
 8007444:	08007499 	.word	0x08007499
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744e:	2b03      	cmp	r3, #3
 8007450:	d107      	bne.n	8007462 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007452:	f107 030e 	add.w	r3, r7, #14
 8007456:	2202      	movs	r2, #2
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f002 f93d 	bl	80096da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007460:	e098      	b.n	8007594 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f002 f8ce 	bl	8009606 <USBD_CtlError>
            ret = USBD_FAIL;
 800746a:	2302      	movs	r3, #2
 800746c:	75fb      	strb	r3, [r7, #23]
          break;
 800746e:	e091      	b.n	8007594 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007476:	2b03      	cmp	r3, #3
 8007478:	d107      	bne.n	800748a <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3304      	adds	r3, #4
 800747e:	2201      	movs	r2, #1
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f002 f929 	bl	80096da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007488:	e084      	b.n	8007594 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f002 f8ba 	bl	8009606 <USBD_CtlError>
            ret = USBD_FAIL;
 8007492:	2302      	movs	r3, #2
 8007494:	75fb      	strb	r3, [r7, #23]
          break;
 8007496:	e07d      	b.n	8007594 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d106      	bne.n	80074b0 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	885b      	ldrh	r3, [r3, #2]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ae:	e071      	b.n	8007594 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f002 f8a7 	bl	8009606 <USBD_CtlError>
            ret = USBD_FAIL;
 80074b8:	2302      	movs	r3, #2
 80074ba:	75fb      	strb	r3, [r7, #23]
          break;
 80074bc:	e06a      	b.n	8007594 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	889b      	ldrh	r3, [r3, #4]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f005 fc3e 	bl	800cd48 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	889b      	ldrh	r3, [r3, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f005 fc18 	bl	800cd0a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	b25b      	sxtb	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	da23      	bge.n	800752c <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	889b      	ldrh	r3, [r3, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f003 020f 	and.w	r2, r3, #15
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	3318      	adds	r3, #24
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7c1b      	ldrb	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d107      	bne.n	8007518 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8007508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750c:	2202      	movs	r2, #2
 800750e:	2181      	movs	r1, #129	; 0x81
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f005 fbd4 	bl	800ccbe <USBD_LL_OpenEP>
 8007516:	e005      	b.n	8007524 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	2202      	movs	r2, #2
 800751c:	2181      	movs	r1, #129	; 0x81
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f005 fbcd 	bl	800ccbe <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	62da      	str	r2, [r3, #44]	; 0x2c
 800752a:	e024      	b.n	8007576 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	889b      	ldrh	r3, [r3, #4]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 020f 	and.w	r2, r3, #15
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	7c1b      	ldrb	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d107      	bne.n	8007562 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8007552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007556:	2202      	movs	r2, #2
 8007558:	2101      	movs	r1, #1
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f005 fbaf 	bl	800ccbe <USBD_LL_OpenEP>
 8007560:	e005      	b.n	800756e <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2202      	movs	r2, #2
 8007566:	2101      	movs	r1, #1
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f005 fba8 	bl	800ccbe <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	889b      	ldrh	r3, [r3, #4]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa52 	bl	8007a28 <MSC_BOT_CplClrFeature>
          break;
 8007584:	e006      	b.n	8007594 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f002 f83c 	bl	8009606 <USBD_CtlError>
          ret = USBD_FAIL;
 800758e:	2302      	movs	r3, #2
 8007590:	75fb      	strb	r3, [r7, #23]
          break;
 8007592:	bf00      	nop
      }
      break;
 8007594:	e006      	b.n	80075a4 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f002 f834 	bl	8009606 <USBD_CtlError>
      ret = USBD_FAIL;
 800759e:	2302      	movs	r3, #2
 80075a0:	75fb      	strb	r3, [r7, #23]
      break;
 80075a2:	bf00      	nop
  }

  return ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop

080075b0 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8c1 	bl	8007748 <MSC_BOT_DataIn>

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8e3 	bl	80077ac <MSC_BOT_DataOut>

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80075fe:	4b03      	ldr	r3, [pc, #12]	; (800760c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20000058 	.word	0x20000058

08007610 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000078 	.word	0x20000078

08007630 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800763e:	4b03      	ldr	r3, [pc, #12]	; (800764c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007640:	4618      	mov	r0, r3
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000098 	.word	0x20000098

08007650 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	220a      	movs	r2, #10
 800765c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800765e:	4b03      	ldr	r3, [pc, #12]	; (800766c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200000b8 	.word	0x200000b8

08007670 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr

08007694 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2000      	movs	r0, #0
 80076ca:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80076cc:	2101      	movs	r1, #1
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f005 fb3a 	bl	800cd48 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80076d4:	2181      	movs	r1, #129	; 0x81
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f005 fb36 	bl	800cd48 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80076e2:	231f      	movs	r3, #31
 80076e4:	2101      	movs	r1, #1
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f005 fbf9 	bl	800cede <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007702:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007716:	231f      	movs	r3, #31
 8007718:	2101      	movs	r1, #1
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f005 fbdf 	bl	800cede <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007720:	bf00      	nop
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007736:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	721a      	strb	r2, [r3, #8]
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7a1b      	ldrb	r3, [r3, #8]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d005      	beq.n	8007770 <MSC_BOT_DataIn+0x28>
 8007764:	2b02      	cmp	r3, #2
 8007766:	db1a      	blt.n	800779e <MSC_BOT_DataIn+0x56>
 8007768:	3b03      	subs	r3, #3
 800776a:	2b01      	cmp	r3, #1
 800776c:	d817      	bhi.n	800779e <MSC_BOT_DataIn+0x56>
 800776e:	e011      	b.n	8007794 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800777c:	461a      	mov	r2, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f97a 	bl	8007a78 <SCSI_ProcessCmd>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	da0b      	bge.n	80077a2 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f8f1 	bl	8007974 <MSC_BOT_SendCSW>
      }
      break;
 8007792:	e006      	b.n	80077a2 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8ec 	bl	8007974 <MSC_BOT_SendCSW>
      break;
 800779c:	e002      	b.n	80077a4 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <MSC_BOT_DataIn+0x5c>
      break;
 80077a2:	bf00      	nop
  }
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077be:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7a1b      	ldrb	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <MSC_BOT_DataOut+0x22>
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d004      	beq.n	80077d6 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80077cc:	e015      	b.n	80077fa <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f818 	bl	8007804 <MSC_BOT_CBW_Decode>
      break;
 80077d4:	e011      	b.n	80077fa <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80077e2:	461a      	mov	r2, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f947 	bl	8007a78 <SCSI_ProcessCmd>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da03      	bge.n	80077f8 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80077f0:	2101      	movs	r1, #1
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8be 	bl	8007974 <MSC_BOT_SendCSW>
      break;
 80077f8:	bf00      	nop
  }
}
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007812:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800782c:	2101      	movs	r1, #1
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f005 fb78 	bl	800cf24 <USBD_LL_GetRxDataSize>
 8007834:	4603      	mov	r3, r0
 8007836:	2b1f      	cmp	r3, #31
 8007838:	d114      	bne.n	8007864 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007840:	4a32      	ldr	r2, [pc, #200]	; (800790c <MSC_BOT_CBW_Decode+0x108>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10e      	bne.n	8007864 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800784c:	2b01      	cmp	r3, #1
 800784e:	d809      	bhi.n	8007864 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8007860:	2b10      	cmp	r3, #16
 8007862:	d90e      	bls.n	8007882 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800786a:	2320      	movs	r3, #32
 800786c:	2205      	movs	r2, #5
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fc48 	bl	8008104 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2202      	movs	r2, #2
 8007878:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8a6 	bl	80079cc <MSC_BOT_Abort>
 8007880:	e041      	b.n	8007906 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800788e:	461a      	mov	r2, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8f1 	bl	8007a78 <SCSI_ProcessCmd>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	da0c      	bge.n	80078b6 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	7a1b      	ldrb	r3, [r3, #8]
 80078a0:	2b05      	cmp	r3, #5
 80078a2:	d104      	bne.n	80078ae <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80078a4:	2101      	movs	r1, #1
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f864 	bl	8007974 <MSC_BOT_SendCSW>
 80078ac:	e02b      	b.n	8007906 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f88c 	bl	80079cc <MSC_BOT_Abort>
 80078b4:	e027      	b.n	8007906 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	7a1b      	ldrb	r3, [r3, #8]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d022      	beq.n	8007904 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d01e      	beq.n	8007904 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d01a      	beq.n	8007904 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	895b      	ldrh	r3, [r3, #10]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f103 010c 	add.w	r1, r3, #12
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	895b      	ldrh	r3, [r3, #10]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f814 	bl	8007910 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80078e8:	e00d      	b.n	8007906 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	895b      	ldrh	r3, [r3, #10]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d104      	bne.n	80078fc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80078f2:	2100      	movs	r1, #0
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f83d 	bl	8007974 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80078fa:	e004      	b.n	8007906 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f865 	bl	80079cc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007902:	e000      	b.n	8007906 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007904:	bf00      	nop
    }
  }
}
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	43425355 	.word	0x43425355

08007910 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007924:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	429a      	cmp	r2, r3
 8007930:	d204      	bcs.n	800793c <MSC_BOT_SendData+0x2c>
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007938:	b29b      	uxth	r3, r3
 800793a:	e000      	b.n	800793e <MSC_BOT_SendData+0x2e>
 800793c:	88fb      	ldrh	r3, [r7, #6]
 800793e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	1ad2      	subs	r2, r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2204      	movs	r2, #4
 800795c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800795e:	8a7b      	ldrh	r3, [r7, #18]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	2181      	movs	r1, #129	; 0x81
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f005 fa97 	bl	800ce98 <USBD_LL_Transmit>
}
 800796a:	bf00      	nop
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007986:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a0f      	ldr	r2, [pc, #60]	; (80079c8 <MSC_BOT_SendCSW+0x54>)
 800798c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 80079a4:	230d      	movs	r3, #13
 80079a6:	2181      	movs	r1, #129	; 0x81
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f005 fa75 	bl	800ce98 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80079b4:	231f      	movs	r3, #31
 80079b6:	2101      	movs	r1, #1
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f005 fa90 	bl	800cede <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	53425355 	.word	0x53425355

080079cc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10c      	bne.n	8007a00 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d007      	beq.n	8007a00 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d103      	bne.n	8007a00 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80079f8:	2101      	movs	r1, #1
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f005 f9c3 	bl	800cd86 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007a00:	2181      	movs	r1, #129	; 0x81
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f005 f9bf 	bl	800cd86 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	7a5b      	ldrb	r3, [r3, #9]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d107      	bne.n	8007a20 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007a16:	231f      	movs	r3, #31
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f005 fa5f 	bl	800cede <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	7a5b      	ldrb	r3, [r3, #9]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d107      	bne.n	8007a54 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007a44:	2181      	movs	r1, #129	; 0x81
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f005 f99d 	bl	800cd86 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	725a      	strb	r2, [r3, #9]
 8007a52:	e00d      	b.n	8007a70 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da08      	bge.n	8007a6e <MSC_BOT_CplClrFeature+0x46>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	7a5b      	ldrb	r3, [r3, #9]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d004      	beq.n	8007a6e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007a64:	2101      	movs	r1, #1
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ff84 	bl	8007974 <MSC_BOT_SendCSW>
 8007a6c:	e000      	b.n	8007a70 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007a6e:	bf00      	nop
  }
}
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	460b      	mov	r3, r1
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b5a      	cmp	r3, #90	; 0x5a
 8007a8c:	f200 810e 	bhi.w	8007cac <SCSI_ProcessCmd+0x234>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <SCSI_ProcessCmd+0x20>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007c05 	.word	0x08007c05
 8007a9c:	08007cad 	.word	0x08007cad
 8007aa0:	08007cad 	.word	0x08007cad
 8007aa4:	08007c13 	.word	0x08007c13
 8007aa8:	08007cad 	.word	0x08007cad
 8007aac:	08007cad 	.word	0x08007cad
 8007ab0:	08007cad 	.word	0x08007cad
 8007ab4:	08007cad 	.word	0x08007cad
 8007ab8:	08007cad 	.word	0x08007cad
 8007abc:	08007cad 	.word	0x08007cad
 8007ac0:	08007cad 	.word	0x08007cad
 8007ac4:	08007cad 	.word	0x08007cad
 8007ac8:	08007cad 	.word	0x08007cad
 8007acc:	08007cad 	.word	0x08007cad
 8007ad0:	08007cad 	.word	0x08007cad
 8007ad4:	08007cad 	.word	0x08007cad
 8007ad8:	08007cad 	.word	0x08007cad
 8007adc:	08007cad 	.word	0x08007cad
 8007ae0:	08007c21 	.word	0x08007c21
 8007ae4:	08007cad 	.word	0x08007cad
 8007ae8:	08007cad 	.word	0x08007cad
 8007aec:	08007cad 	.word	0x08007cad
 8007af0:	08007cad 	.word	0x08007cad
 8007af4:	08007cad 	.word	0x08007cad
 8007af8:	08007cad 	.word	0x08007cad
 8007afc:	08007cad 	.word	0x08007cad
 8007b00:	08007c4b 	.word	0x08007c4b
 8007b04:	08007c2f 	.word	0x08007c2f
 8007b08:	08007cad 	.word	0x08007cad
 8007b0c:	08007cad 	.word	0x08007cad
 8007b10:	08007c3d 	.word	0x08007c3d
 8007b14:	08007cad 	.word	0x08007cad
 8007b18:	08007cad 	.word	0x08007cad
 8007b1c:	08007cad 	.word	0x08007cad
 8007b20:	08007cad 	.word	0x08007cad
 8007b24:	08007c67 	.word	0x08007c67
 8007b28:	08007cad 	.word	0x08007cad
 8007b2c:	08007c75 	.word	0x08007c75
 8007b30:	08007cad 	.word	0x08007cad
 8007b34:	08007cad 	.word	0x08007cad
 8007b38:	08007c83 	.word	0x08007c83
 8007b3c:	08007cad 	.word	0x08007cad
 8007b40:	08007c91 	.word	0x08007c91
 8007b44:	08007cad 	.word	0x08007cad
 8007b48:	08007cad 	.word	0x08007cad
 8007b4c:	08007cad 	.word	0x08007cad
 8007b50:	08007cad 	.word	0x08007cad
 8007b54:	08007c9f 	.word	0x08007c9f
 8007b58:	08007cad 	.word	0x08007cad
 8007b5c:	08007cad 	.word	0x08007cad
 8007b60:	08007cad 	.word	0x08007cad
 8007b64:	08007cad 	.word	0x08007cad
 8007b68:	08007cad 	.word	0x08007cad
 8007b6c:	08007cad 	.word	0x08007cad
 8007b70:	08007cad 	.word	0x08007cad
 8007b74:	08007cad 	.word	0x08007cad
 8007b78:	08007cad 	.word	0x08007cad
 8007b7c:	08007cad 	.word	0x08007cad
 8007b80:	08007cad 	.word	0x08007cad
 8007b84:	08007cad 	.word	0x08007cad
 8007b88:	08007cad 	.word	0x08007cad
 8007b8c:	08007cad 	.word	0x08007cad
 8007b90:	08007cad 	.word	0x08007cad
 8007b94:	08007cad 	.word	0x08007cad
 8007b98:	08007cad 	.word	0x08007cad
 8007b9c:	08007cad 	.word	0x08007cad
 8007ba0:	08007cad 	.word	0x08007cad
 8007ba4:	08007cad 	.word	0x08007cad
 8007ba8:	08007cad 	.word	0x08007cad
 8007bac:	08007cad 	.word	0x08007cad
 8007bb0:	08007cad 	.word	0x08007cad
 8007bb4:	08007cad 	.word	0x08007cad
 8007bb8:	08007cad 	.word	0x08007cad
 8007bbc:	08007cad 	.word	0x08007cad
 8007bc0:	08007cad 	.word	0x08007cad
 8007bc4:	08007cad 	.word	0x08007cad
 8007bc8:	08007cad 	.word	0x08007cad
 8007bcc:	08007cad 	.word	0x08007cad
 8007bd0:	08007cad 	.word	0x08007cad
 8007bd4:	08007cad 	.word	0x08007cad
 8007bd8:	08007cad 	.word	0x08007cad
 8007bdc:	08007cad 	.word	0x08007cad
 8007be0:	08007cad 	.word	0x08007cad
 8007be4:	08007cad 	.word	0x08007cad
 8007be8:	08007cad 	.word	0x08007cad
 8007bec:	08007cad 	.word	0x08007cad
 8007bf0:	08007cad 	.word	0x08007cad
 8007bf4:	08007cad 	.word	0x08007cad
 8007bf8:	08007cad 	.word	0x08007cad
 8007bfc:	08007cad 	.word	0x08007cad
 8007c00:	08007c59 	.word	0x08007c59
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f85c 	bl	8007cc8 <SCSI_TestUnitReady>
      break;
 8007c10:	e055      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fa09 	bl	8008030 <SCSI_RequestSense>
      break;
 8007c1e:	e04e      	b.n	8007cbe <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4619      	mov	r1, r3
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f888 	bl	8007d3c <SCSI_Inquiry>
      break;
 8007c2c:	e047      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	4619      	mov	r1, r3
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fa9e 	bl	8008176 <SCSI_StartStopUnit>
      break;
 8007c3a:	e040      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4619      	mov	r1, r3
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fa97 	bl	8008176 <SCSI_StartStopUnit>
      break;
 8007c48:	e039      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f99d 	bl	8007f90 <SCSI_ModeSense6>
      break;
 8007c56:	e032      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f9be 	bl	8007fe0 <SCSI_ModeSense10>
      break;
 8007c64:	e02b      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f92a 	bl	8007ec6 <SCSI_ReadFormatCapacity>
      break;
 8007c72:	e024      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f8bc 	bl	8007df8 <SCSI_ReadCapacity10>
      break;
 8007c80:	e01d      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8007c82:	7afb      	ldrb	r3, [r7, #11]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4619      	mov	r1, r3
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 fa88 	bl	800819e <SCSI_Read10>
      break;
 8007c8e:	e016      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	4619      	mov	r1, r3
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fb0d 	bl	80082b6 <SCSI_Write10>
      break;
 8007c9c:	e00f      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fbb6 	bl	8008416 <SCSI_Verify10>
      break;
 8007caa:	e008      	b.n	8007cbe <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007cac:	7af9      	ldrb	r1, [r7, #11]
 8007cae:	2320      	movs	r3, #32
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fa26 	bl	8008104 <SCSI_SenseCode>
      return -1;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	e000      	b.n	8007cc0 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007cee:	2320      	movs	r3, #32
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa06 	bl	8008104 <SCSI_SenseCode>

    return -1;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	e019      	b.n	8007d32 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	7afa      	ldrb	r2, [r7, #11]
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d12:	7af9      	ldrb	r1, [r7, #11]
 8007d14:	233a      	movs	r3, #58	; 0x3a
 8007d16:	2202      	movs	r2, #2
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f9f3 	bl	8008104 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2205      	movs	r2, #5
 8007d22:	721a      	strb	r2, [r3, #8]

    return -1;
 8007d24:	f04f 33ff 	mov.w	r3, #4294967295
 8007d28:	e003      	b.n	8007d32 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	815a      	strh	r2, [r3, #10]

  return 0;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b089      	sub	sp, #36	; 0x24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	460b      	mov	r3, r1
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d50:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3301      	adds	r3, #1
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d014      	beq.n	8007d8a <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007d60:	2307      	movs	r3, #7
 8007d62:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	8bfa      	ldrh	r2, [r7, #30]
 8007d68:	815a      	strh	r2, [r3, #10]

    while (len)
 8007d6a:	e00a      	b.n	8007d82 <SCSI_Inquiry+0x46>
    {
      len--;
 8007d6c:	8bfb      	ldrh	r3, [r7, #30]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8007d72:	8bfa      	ldrh	r2, [r7, #30]
 8007d74:	8bfb      	ldrh	r3, [r7, #30]
 8007d76:	491f      	ldr	r1, [pc, #124]	; (8007df4 <SCSI_Inquiry+0xb8>)
 8007d78:	5c89      	ldrb	r1, [r1, r2]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	460a      	mov	r2, r1
 8007d80:	731a      	strb	r2, [r3, #12]
    while (len)
 8007d82:	8bfb      	ldrh	r3, [r7, #30]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f1      	bne.n	8007d6c <SCSI_Inquiry+0x30>
 8007d88:	e02e      	b.n	8007de8 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d90:	69d9      	ldr	r1, [r3, #28]
 8007d92:	7afa      	ldrb	r2, [r7, #11]
 8007d94:	4613      	mov	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	3304      	adds	r3, #4
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3305      	adds	r3, #5
 8007daa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3304      	adds	r3, #4
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	8bfa      	ldrh	r2, [r7, #30]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d303      	bcc.n	8007dc2 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	8bfa      	ldrh	r2, [r7, #30]
 8007dc6:	815a      	strh	r2, [r3, #10]

    while (len)
 8007dc8:	e00b      	b.n	8007de2 <SCSI_Inquiry+0xa6>
    {
      len--;
 8007dca:	8bfb      	ldrh	r3, [r7, #30]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007dd0:	8bfb      	ldrh	r3, [r7, #30]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	441a      	add	r2, r3
 8007dd6:	8bfb      	ldrh	r3, [r7, #30]
 8007dd8:	7811      	ldrb	r1, [r2, #0]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4413      	add	r3, r2
 8007dde:	460a      	mov	r2, r1
 8007de0:	731a      	strb	r2, [r3, #12]
    while (len)
 8007de2:	8bfb      	ldrh	r3, [r7, #30]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f0      	bne.n	8007dca <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3724      	adds	r7, #36	; 0x24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr
 8007df4:	0800d120 	.word	0x0800d120

08007df8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	460b      	mov	r3, r1
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8007e22:	7af8      	ldrb	r0, [r7, #11]
 8007e24:	4798      	blx	r3
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d008      	beq.n	8007e3e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e2c:	7af9      	ldrb	r1, [r7, #11]
 8007e2e:	233a      	movs	r3, #58	; 0x3a
 8007e30:	2202      	movs	r2, #2
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f966 	bl	8008104 <SCSI_SenseCode>
    return -1;
 8007e38:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3c:	e03f      	b.n	8007ebe <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007e44:	3b01      	subs	r3, #1
 8007e46:	0e1b      	lsrs	r3, r3, #24
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007e54:	3b01      	subs	r3, #1
 8007e56:	0c1b      	lsrs	r3, r3, #16
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007e64:	3b01      	subs	r3, #1
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e84:	161b      	asrs	r3, r3, #24
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e92:	141b      	asrs	r3, r3, #16
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	815a      	strh	r2, [r3, #10]
    return 0;
 8007ebc:	2300      	movs	r3, #0
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b088      	sub	sp, #32
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	83fb      	strh	r3, [r7, #30]
 8007ee0:	e007      	b.n	8007ef2 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007ee2:	8bfb      	ldrh	r3, [r7, #30]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	2200      	movs	r2, #0
 8007eea:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007eec:	8bfb      	ldrh	r3, [r7, #30]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	83fb      	strh	r3, [r7, #30]
 8007ef2:	8bfb      	ldrh	r3, [r7, #30]
 8007ef4:	2b0b      	cmp	r3, #11
 8007ef6:	d9f4      	bls.n	8007ee2 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f107 0216 	add.w	r2, r7, #22
 8007f04:	f107 0110 	add.w	r1, r7, #16
 8007f08:	7af8      	ldrb	r0, [r7, #11]
 8007f0a:	4798      	blx	r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f12:	7af9      	ldrb	r1, [r7, #11]
 8007f14:	233a      	movs	r3, #58	; 0x3a
 8007f16:	2202      	movs	r2, #2
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f8f3 	bl	8008104 <SCSI_SenseCode>
    return -1;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f22:	e030      	b.n	8007f86 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2208      	movs	r2, #8
 8007f28:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	0e1b      	lsrs	r3, r3, #24
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	0a1b      	lsrs	r3, r3, #8
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007f60:	8afb      	ldrh	r3, [r7, #22]
 8007f62:	141b      	asrs	r3, r3, #16
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007f6a:	8afb      	ldrh	r3, [r7, #22]
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007f76:	8afb      	ldrh	r3, [r7, #22]
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	220c      	movs	r2, #12
 8007f82:	815a      	strh	r2, [r3, #10]
    return 0;
 8007f84:	2300      	movs	r3, #0
  }
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3720      	adds	r7, #32
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa4:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	8afa      	ldrh	r2, [r7, #22]
 8007fae:	815a      	strh	r2, [r3, #10]

  while (len)
 8007fb0:	e00a      	b.n	8007fc8 <SCSI_ModeSense6+0x38>
  {
    len--;
 8007fb2:	8afb      	ldrh	r3, [r7, #22]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007fb8:	8afa      	ldrh	r2, [r7, #22]
 8007fba:	8afb      	ldrh	r3, [r7, #22]
 8007fbc:	4907      	ldr	r1, [pc, #28]	; (8007fdc <SCSI_ModeSense6+0x4c>)
 8007fbe:	5c89      	ldrb	r1, [r1, r2]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	731a      	strb	r2, [r3, #12]
  while (len)
 8007fc8:	8afb      	ldrh	r3, [r7, #22]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1f1      	bne.n	8007fb2 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	0800d128 	.word	0x0800d128

08007fe0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007fee:	2308      	movs	r3, #8
 8007ff0:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	8afa      	ldrh	r2, [r7, #22]
 8007ffe:	815a      	strh	r2, [r3, #10]

  while (len)
 8008000:	e00a      	b.n	8008018 <SCSI_ModeSense10+0x38>
  {
    len--;
 8008002:	8afb      	ldrh	r3, [r7, #22]
 8008004:	3b01      	subs	r3, #1
 8008006:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8008008:	8afa      	ldrh	r2, [r7, #22]
 800800a:	8afb      	ldrh	r3, [r7, #22]
 800800c:	4907      	ldr	r1, [pc, #28]	; (800802c <SCSI_ModeSense10+0x4c>)
 800800e:	5c89      	ldrb	r1, [r1, r2]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4413      	add	r3, r2
 8008014:	460a      	mov	r2, r1
 8008016:	731a      	strb	r2, [r3, #12]
  while (len)
 8008018:	8afb      	ldrh	r3, [r7, #22]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f1      	bne.n	8008002 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	0800d130 	.word	0x0800d130

08008030 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	460b      	mov	r3, r1
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008044:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8008046:	2300      	movs	r3, #0
 8008048:	75fb      	strb	r3, [r7, #23]
 800804a:	e007      	b.n	800805c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4413      	add	r3, r2
 8008052:	2200      	movs	r2, #0
 8008054:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	3301      	adds	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b11      	cmp	r3, #17
 8008060:	d9f4      	bls.n	800804c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2270      	movs	r2, #112	; 0x70
 8008066:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	220c      	movs	r2, #12
 800806c:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800807a:	429a      	cmp	r2, r3
 800807c:	d02e      	beq.n	80080dc <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	3347      	adds	r3, #71	; 0x47
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	4413      	add	r3, r2
 800808c:	791a      	ldrb	r2, [r3, #4]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	3347      	adds	r3, #71	; 0x47
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	4413      	add	r3, r2
 80080a0:	7a5a      	ldrb	r2, [r3, #9]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	3347      	adds	r3, #71	; 0x47
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	4413      	add	r3, r2
 80080b4:	7a1a      	ldrb	r2, [r3, #8]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d103      	bne.n	80080dc <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2212      	movs	r2, #18
 80080e0:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b12      	cmp	r3, #18
 80080ea:	d805      	bhi.n	80080f8 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	bc80      	pop	{r7}
 8008102:	4770      	bx	lr

08008104 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	461a      	mov	r2, r3
 8008112:	4603      	mov	r3, r0
 8008114:	70fb      	strb	r3, [r7, #3]
 8008116:	460b      	mov	r3, r1
 8008118:	70bb      	strb	r3, [r7, #2]
 800811a:	4613      	mov	r3, r2
 800811c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	3347      	adds	r3, #71	; 0x47
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	4413      	add	r3, r2
 8008134:	78ba      	ldrb	r2, [r7, #2]
 8008136:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	3347      	adds	r3, #71	; 0x47
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	4413      	add	r3, r2
 8008146:	2200      	movs	r2, #0
 8008148:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008150:	3301      	adds	r3, #1
 8008152:	b2da      	uxtb	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008160:	2b04      	cmp	r3, #4
 8008162:	d103      	bne.n	800816c <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008176:	b480      	push	{r7}
 8008178:	b087      	sub	sp, #28
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	460b      	mov	r3, r1
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818a:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2200      	movs	r2, #0
 8008190:	815a      	strh	r2, [r3, #10]
  return 0;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	bc80      	pop	{r7}
 800819c:	4770      	bx	lr

0800819e <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	460b      	mov	r3, r1
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b2:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	7a1b      	ldrb	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d16e      	bne.n	800829a <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80081c2:	b25b      	sxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	db0a      	blt.n	80081de <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80081ce:	2320      	movs	r3, #32
 80081d0:	2205      	movs	r2, #5
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff ff96 	bl	8008104 <SCSI_SenseCode>
      return -1;
 80081d8:	f04f 33ff 	mov.w	r3, #4294967295
 80081dc:	e067      	b.n	80082ae <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	7afa      	ldrb	r2, [r7, #11]
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d008      	beq.n	8008204 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80081f2:	7af9      	ldrb	r1, [r7, #11]
 80081f4:	233a      	movs	r3, #58	; 0x3a
 80081f6:	2202      	movs	r2, #2
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff ff83 	bl	8008104 <SCSI_SenseCode>
      return -1;
 80081fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008202:	e054      	b.n	80082ae <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3302      	adds	r3, #2
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3303      	adds	r3, #3
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008214:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3304      	adds	r3, #4
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800821e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	3205      	adds	r2, #5
 8008224:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008226:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3307      	adds	r3, #7
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	3208      	adds	r2, #8
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	431a      	orrs	r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008250:	7af9      	ldrb	r1, [r7, #11]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f912 	bl	800847c <SCSI_CheckAddressRange>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	da02      	bge.n	8008264 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	e024      	b.n	80082ae <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2202      	movs	r2, #2
 8008268:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008276:	6979      	ldr	r1, [r7, #20]
 8008278:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	429a      	cmp	r2, r3
 8008282:	d00a      	beq.n	800829a <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800828a:	2320      	movs	r3, #32
 800828c:	2205      	movs	r2, #5
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff ff38 	bl	8008104 <SCSI_SenseCode>
      return -1;
 8008294:	f04f 33ff 	mov.w	r3, #4294967295
 8008298:	e009      	b.n	80082ae <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a0:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 80082a2:	7afb      	ldrb	r3, [r7, #11]
 80082a4:	4619      	mov	r1, r3
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f90a 	bl	80084c0 <SCSI_ProcessRead>
 80082ac:	4603      	mov	r3, r0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b086      	sub	sp, #24
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	460b      	mov	r3, r1
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	7a1b      	ldrb	r3, [r3, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 8096 	bne.w	8008402 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da0a      	bge.n	80082f8 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80082e8:	2320      	movs	r3, #32
 80082ea:	2205      	movs	r2, #5
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff ff09 	bl	8008104 <SCSI_SenseCode>
      return -1;
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295
 80082f6:	e08a      	b.n	800840e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	7afa      	ldrb	r2, [r7, #11]
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800830c:	7af9      	ldrb	r1, [r7, #11]
 800830e:	233a      	movs	r3, #58	; 0x3a
 8008310:	2202      	movs	r2, #2
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fef6 	bl	8008104 <SCSI_SenseCode>
      return -1;
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
 800831c:	e077      	b.n	800840e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	7afa      	ldrb	r2, [r7, #11]
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d008      	beq.n	8008344 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008332:	7af9      	ldrb	r1, [r7, #11]
 8008334:	2327      	movs	r3, #39	; 0x27
 8008336:	2202      	movs	r2, #2
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff fee3 	bl	8008104 <SCSI_SenseCode>
      return -1;
 800833e:	f04f 33ff 	mov.w	r3, #4294967295
 8008342:	e064      	b.n	800840e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3302      	adds	r3, #2
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3303      	adds	r3, #3
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008354:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800835e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	3205      	adds	r2, #5
 8008364:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008366:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3307      	adds	r3, #7
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	3208      	adds	r2, #8
 800837a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800837c:	431a      	orrs	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008390:	7af9      	ldrb	r1, [r7, #11]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f872 	bl	800847c <SCSI_CheckAddressRange>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	da02      	bge.n	80083a4 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	e034      	b.n	800840e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80083b0:	fb02 f303 	mul.w	r3, r2, r3
 80083b4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d00a      	beq.n	80083d8 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80083c8:	2320      	movs	r3, #32
 80083ca:	2205      	movs	r2, #5
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff fe99 	bl	8008104 <SCSI_SenseCode>
      return -1;
 80083d2:	f04f 33ff 	mov.w	r3, #4294967295
 80083d6:	e01a      	b.n	800840e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083de:	bf28      	it	cs
 80083e0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80083e4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2201      	movs	r2, #1
 80083ea:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f103 020c 	add.w	r2, r3, #12
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2101      	movs	r1, #1
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f004 fd70 	bl	800cede <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	e005      	b.n	800840e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8008402:	7afb      	ldrb	r3, [r7, #11]
 8008404:	4619      	mov	r1, r3
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 f8ce 	bl	80085a8 <SCSI_ProcessWrite>
 800840c:	4603      	mov	r3, r0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	460b      	mov	r3, r1
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3301      	adds	r3, #1
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800843a:	7af9      	ldrb	r1, [r7, #11]
 800843c:	2324      	movs	r3, #36	; 0x24
 800843e:	2205      	movs	r2, #5
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fe5f 	bl	8008104 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008446:	f04f 33ff 	mov.w	r3, #4294967295
 800844a:	e013      	b.n	8008474 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008458:	7af9      	ldrb	r1, [r7, #11]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 f80e 	bl	800847c <SCSI_CheckAddressRange>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	da02      	bge.n	800846c <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8008466:	f04f 33ff 	mov.w	r3, #4294967295
 800846a:	e003      	b.n	8008474 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2200      	movs	r2, #0
 8008470:	815a      	strh	r2, [r3, #10]
  return 0;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	460b      	mov	r3, r1
 800848a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008492:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	441a      	add	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d908      	bls.n	80084b6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80084a4:	7af9      	ldrb	r1, [r7, #11]
 80084a6:	2321      	movs	r3, #33	; 0x21
 80084a8:	2205      	movs	r2, #5
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff fe2a 	bl	8008104 <SCSI_SenseCode>
    return -1;
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295
 80084b4:	e000      	b.n	80084b8 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80084c0:	b590      	push	{r4, r7, lr}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
 80084e4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ec:	bf28      	it	cs
 80084ee:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80084f2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084fa:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800850e:	4618      	mov	r0, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008516:	b29b      	uxth	r3, r3
 8008518:	78f8      	ldrb	r0, [r7, #3]
 800851a:	47a0      	blx	r4
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	da08      	bge.n	8008534 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008522:	78f9      	ldrb	r1, [r7, #3]
 8008524:	2311      	movs	r3, #17
 8008526:	2204      	movs	r2, #4
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff fdeb 	bl	8008104 <SCSI_SenseCode>
    return -1;
 800852e:	f04f 33ff 	mov.w	r3, #4294967295
 8008532:	e035      	b.n	80085a0 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f103 020c 	add.w	r2, r3, #12
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	b29b      	uxth	r3, r3
 800853e:	2181      	movs	r1, #129	; 0x81
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f004 fca9 	bl	800ce98 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008552:	4619      	mov	r1, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	fbb3 f3f1 	udiv	r3, r3, r1
 800855a:	441a      	add	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800856e:	4619      	mov	r1, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	fbb3 f3f1 	udiv	r3, r3, r1
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2203      	movs	r2, #3
 800859c:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd90      	pop	{r4, r7, pc}

080085a8 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ba:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80085c8:	fb02 f303 	mul.w	r3, r2, r3
 80085cc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d4:	bf28      	it	cs
 80085d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80085da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e2:	695c      	ldr	r4, [r3, #20]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f103 010c 	add.w	r1, r3, #12
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80085f6:	4618      	mov	r0, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80085fe:	b29b      	uxth	r3, r3
 8008600:	78f8      	ldrb	r0, [r7, #3]
 8008602:	47a0      	blx	r4
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	da08      	bge.n	800861c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800860a:	78f9      	ldrb	r1, [r7, #3]
 800860c:	2303      	movs	r3, #3
 800860e:	2204      	movs	r2, #4
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fd77 	bl	8008104 <SCSI_SenseCode>

    return -1;
 8008616:	f04f 33ff 	mov.w	r3, #4294967295
 800861a:	e045      	b.n	80086a8 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008628:	4619      	mov	r1, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008630:	441a      	add	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008644:	4619      	mov	r1, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	fbb3 f3f1 	udiv	r3, r3, r1
 800864c:	1ad2      	subs	r2, r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800866a:	2b00      	cmp	r3, #0
 800866c:	d104      	bne.n	8008678 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800866e:	2100      	movs	r1, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff f97f 	bl	8007974 <MSC_BOT_SendCSW>
 8008676:	e016      	b.n	80086a6 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008684:	fb02 f303 	mul.w	r3, r2, r3
 8008688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868c:	bf28      	it	cs
 800868e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008692:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f103 020c 	add.w	r2, r3, #12
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	b29b      	uxth	r3, r3
 800869e:	2101      	movs	r1, #1
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f004 fc1c 	bl	800cede <USBD_LL_PrepareReceive>
  }

  return 0;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}

080086b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086c4:	2302      	movs	r3, #2
 80086c6:	e01a      	b.n	80086fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	79fa      	ldrb	r2, [r7, #7]
 80086f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f004 fa76 	bl	800cbe8 <USBD_LL_Init>

  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d006      	beq.n	8008728 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e001      	b.n	800872c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008728:	2302      	movs	r3, #2
 800872a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f004 faa1 	bl	800cc88 <USBD_LL_Start>

  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008770:	2302      	movs	r3, #2
 8008772:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	4611      	mov	r1, r2
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	4611      	mov	r1, r2
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fed7 	bl	800958e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087ee:	461a      	mov	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	2b02      	cmp	r3, #2
 8008802:	d016      	beq.n	8008832 <USBD_LL_SetupStage+0x6a>
 8008804:	2b02      	cmp	r3, #2
 8008806:	d81c      	bhi.n	8008842 <USBD_LL_SetupStage+0x7a>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <USBD_LL_SetupStage+0x4a>
 800880c:	2b01      	cmp	r3, #1
 800880e:	d008      	beq.n	8008822 <USBD_LL_SetupStage+0x5a>
 8008810:	e017      	b.n	8008842 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9ca 	bl	8008bb4 <USBD_StdDevReq>
      break;
 8008820:	e01a      	b.n	8008858 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa2c 	bl	8008c88 <USBD_StdItfReq>
      break;
 8008830:	e012      	b.n	8008858 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa6c 	bl	8008d18 <USBD_StdEPReq>
      break;
 8008840:	e00a      	b.n	8008858 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800884c:	b2db      	uxtb	r3, r3
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f004 fa98 	bl	800cd86 <USBD_LL_StallEP>
      break;
 8008856:	bf00      	nop
  }

  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	460b      	mov	r3, r1
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d14b      	bne.n	800890e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800887c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008884:	2b03      	cmp	r3, #3
 8008886:	d134      	bne.n	80088f2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	429a      	cmp	r2, r3
 8008892:	d919      	bls.n	80088c8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	1ad2      	subs	r2, r2, r3
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d203      	bcs.n	80088b6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	e002      	b.n	80088bc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 ff38 	bl	8009736 <USBD_CtlContinueRx>
 80088c6:	e038      	b.n	800893a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d105      	bne.n	80088ea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 ff35 	bl	800975a <USBD_CtlSendStatus>
 80088f0:	e023      	b.n	800893a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d11e      	bne.n	800893a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008904:	2100      	movs	r1, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f004 fa3d 	bl	800cd86 <USBD_LL_StallEP>
 800890c:	e015      	b.n	800893a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00d      	beq.n	8008936 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008920:	2b03      	cmp	r3, #3
 8008922:	d108      	bne.n	8008936 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	7afa      	ldrb	r2, [r7, #11]
 800892e:	4611      	mov	r1, r2
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	4798      	blx	r3
 8008934:	e001      	b.n	800893a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008936:	2302      	movs	r3, #2
 8008938:	e000      	b.n	800893c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	460b      	mov	r3, r1
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d17f      	bne.n	8008a58 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3314      	adds	r3, #20
 800895c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008964:	2b02      	cmp	r3, #2
 8008966:	d15c      	bne.n	8008a22 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	429a      	cmp	r2, r3
 8008972:	d915      	bls.n	80089a0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	1ad2      	subs	r2, r2, r3
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	b29b      	uxth	r3, r3
 8008988:	461a      	mov	r2, r3
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fec0 	bl	8009712 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008992:	2300      	movs	r3, #0
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f004 faa0 	bl	800cede <USBD_LL_PrepareReceive>
 800899e:	e04e      	b.n	8008a3e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	6912      	ldr	r2, [r2, #16]
 80089a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089ac:	fb01 f202 	mul.w	r2, r1, r2
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d11c      	bne.n	80089f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089be:	429a      	cmp	r2, r3
 80089c0:	d316      	bcc.n	80089f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d20f      	bcs.n	80089f0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 fe9c 	bl	8009712 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089e2:	2300      	movs	r3, #0
 80089e4:	2200      	movs	r2, #0
 80089e6:	2100      	movs	r1, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f004 fa78 	bl	800cede <USBD_LL_PrepareReceive>
 80089ee:	e026      	b.n	8008a3e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d105      	bne.n	8008a12 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a12:	2180      	movs	r1, #128	; 0x80
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f004 f9b6 	bl	800cd86 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 feb0 	bl	8009780 <USBD_CtlReceiveStatus>
 8008a20:	e00d      	b.n	8008a3e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d004      	beq.n	8008a36 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f004 f9a4 	bl	800cd86 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d11d      	bne.n	8008a84 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff fe81 	bl	8008750 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a56:	e015      	b.n	8008a84 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00d      	beq.n	8008a80 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d108      	bne.n	8008a80 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	7afa      	ldrb	r2, [r7, #11]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	4798      	blx	r3
 8008a7e:	e001      	b.n	8008a84 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e000      	b.n	8008a86 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f004 f90e 	bl	800ccbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2240      	movs	r2, #64	; 0x40
 8008aae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ab2:	2340      	movs	r3, #64	; 0x40
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2180      	movs	r1, #128	; 0x80
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f004 f900 	bl	800ccbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2240      	movs	r2, #64	; 0x40
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6852      	ldr	r2, [r2, #4]
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	4611      	mov	r1, r2
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
  }

  return USBD_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2204      	movs	r2, #4
 8008b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d105      	bne.n	8008b74 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d10b      	bne.n	8008baa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bca:	2b40      	cmp	r3, #64	; 0x40
 8008bcc:	d005      	beq.n	8008bda <USBD_StdDevReq+0x26>
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d84f      	bhi.n	8008c72 <USBD_StdDevReq+0xbe>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <USBD_StdDevReq+0x36>
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d14b      	bne.n	8008c72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	4798      	blx	r3
      break;
 8008be8:	e048      	b.n	8008c7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	2b09      	cmp	r3, #9
 8008bf0:	d839      	bhi.n	8008c66 <USBD_StdDevReq+0xb2>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <USBD_StdDevReq+0x44>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c49 	.word	0x08008c49
 8008bfc:	08008c5d 	.word	0x08008c5d
 8008c00:	08008c67 	.word	0x08008c67
 8008c04:	08008c53 	.word	0x08008c53
 8008c08:	08008c67 	.word	0x08008c67
 8008c0c:	08008c2b 	.word	0x08008c2b
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c67 	.word	0x08008c67
 8008c18:	08008c3f 	.word	0x08008c3f
 8008c1c:	08008c35 	.word	0x08008c35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9dc 	bl	8008fe0 <USBD_GetDescriptor>
          break;
 8008c28:	e022      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fb3f 	bl	80092b0 <USBD_SetAddress>
          break;
 8008c32:	e01d      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fb7e 	bl	8009338 <USBD_SetConfig>
          break;
 8008c3c:	e018      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc07 	bl	8009454 <USBD_GetConfig>
          break;
 8008c46:	e013      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fc37 	bl	80094be <USBD_GetStatus>
          break;
 8008c50:	e00e      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc65 	bl	8009524 <USBD_SetFeature>
          break;
 8008c5a:	e009      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fc74 	bl	800954c <USBD_ClrFeature>
          break;
 8008c64:	e004      	b.n	8008c70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fccc 	bl	8009606 <USBD_CtlError>
          break;
 8008c6e:	bf00      	nop
      }
      break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fcc6 	bl	8009606 <USBD_CtlError>
      break;
 8008c7a:	bf00      	nop
  }

  return ret;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop

08008c88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c9e:	2b40      	cmp	r3, #64	; 0x40
 8008ca0:	d005      	beq.n	8008cae <USBD_StdItfReq+0x26>
 8008ca2:	2b40      	cmp	r3, #64	; 0x40
 8008ca4:	d82e      	bhi.n	8008d04 <USBD_StdItfReq+0x7c>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <USBD_StdItfReq+0x26>
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	d12a      	bne.n	8008d04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d81d      	bhi.n	8008cf6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	889b      	ldrh	r3, [r3, #4]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d813      	bhi.n	8008cec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d110      	bne.n	8008d00 <USBD_StdItfReq+0x78>
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fd38 	bl	800975a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cea:	e009      	b.n	8008d00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fc89 	bl	8009606 <USBD_CtlError>
          break;
 8008cf4:	e004      	b.n	8008d00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fc84 	bl	8009606 <USBD_CtlError>
          break;
 8008cfe:	e000      	b.n	8008d02 <USBD_StdItfReq+0x7a>
          break;
 8008d00:	bf00      	nop
      }
      break;
 8008d02:	e004      	b.n	8008d0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fc7d 	bl	8009606 <USBD_CtlError>
      break;
 8008d0c:	bf00      	nop
  }

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	889b      	ldrh	r3, [r3, #4]
 8008d2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	d007      	beq.n	8008d48 <USBD_StdEPReq+0x30>
 8008d38:	2b40      	cmp	r3, #64	; 0x40
 8008d3a:	f200 8146 	bhi.w	8008fca <USBD_StdEPReq+0x2b2>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <USBD_StdEPReq+0x40>
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	f040 8141 	bne.w	8008fca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
      break;
 8008d56:	e13d      	b.n	8008fd4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d10a      	bne.n	8008d7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	e12d      	b.n	8008fd6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d007      	beq.n	8008d92 <USBD_StdEPReq+0x7a>
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	f300 811b 	bgt.w	8008fbe <USBD_StdEPReq+0x2a6>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d072      	beq.n	8008e72 <USBD_StdEPReq+0x15a>
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d03a      	beq.n	8008e06 <USBD_StdEPReq+0xee>
 8008d90:	e115      	b.n	8008fbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d002      	beq.n	8008da2 <USBD_StdEPReq+0x8a>
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d015      	beq.n	8008dcc <USBD_StdEPReq+0xb4>
 8008da0:	e02b      	b.n	8008dfa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00c      	beq.n	8008dc2 <USBD_StdEPReq+0xaa>
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b80      	cmp	r3, #128	; 0x80
 8008dac:	d009      	beq.n	8008dc2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f003 ffe7 	bl	800cd86 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008db8:	2180      	movs	r1, #128	; 0x80
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f003 ffe3 	bl	800cd86 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dc0:	e020      	b.n	8008e04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fc1e 	bl	8009606 <USBD_CtlError>
              break;
 8008dca:	e01b      	b.n	8008e04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	885b      	ldrh	r3, [r3, #2]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10e      	bne.n	8008df2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <USBD_StdEPReq+0xda>
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	2b80      	cmp	r3, #128	; 0x80
 8008dde:	d008      	beq.n	8008df2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	88db      	ldrh	r3, [r3, #6]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f003 ffca 	bl	800cd86 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fcb1 	bl	800975a <USBD_CtlSendStatus>

              break;
 8008df8:	e004      	b.n	8008e04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc02 	bl	8009606 <USBD_CtlError>
              break;
 8008e02:	bf00      	nop
          }
          break;
 8008e04:	e0e0      	b.n	8008fc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d002      	beq.n	8008e16 <USBD_StdEPReq+0xfe>
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d015      	beq.n	8008e40 <USBD_StdEPReq+0x128>
 8008e14:	e026      	b.n	8008e64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00c      	beq.n	8008e36 <USBD_StdEPReq+0x11e>
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b80      	cmp	r3, #128	; 0x80
 8008e20:	d009      	beq.n	8008e36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f003 ffad 	bl	800cd86 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e2c:	2180      	movs	r1, #128	; 0x80
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f003 ffa9 	bl	800cd86 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e34:	e01c      	b.n	8008e70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fbe4 	bl	8009606 <USBD_CtlError>
              break;
 8008e3e:	e017      	b.n	8008e70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	885b      	ldrh	r3, [r3, #2]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d112      	bne.n	8008e6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f003 ffb4 	bl	800cdc4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fc7c 	bl	800975a <USBD_CtlSendStatus>
              }
              break;
 8008e62:	e004      	b.n	8008e6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fbcd 	bl	8009606 <USBD_CtlError>
              break;
 8008e6c:	e000      	b.n	8008e70 <USBD_StdEPReq+0x158>
              break;
 8008e6e:	bf00      	nop
          }
          break;
 8008e70:	e0aa      	b.n	8008fc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d002      	beq.n	8008e82 <USBD_StdEPReq+0x16a>
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d032      	beq.n	8008ee6 <USBD_StdEPReq+0x1ce>
 8008e80:	e097      	b.n	8008fb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <USBD_StdEPReq+0x180>
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b80      	cmp	r3, #128	; 0x80
 8008e8c:	d004      	beq.n	8008e98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fbb8 	bl	8009606 <USBD_CtlError>
                break;
 8008e96:	e091      	b.n	8008fbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da0b      	bge.n	8008eb8 <USBD_StdEPReq+0x1a0>
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	3310      	adds	r3, #16
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	e00b      	b.n	8008ed0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	3304      	adds	r3, #4
 8008ed0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2202      	movs	r2, #2
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fbfb 	bl	80096da <USBD_CtlSendData>
              break;
 8008ee4:	e06a      	b.n	8008fbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da11      	bge.n	8008f12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	f003 020f 	and.w	r2, r3, #15
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3318      	adds	r3, #24
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d117      	bne.n	8008f38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fb7b 	bl	8009606 <USBD_CtlError>
                  break;
 8008f10:	e054      	b.n	8008fbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	f003 020f 	and.w	r2, r3, #15
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	440b      	add	r3, r1
 8008f24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d104      	bne.n	8008f38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fb68 	bl	8009606 <USBD_CtlError>
                  break;
 8008f36:	e041      	b.n	8008fbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da0b      	bge.n	8008f58 <USBD_StdEPReq+0x240>
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	3310      	adds	r3, #16
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	3304      	adds	r3, #4
 8008f56:	e00b      	b.n	8008f70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	3304      	adds	r3, #4
 8008f70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <USBD_StdEPReq+0x266>
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	2b80      	cmp	r3, #128	; 0x80
 8008f7c:	d103      	bne.n	8008f86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e00e      	b.n	8008fa4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f003 ff39 	bl	800ce02 <USBD_LL_IsStallEP>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	e002      	b.n	8008fa4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fb95 	bl	80096da <USBD_CtlSendData>
              break;
 8008fb0:	e004      	b.n	8008fbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb26 	bl	8009606 <USBD_CtlError>
              break;
 8008fba:	bf00      	nop
          }
          break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fb20 	bl	8009606 <USBD_CtlError>
          break;
 8008fc6:	bf00      	nop
      }
      break;
 8008fc8:	e004      	b.n	8008fd4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fb1a 	bl	8009606 <USBD_CtlError>
      break;
 8008fd2:	bf00      	nop
  }

  return ret;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	885b      	ldrh	r3, [r3, #2]
 8008ffa:	0a1b      	lsrs	r3, r3, #8
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	3b01      	subs	r3, #1
 8009000:	2b06      	cmp	r3, #6
 8009002:	f200 8128 	bhi.w	8009256 <USBD_GetDescriptor+0x276>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USBD_GetDescriptor+0x2c>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009029 	.word	0x08009029
 8009010:	08009041 	.word	0x08009041
 8009014:	08009081 	.word	0x08009081
 8009018:	08009257 	.word	0x08009257
 800901c:	08009257 	.word	0x08009257
 8009020:	080091f7 	.word	0x080091f7
 8009024:	08009223 	.word	0x08009223
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7c12      	ldrb	r2, [r2, #16]
 8009034:	f107 0108 	add.w	r1, r7, #8
 8009038:	4610      	mov	r0, r2
 800903a:	4798      	blx	r3
 800903c:	60f8      	str	r0, [r7, #12]
      break;
 800903e:	e112      	b.n	8009266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	7c1b      	ldrb	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10d      	bne.n	8009064 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f107 0208 	add.w	r2, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3301      	adds	r3, #1
 800905e:	2202      	movs	r2, #2
 8009060:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009062:	e100      	b.n	8009266 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	f107 0208 	add.w	r2, r7, #8
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	2202      	movs	r2, #2
 800907c:	701a      	strb	r2, [r3, #0]
      break;
 800907e:	e0f2      	b.n	8009266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	885b      	ldrh	r3, [r3, #2]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b05      	cmp	r3, #5
 8009088:	f200 80ac 	bhi.w	80091e4 <USBD_GetDescriptor+0x204>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <USBD_GetDescriptor+0xb4>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090ad 	.word	0x080090ad
 8009098:	080090e1 	.word	0x080090e1
 800909c:	08009115 	.word	0x08009115
 80090a0:	08009149 	.word	0x08009149
 80090a4:	0800917d 	.word	0x0800917d
 80090a8:	080091b1 	.word	0x080091b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	7c12      	ldrb	r2, [r2, #16]
 80090c4:	f107 0108 	add.w	r1, r7, #8
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ce:	e091      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa97 	bl	8009606 <USBD_CtlError>
            err++;
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	3301      	adds	r3, #1
 80090dc:	72fb      	strb	r3, [r7, #11]
          break;
 80090de:	e089      	b.n	80091f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009102:	e077      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa7d 	bl	8009606 <USBD_CtlError>
            err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
          break;
 8009112:	e06f      	b.n	80091f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	7c12      	ldrb	r2, [r2, #16]
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009136:	e05d      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fa63 	bl	8009606 <USBD_CtlError>
            err++;
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	3301      	adds	r3, #1
 8009144:	72fb      	strb	r3, [r7, #11]
          break;
 8009146:	e055      	b.n	80091f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7c12      	ldrb	r2, [r2, #16]
 8009160:	f107 0108 	add.w	r1, r7, #8
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916a:	e043      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa49 	bl	8009606 <USBD_CtlError>
            err++;
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	3301      	adds	r3, #1
 8009178:	72fb      	strb	r3, [r7, #11]
          break;
 800917a:	e03b      	b.n	80091f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800919e:	e029      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa2f 	bl	8009606 <USBD_CtlError>
            err++;
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	3301      	adds	r3, #1
 80091ac:	72fb      	strb	r3, [r7, #11]
          break;
 80091ae:	e021      	b.n	80091f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7c12      	ldrb	r2, [r2, #16]
 80091c8:	f107 0108 	add.w	r1, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d2:	e00f      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa15 	bl	8009606 <USBD_CtlError>
            err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
          break;
 80091e2:	e007      	b.n	80091f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa0d 	bl	8009606 <USBD_CtlError>
          err++;
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	3301      	adds	r3, #1
 80091f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80091f2:	e038      	b.n	8009266 <USBD_GetDescriptor+0x286>
 80091f4:	e037      	b.n	8009266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7c1b      	ldrb	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	f107 0208 	add.w	r2, r7, #8
 800920a:	4610      	mov	r0, r2
 800920c:	4798      	blx	r3
 800920e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009210:	e029      	b.n	8009266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f9f6 	bl	8009606 <USBD_CtlError>
        err++;
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	3301      	adds	r3, #1
 800921e:	72fb      	strb	r3, [r7, #11]
      break;
 8009220:	e021      	b.n	8009266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7c1b      	ldrb	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10d      	bne.n	8009246 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	f107 0208 	add.w	r2, r7, #8
 8009236:	4610      	mov	r0, r2
 8009238:	4798      	blx	r3
 800923a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	2207      	movs	r2, #7
 8009242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009244:	e00f      	b.n	8009266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f9dc 	bl	8009606 <USBD_CtlError>
        err++;
 800924e:	7afb      	ldrb	r3, [r7, #11]
 8009250:	3301      	adds	r3, #1
 8009252:	72fb      	strb	r3, [r7, #11]
      break;
 8009254:	e007      	b.n	8009266 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f9d4 	bl	8009606 <USBD_CtlError>
      err++;
 800925e:	7afb      	ldrb	r3, [r7, #11]
 8009260:	3301      	adds	r3, #1
 8009262:	72fb      	strb	r3, [r7, #11]
      break;
 8009264:	bf00      	nop
  }

  if (err != 0U)
 8009266:	7afb      	ldrb	r3, [r7, #11]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d11c      	bne.n	80092a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800926c:	893b      	ldrh	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d011      	beq.n	8009296 <USBD_GetDescriptor+0x2b6>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	88db      	ldrh	r3, [r3, #6]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00d      	beq.n	8009296 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	88da      	ldrh	r2, [r3, #6]
 800927e:	893b      	ldrh	r3, [r7, #8]
 8009280:	4293      	cmp	r3, r2
 8009282:	bf28      	it	cs
 8009284:	4613      	movcs	r3, r2
 8009286:	b29b      	uxth	r3, r3
 8009288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800928a:	893b      	ldrh	r3, [r7, #8]
 800928c:	461a      	mov	r2, r3
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fa22 	bl	80096da <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d104      	bne.n	80092a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa5b 	bl	800975a <USBD_CtlSendStatus>
 80092a4:	e000      	b.n	80092a8 <USBD_GetDescriptor+0x2c8>
    return;
 80092a6:	bf00      	nop
    }
  }
}
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop

080092b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	889b      	ldrh	r3, [r3, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d130      	bne.n	8009324 <USBD_SetAddress+0x74>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d12c      	bne.n	8009324 <USBD_SetAddress+0x74>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b7f      	cmp	r3, #127	; 0x7f
 80092d0:	d828      	bhi.n	8009324 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d104      	bne.n	80092f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f98b 	bl	8009606 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f0:	e01d      	b.n	800932e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7bfa      	ldrb	r2, [r7, #15]
 80092f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f003 fdab 	bl	800ce5a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa28 	bl	800975a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009318:	e009      	b.n	800932e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009322:	e004      	b.n	800932e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f96d 	bl	8009606 <USBD_CtlError>
  }
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	885b      	ldrh	r3, [r3, #2]
 8009346:	b2da      	uxtb	r2, r3
 8009348:	4b41      	ldr	r3, [pc, #260]	; (8009450 <USBD_SetConfig+0x118>)
 800934a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800934c:	4b40      	ldr	r3, [pc, #256]	; (8009450 <USBD_SetConfig+0x118>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d904      	bls.n	800935e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f955 	bl	8009606 <USBD_CtlError>
 800935c:	e075      	b.n	800944a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	2b02      	cmp	r3, #2
 8009366:	d002      	beq.n	800936e <USBD_SetConfig+0x36>
 8009368:	2b03      	cmp	r3, #3
 800936a:	d023      	beq.n	80093b4 <USBD_SetConfig+0x7c>
 800936c:	e062      	b.n	8009434 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800936e:	4b38      	ldr	r3, [pc, #224]	; (8009450 <USBD_SetConfig+0x118>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01a      	beq.n	80093ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009376:	4b36      	ldr	r3, [pc, #216]	; (8009450 <USBD_SetConfig+0x118>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2203      	movs	r2, #3
 8009384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009388:	4b31      	ldr	r3, [pc, #196]	; (8009450 <USBD_SetConfig+0x118>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff f9e8 	bl	8008764 <USBD_SetClassConfig>
 8009394:	4603      	mov	r3, r0
 8009396:	2b02      	cmp	r3, #2
 8009398:	d104      	bne.n	80093a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f932 	bl	8009606 <USBD_CtlError>
            return;
 80093a2:	e052      	b.n	800944a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f9d8 	bl	800975a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093aa:	e04e      	b.n	800944a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f9d4 	bl	800975a <USBD_CtlSendStatus>
        break;
 80093b2:	e04a      	b.n	800944a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80093b4:	4b26      	ldr	r3, [pc, #152]	; (8009450 <USBD_SetConfig+0x118>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d112      	bne.n	80093e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80093c4:	4b22      	ldr	r3, [pc, #136]	; (8009450 <USBD_SetConfig+0x118>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80093ce:	4b20      	ldr	r3, [pc, #128]	; (8009450 <USBD_SetConfig+0x118>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff f9e4 	bl	80087a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f9bd 	bl	800975a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093e0:	e033      	b.n	800944a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <USBD_SetConfig+0x118>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d01d      	beq.n	800942c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff f9d2 	bl	80087a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80093fe:	4b14      	ldr	r3, [pc, #80]	; (8009450 <USBD_SetConfig+0x118>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009408:	4b11      	ldr	r3, [pc, #68]	; (8009450 <USBD_SetConfig+0x118>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff f9a8 	bl	8008764 <USBD_SetClassConfig>
 8009414:	4603      	mov	r3, r0
 8009416:	2b02      	cmp	r3, #2
 8009418:	d104      	bne.n	8009424 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f8f2 	bl	8009606 <USBD_CtlError>
            return;
 8009422:	e012      	b.n	800944a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f998 	bl	800975a <USBD_CtlSendStatus>
        break;
 800942a:	e00e      	b.n	800944a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f994 	bl	800975a <USBD_CtlSendStatus>
        break;
 8009432:	e00a      	b.n	800944a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f8e5 	bl	8009606 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <USBD_SetConfig+0x118>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff f9ad 	bl	80087a2 <USBD_ClrClassConfig>
        break;
 8009448:	bf00      	nop
    }
  }
}
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20002288 	.word	0x20002288

08009454 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	88db      	ldrh	r3, [r3, #6]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d004      	beq.n	8009470 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8cc 	bl	8009606 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800946e:	e022      	b.n	80094b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009476:	2b02      	cmp	r3, #2
 8009478:	dc02      	bgt.n	8009480 <USBD_GetConfig+0x2c>
 800947a:	2b00      	cmp	r3, #0
 800947c:	dc03      	bgt.n	8009486 <USBD_GetConfig+0x32>
 800947e:	e015      	b.n	80094ac <USBD_GetConfig+0x58>
 8009480:	2b03      	cmp	r3, #3
 8009482:	d00b      	beq.n	800949c <USBD_GetConfig+0x48>
 8009484:	e012      	b.n	80094ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3308      	adds	r3, #8
 8009490:	2201      	movs	r2, #1
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f920 	bl	80096da <USBD_CtlSendData>
        break;
 800949a:	e00c      	b.n	80094b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3304      	adds	r3, #4
 80094a0:	2201      	movs	r2, #1
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f918 	bl	80096da <USBD_CtlSendData>
        break;
 80094aa:	e004      	b.n	80094b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f8a9 	bl	8009606 <USBD_CtlError>
        break;
 80094b4:	bf00      	nop
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ce:	3b01      	subs	r3, #1
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d81e      	bhi.n	8009512 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	88db      	ldrh	r3, [r3, #6]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d004      	beq.n	80094e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f891 	bl	8009606 <USBD_CtlError>
        break;
 80094e4:	e01a      	b.n	800951c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f043 0202 	orr.w	r2, r3, #2
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	330c      	adds	r3, #12
 8009506:	2202      	movs	r2, #2
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f8e5 	bl	80096da <USBD_CtlSendData>
      break;
 8009510:	e004      	b.n	800951c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f876 	bl	8009606 <USBD_CtlError>
      break;
 800951a:	bf00      	nop
  }
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	885b      	ldrh	r3, [r3, #2]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d106      	bne.n	8009544 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f90b 	bl	800975a <USBD_CtlSendStatus>
  }
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955c:	3b01      	subs	r3, #1
 800955e:	2b02      	cmp	r3, #2
 8009560:	d80b      	bhi.n	800957a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d10c      	bne.n	8009584 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8f1 	bl	800975a <USBD_CtlSendStatus>
      }
      break;
 8009578:	e004      	b.n	8009584 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f842 	bl	8009606 <USBD_CtlError>
      break;
 8009582:	e000      	b.n	8009586 <USBD_ClrFeature+0x3a>
      break;
 8009584:	bf00      	nop
  }
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	785a      	ldrb	r2, [r3, #1]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	3302      	adds	r3, #2
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	3303      	adds	r3, #3
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	4413      	add	r3, r2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	3304      	adds	r3, #4
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	3305      	adds	r3, #5
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	4413      	add	r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	3306      	adds	r3, #6
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	3307      	adds	r3, #7
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4413      	add	r3, r2
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	80da      	strh	r2, [r3, #6]

}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr

08009606 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f003 fbb7 	bl	800cd86 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f003 fbb3 	bl	800cd86 <USBD_LL_StallEP>
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d032      	beq.n	80096a4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f834 	bl	80096ac <USBD_GetLen>
 8009644:	4603      	mov	r3, r0
 8009646:	3301      	adds	r3, #1
 8009648:	b29b      	uxth	r3, r3
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	75fa      	strb	r2, [r7, #23]
 8009658:	461a      	mov	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4413      	add	r3, r2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	7812      	ldrb	r2, [r2, #0]
 8009662:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	75fa      	strb	r2, [r7, #23]
 800966a:	461a      	mov	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4413      	add	r3, r2
 8009670:	2203      	movs	r2, #3
 8009672:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009674:	e012      	b.n	800969c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	60fa      	str	r2, [r7, #12]
 800967c:	7dfa      	ldrb	r2, [r7, #23]
 800967e:	1c51      	adds	r1, r2, #1
 8009680:	75f9      	strb	r1, [r7, #23]
 8009682:	4611      	mov	r1, r2
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	440a      	add	r2, r1
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	75fa      	strb	r2, [r7, #23]
 8009692:	461a      	mov	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4413      	add	r3, r2
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e8      	bne.n	8009676 <USBD_GetString+0x4e>
    }
  }
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80096b8:	e005      	b.n	80096c6 <USBD_GetLen+0x1a>
  {
    len++;
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	3301      	adds	r3, #1
 80096be:	73fb      	strb	r3, [r7, #15]
    buf++;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3301      	adds	r3, #1
 80096c4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1f5      	bne.n	80096ba <USBD_GetLen+0xe>
  }

  return len;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr

080096da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	4613      	mov	r3, r2
 80096e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096f0:	88fa      	ldrh	r2, [r7, #6]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80096f6:	88fa      	ldrh	r2, [r7, #6]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096fc:	88fb      	ldrh	r3, [r7, #6]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	2100      	movs	r1, #0
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f003 fbc8 	bl	800ce98 <USBD_LL_Transmit>

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	4613      	mov	r3, r2
 800971e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009720:	88fb      	ldrh	r3, [r7, #6]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	2100      	movs	r1, #0
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f003 fbb6 	bl	800ce98 <USBD_LL_Transmit>

  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	4613      	mov	r3, r2
 8009742:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009744:	88fb      	ldrh	r3, [r7, #6]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	2100      	movs	r1, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f003 fbc7 	bl	800cede <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2204      	movs	r2, #4
 8009766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f003 fb91 	bl	800ce98 <USBD_LL_Transmit>

  return USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2205      	movs	r2, #5
 800978c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009790:	2300      	movs	r3, #0
 8009792:	2200      	movs	r2, #0
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f003 fba1 	bl	800cede <USBD_LL_PrepareReceive>

  return USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	4a08      	ldr	r2, [pc, #32]	; (80097d8 <disk_status+0x30>)
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	79fa      	ldrb	r2, [r7, #7]
 80097c0:	4905      	ldr	r1, [pc, #20]	; (80097d8 <disk_status+0x30>)
 80097c2:	440a      	add	r2, r1
 80097c4:	7a12      	ldrb	r2, [r2, #8]
 80097c6:	4610      	mov	r0, r2
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200022ac 	.word	0x200022ac

080097dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	4a0d      	ldr	r2, [pc, #52]	; (8009824 <disk_initialize+0x48>)
 80097ee:	5cd3      	ldrb	r3, [r2, r3]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d111      	bne.n	8009818 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	4a0b      	ldr	r2, [pc, #44]	; (8009824 <disk_initialize+0x48>)
 80097f8:	2101      	movs	r1, #1
 80097fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	4a09      	ldr	r2, [pc, #36]	; (8009824 <disk_initialize+0x48>)
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	79fa      	ldrb	r2, [r7, #7]
 800980a:	4906      	ldr	r1, [pc, #24]	; (8009824 <disk_initialize+0x48>)
 800980c:	440a      	add	r2, r1
 800980e:	7a12      	ldrb	r2, [r2, #8]
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	200022ac 	.word	0x200022ac

08009828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009828:	b590      	push	{r4, r7, lr}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	60b9      	str	r1, [r7, #8]
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	4a0a      	ldr	r2, [pc, #40]	; (8009864 <disk_read+0x3c>)
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	689c      	ldr	r4, [r3, #8]
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4a07      	ldr	r2, [pc, #28]	; (8009864 <disk_read+0x3c>)
 8009848:	4413      	add	r3, r2
 800984a:	7a18      	ldrb	r0, [r3, #8]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	47a0      	blx	r4
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]
  return res;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	bd90      	pop	{r4, r7, pc}
 8009862:	bf00      	nop
 8009864:	200022ac 	.word	0x200022ac

08009868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4a0a      	ldr	r2, [pc, #40]	; (80098a4 <disk_write+0x3c>)
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	68dc      	ldr	r4, [r3, #12]
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	4a07      	ldr	r2, [pc, #28]	; (80098a4 <disk_write+0x3c>)
 8009888:	4413      	add	r3, r2
 800988a:	7a18      	ldrb	r0, [r3, #8]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	47a0      	blx	r4
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]
  return res;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
}
 800989a:	4618      	mov	r0, r3
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd90      	pop	{r4, r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200022ac 	.word	0x200022ac

080098a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	603a      	str	r2, [r7, #0]
 80098b2:	71fb      	strb	r3, [r7, #7]
 80098b4:	460b      	mov	r3, r1
 80098b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <disk_ioctl+0x38>)
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	79fa      	ldrb	r2, [r7, #7]
 80098c6:	4906      	ldr	r1, [pc, #24]	; (80098e0 <disk_ioctl+0x38>)
 80098c8:	440a      	add	r2, r1
 80098ca:	7a10      	ldrb	r0, [r2, #8]
 80098cc:	79b9      	ldrb	r1, [r7, #6]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4798      	blx	r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200022ac 	.word	0x200022ac

080098e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80098f8:	e007      	b.n	800990a <mem_cpy+0x26>
		*d++ = *s++;
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	1c53      	adds	r3, r2, #1
 80098fe:	613b      	str	r3, [r7, #16]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	1c59      	adds	r1, r3, #1
 8009904:	6179      	str	r1, [r7, #20]
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	1e5a      	subs	r2, r3, #1
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f2      	bne.n	80098fa <mem_cpy+0x16>
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	bc80      	pop	{r7}
 800991e:	4770      	bx	lr

08009920 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009930:	e005      	b.n	800993e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	617a      	str	r2, [r7, #20]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	1e5a      	subs	r2, r3, #1
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1f4      	bne.n	8009932 <mem_set+0x12>
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009954:	b480      	push	{r7}
 8009956:	b089      	sub	sp, #36	; 0x24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800996c:	bf00      	nop
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	1e5a      	subs	r2, r3, #1
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00d      	beq.n	8009994 <mem_cmp+0x40>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	61fa      	str	r2, [r7, #28]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	4619      	mov	r1, r3
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	61ba      	str	r2, [r7, #24]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	1acb      	subs	r3, r1, r3
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0ec      	beq.n	800996e <mem_cmp+0x1a>
	return r;
 8009994:	697b      	ldr	r3, [r7, #20]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3724      	adds	r7, #36	; 0x24
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr

080099a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099aa:	e002      	b.n	80099b2 <chk_chr+0x12>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3301      	adds	r3, #1
 80099b0:	607b      	str	r3, [r7, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <chk_chr+0x26>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d1f2      	bne.n	80099ac <chk_chr+0xc>
	return *str;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	781b      	ldrb	r3, [r3, #0]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr

080099d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e03b      	b.n	8009a60 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80099e8:	4931      	ldr	r1, [pc, #196]	; (8009ab0 <chk_lock+0xdc>)
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	4613      	mov	r3, r2
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	440b      	add	r3, r1
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d02c      	beq.n	8009a56 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099fc:	492c      	ldr	r1, [pc, #176]	; (8009ab0 <chk_lock+0xdc>)
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4613      	mov	r3, r2
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d120      	bne.n	8009a5a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8009a18:	4925      	ldr	r1, [pc, #148]	; (8009ab0 <chk_lock+0xdc>)
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	4413      	add	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	3304      	adds	r3, #4
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a30:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d111      	bne.n	8009a5a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009a36:	491e      	ldr	r1, [pc, #120]	; (8009ab0 <chk_lock+0xdc>)
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	440b      	add	r3, r1
 8009a44:	3308      	adds	r3, #8
 8009a46:	881a      	ldrh	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d102      	bne.n	8009a5a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009a54:	e007      	b.n	8009a66 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8009a56:	2301      	movs	r3, #1
 8009a58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d9c0      	bls.n	80099e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d109      	bne.n	8009a80 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <chk_lock+0xa4>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d101      	bne.n	8009a7c <chk_lock+0xa8>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e013      	b.n	8009aa4 <chk_lock+0xd0>
 8009a7c:	2312      	movs	r3, #18
 8009a7e:	e011      	b.n	8009aa4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10b      	bne.n	8009a9e <chk_lock+0xca>
 8009a86:	490a      	ldr	r1, [pc, #40]	; (8009ab0 <chk_lock+0xdc>)
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	440b      	add	r3, r1
 8009a94:	330a      	adds	r3, #10
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9c:	d101      	bne.n	8009aa2 <chk_lock+0xce>
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	e000      	b.n	8009aa4 <chk_lock+0xd0>
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	20002294 	.word	0x20002294

08009ab4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	e002      	b.n	8009ac6 <enq_lock+0x12>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	607b      	str	r3, [r7, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d809      	bhi.n	8009ae0 <enq_lock+0x2c>
 8009acc:	490a      	ldr	r1, [pc, #40]	; (8009af8 <enq_lock+0x44>)
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ef      	bne.n	8009ac0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	bf14      	ite	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	2300      	moveq	r3, #0
 8009aea:	b2db      	uxtb	r3, r3
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bc80      	pop	{r7}
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	20002294 	.word	0x20002294

08009afc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	e02e      	b.n	8009b6a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8009b0c:	4958      	ldr	r1, [pc, #352]	; (8009c70 <inc_lock+0x174>)
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4613      	mov	r3, r2
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d11d      	bne.n	8009b64 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8009b28:	4951      	ldr	r1, [pc, #324]	; (8009c70 <inc_lock+0x174>)
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	3304      	adds	r3, #4
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d10e      	bne.n	8009b64 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8009b46:	494a      	ldr	r1, [pc, #296]	; (8009c70 <inc_lock+0x174>)
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	3308      	adds	r3, #8
 8009b56:	881a      	ldrh	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d006      	beq.n	8009b72 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d9cd      	bls.n	8009b0c <inc_lock+0x10>
 8009b70:	e000      	b.n	8009b74 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8009b72:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d148      	bne.n	8009c0c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	e002      	b.n	8009b86 <inc_lock+0x8a>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d809      	bhi.n	8009ba0 <inc_lock+0xa4>
 8009b8c:	4938      	ldr	r1, [pc, #224]	; (8009c70 <inc_lock+0x174>)
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4613      	mov	r3, r2
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1ef      	bne.n	8009b80 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d101      	bne.n	8009baa <inc_lock+0xae>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e05d      	b.n	8009c66 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb0:	6819      	ldr	r1, [r3, #0]
 8009bb2:	482f      	ldr	r0, [pc, #188]	; (8009c70 <inc_lock+0x174>)
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4403      	add	r3, r0
 8009bc0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc8:	6899      	ldr	r1, [r3, #8]
 8009bca:	4829      	ldr	r0, [pc, #164]	; (8009c70 <inc_lock+0x174>)
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4403      	add	r3, r0
 8009bd8:	3304      	adds	r3, #4
 8009bda:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be2:	88d8      	ldrh	r0, [r3, #6]
 8009be4:	4922      	ldr	r1, [pc, #136]	; (8009c70 <inc_lock+0x174>)
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4613      	mov	r3, r2
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009bf8:	491d      	ldr	r1, [pc, #116]	; (8009c70 <inc_lock+0x174>)
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	440b      	add	r3, r1
 8009c06:	330a      	adds	r3, #10
 8009c08:	2200      	movs	r2, #0
 8009c0a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00c      	beq.n	8009c2c <inc_lock+0x130>
 8009c12:	4917      	ldr	r1, [pc, #92]	; (8009c70 <inc_lock+0x174>)
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4613      	mov	r3, r2
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	4413      	add	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	440b      	add	r3, r1
 8009c20:	330a      	adds	r3, #10
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <inc_lock+0x130>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e01c      	b.n	8009c66 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <inc_lock+0x14e>
 8009c32:	490f      	ldr	r1, [pc, #60]	; (8009c70 <inc_lock+0x174>)
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4613      	mov	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	330a      	adds	r3, #10
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	b299      	uxth	r1, r3
 8009c48:	e001      	b.n	8009c4e <inc_lock+0x152>
 8009c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c4e:	4808      	ldr	r0, [pc, #32]	; (8009c70 <inc_lock+0x174>)
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4613      	mov	r3, r2
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4403      	add	r3, r0
 8009c5c:	330a      	adds	r3, #10
 8009c5e:	460a      	mov	r2, r1
 8009c60:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	4770      	bx	lr
 8009c70:	20002294 	.word	0x20002294

08009c74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e016      	b.n	8009cb0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c82:	4910      	ldr	r1, [pc, #64]	; (8009cc4 <clear_lock+0x50>)
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d108      	bne.n	8009caa <clear_lock+0x36>
 8009c98:	490a      	ldr	r1, [pc, #40]	; (8009cc4 <clear_lock+0x50>)
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	005b      	lsls	r3, r3, #1
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d9e5      	bls.n	8009c82 <clear_lock+0xe>
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20002294 	.word	0x20002294

08009cc8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cda:	791b      	ldrb	r3, [r3, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d040      	beq.n	8009d62 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	7858      	ldrb	r0, [r3, #1]
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	f7ff fdb6 	bl	8009868 <disk_write>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <sync_window+0x40>
			res = FR_DISK_ERR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	73fb      	strb	r3, [r7, #15]
 8009d06:	e02c      	b.n	8009d62 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0e:	2200      	movs	r2, #0
 8009d10:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	1ad2      	subs	r2, r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d21b      	bcs.n	8009d62 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d30:	78db      	ldrb	r3, [r3, #3]
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	e012      	b.n	8009d5c <sync_window+0x94>
					wsect += fs->fsize;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	7858      	ldrb	r0, [r3, #1]
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	f7ff fd89 	bl	8009868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	613b      	str	r3, [r7, #16]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d8e9      	bhi.n	8009d36 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d01e      	beq.n	8009dc6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ff9d 	bl	8009cc8 <sync_window>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d116      	bne.n	8009dc6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9e:	7858      	ldrb	r0, [r3, #1]
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	2301      	movs	r3, #1
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	f7ff fd3f 	bl	8009828 <disk_read>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009db0:	f04f 33ff 	mov.w	r3, #4294967295
 8009db4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	3b02      	subs	r3, #2
 8009dde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	3b02      	subs	r3, #2
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d301      	bcc.n	8009df4 <clust2sect+0x24>
 8009df0:	2300      	movs	r3, #0
 8009df2:	e00c      	b.n	8009e0e <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dfa:	789b      	ldrb	r3, [r3, #2]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	fb03 f202 	mul.w	r2, r3, r2
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0c:	4413      	add	r3, r2
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr

08009e18 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d906      	bls.n	8009e36 <get_fat+0x1e>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d302      	bcc.n	8009e3c <get_fat+0x24>
		val = 1;	/* Internal error */
 8009e36:	2301      	movs	r3, #1
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e0e4      	b.n	800a006 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	f000 8098 	beq.w	8009f80 <get_fat+0x168>
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	f300 80ce 	bgt.w	8009ff2 <get_fat+0x1da>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d002      	beq.n	8009e60 <get_fat+0x48>
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d05f      	beq.n	8009f1e <get_fat+0x106>
 8009e5e:	e0c8      	b.n	8009ff2 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e74:	6a1a      	ldr	r2, [r3, #32]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	895b      	ldrh	r3, [r3, #10]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e86:	4413      	add	r3, r2
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff ff6e 	bl	8009d6c <move_window>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f040 80b0 	bne.w	8009ff8 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	60fa      	str	r2, [r7, #12]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ea4:	8952      	ldrh	r2, [r2, #10]
 8009ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eaa:	fb01 f202 	mul.w	r2, r1, r2
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	5cd3      	ldrb	r3, [r2, r3]
 8009eb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebc:	6a1a      	ldr	r2, [r3, #32]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec4:	895b      	ldrh	r3, [r3, #10]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ece:	4413      	add	r3, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ff4a 	bl	8009d6c <move_window>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f040 808e 	bne.w	8009ffc <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee6:	895b      	ldrh	r3, [r3, #10]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ef0:	fb01 f202 	mul.w	r2, r1, r2
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	5cd3      	ldrb	r3, [r2, r3]
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	461a      	mov	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <get_fat+0xfc>
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	091b      	lsrs	r3, r3, #4
 8009f12:	e002      	b.n	8009f1a <get_fat+0x102>
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f1a:	617b      	str	r3, [r7, #20]
			break;
 8009f1c:	e073      	b.n	800a006 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f24:	6a1a      	ldr	r2, [r3, #32]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2c:	895b      	ldrh	r3, [r3, #10]
 8009f2e:	085b      	lsrs	r3, r3, #1
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	4619      	mov	r1, r3
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f3a:	4413      	add	r3, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff ff14 	bl	8009d6c <move_window>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d15a      	bne.n	800a000 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f54:	8952      	ldrh	r2, [r2, #10]
 8009f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f5a:	fb01 f202 	mul.w	r2, r1, r2
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	4413      	add	r3, r2
 8009f64:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	021b      	lsls	r3, r3, #8
 8009f6e:	b21a      	sxth	r2, r3
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b21b      	sxth	r3, r3
 8009f76:	4313      	orrs	r3, r2
 8009f78:	b21b      	sxth	r3, r3
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	617b      	str	r3, [r7, #20]
			break;
 8009f7e:	e042      	b.n	800a006 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f86:	6a1a      	ldr	r2, [r3, #32]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8e:	895b      	ldrh	r3, [r3, #10]
 8009f90:	089b      	lsrs	r3, r3, #2
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	4619      	mov	r1, r3
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f9c:	4413      	add	r3, r2
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff fee3 	bl	8009d6c <move_window>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d12b      	bne.n	800a004 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fb6:	8952      	ldrh	r2, [r2, #10]
 8009fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fbc:	fb01 f202 	mul.w	r2, r1, r2
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	3303      	adds	r3, #3
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	061a      	lsls	r2, r3, #24
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3302      	adds	r3, #2
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	041b      	lsls	r3, r3, #16
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	3201      	adds	r2, #1
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	0212      	lsls	r2, r2, #8
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	7812      	ldrb	r2, [r2, #0]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009fee:	617b      	str	r3, [r7, #20]
			break;
 8009ff0:	e009      	b.n	800a006 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]
 8009ff6:	e006      	b.n	800a006 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ff8:	bf00      	nop
 8009ffa:	e004      	b.n	800a006 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ffc:	bf00      	nop
 8009ffe:	e002      	b.n	800a006 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a000:	bf00      	nop
 800a002:	e000      	b.n	800a006 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a004:	bf00      	nop
		}
	}

	return val;
 800a006:	697b      	ldr	r3, [r7, #20]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d906      	bls.n	800a030 <put_fat+0x20>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d302      	bcc.n	800a036 <put_fat+0x26>
		res = FR_INT_ERR;
 800a030:	2302      	movs	r3, #2
 800a032:	77fb      	strb	r3, [r7, #31]
 800a034:	e13a      	b.n	800a2ac <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b03      	cmp	r3, #3
 800a040:	f000 80d0 	beq.w	800a1e4 <put_fat+0x1d4>
 800a044:	2b03      	cmp	r3, #3
 800a046:	f300 8127 	bgt.w	800a298 <put_fat+0x288>
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d003      	beq.n	800a056 <put_fat+0x46>
 800a04e:	2b02      	cmp	r3, #2
 800a050:	f000 808f 	beq.w	800a172 <put_fat+0x162>
 800a054:	e120      	b.n	800a298 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	617b      	str	r3, [r7, #20]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	085b      	lsrs	r3, r3, #1
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4413      	add	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06a:	6a1a      	ldr	r2, [r3, #32]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a072:	895b      	ldrh	r3, [r3, #10]
 800a074:	4619      	mov	r1, r3
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	fbb3 f3f1 	udiv	r3, r3, r1
 800a07c:	4413      	add	r3, r2
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff fe73 	bl	8009d6c <move_window>
 800a086:	4603      	mov	r3, r0
 800a088:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a08a:	7ffb      	ldrb	r3, [r7, #31]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f040 8106 	bne.w	800a29e <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	617a      	str	r2, [r7, #20]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a09e:	8952      	ldrh	r2, [r2, #10]
 800a0a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0a4:	fb01 f202 	mul.w	r2, r1, r2
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00d      	beq.n	800a0d6 <put_fat+0xc6>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b25b      	sxtb	r3, r3
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	b25a      	sxtb	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	b25b      	sxtb	r3, r3
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	e001      	b.n	800a0da <put_fat+0xca>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ee:	6a1a      	ldr	r2, [r3, #32]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f6:	895b      	ldrh	r3, [r3, #10]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a100:	4413      	add	r3, r2
 800a102:	4619      	mov	r1, r3
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff fe31 	bl	8009d6c <move_window>
 800a10a:	4603      	mov	r3, r0
 800a10c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a10e:	7ffb      	ldrb	r3, [r7, #31]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f040 80c6 	bne.w	800a2a2 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11c:	895b      	ldrh	r3, [r3, #10]
 800a11e:	461a      	mov	r2, r3
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	fbb3 f1f2 	udiv	r1, r3, r2
 800a126:	fb01 f202 	mul.w	r2, r1, r2
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <put_fat+0x134>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	091b      	lsrs	r3, r3, #4
 800a140:	b2db      	uxtb	r3, r3
 800a142:	e00e      	b.n	800a162 <put_fat+0x152>
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	f023 030f 	bic.w	r3, r3, #15
 800a14e:	b25a      	sxtb	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	0a1b      	lsrs	r3, r3, #8
 800a154:	b25b      	sxtb	r3, r3
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	b25b      	sxtb	r3, r3
 800a15c:	4313      	orrs	r3, r2
 800a15e:	b25b      	sxtb	r3, r3
 800a160:	b2db      	uxtb	r3, r3
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	2201      	movs	r2, #1
 800a16e:	711a      	strb	r2, [r3, #4]
			break;
 800a170:	e09c      	b.n	800a2ac <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a178:	6a1a      	ldr	r2, [r3, #32]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	895b      	ldrh	r3, [r3, #10]
 800a182:	085b      	lsrs	r3, r3, #1
 800a184:	b29b      	uxth	r3, r3
 800a186:	4619      	mov	r1, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a18e:	4413      	add	r3, r2
 800a190:	4619      	mov	r1, r3
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff fdea 	bl	8009d6c <move_window>
 800a198:	4603      	mov	r3, r0
 800a19a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a19c:	7ffb      	ldrb	r3, [r7, #31]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f040 8081 	bne.w	800a2a6 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1ae:	8952      	ldrh	r2, [r2, #10]
 800a1b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1b4:	fb01 f202 	mul.w	r2, r1, r2
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4413      	add	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	0a1b      	lsrs	r3, r3, #8
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1de:	2201      	movs	r2, #1
 800a1e0:	711a      	strb	r2, [r3, #4]
			break;
 800a1e2:	e063      	b.n	800a2ac <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ea:	6a1a      	ldr	r2, [r3, #32]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f2:	895b      	ldrh	r3, [r3, #10]
 800a1f4:	089b      	lsrs	r3, r3, #2
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a200:	4413      	add	r3, r2
 800a202:	4619      	mov	r1, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fdb1 	bl	8009d6c <move_window>
 800a20a:	4603      	mov	r3, r0
 800a20c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a20e:	7ffb      	ldrb	r3, [r7, #31]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d14a      	bne.n	800a2aa <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a21e:	8952      	ldrh	r2, [r2, #10]
 800a220:	fbb3 f1f2 	udiv	r1, r3, r2
 800a224:	fb01 f202 	mul.w	r2, r1, r2
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	3303      	adds	r3, #3
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	061a      	lsls	r2, r3, #24
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	3302      	adds	r3, #2
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	041b      	lsls	r3, r3, #16
 800a240:	4313      	orrs	r3, r2
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	3201      	adds	r2, #1
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	0212      	lsls	r2, r2, #8
 800a24a:	4313      	orrs	r3, r2
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	7812      	ldrb	r2, [r2, #0]
 800a250:	4313      	orrs	r3, r2
 800a252:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	4313      	orrs	r3, r2
 800a25a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	b29b      	uxth	r3, r3
 800a268:	0a1b      	lsrs	r3, r3, #8
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	3301      	adds	r3, #1
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	0c1a      	lsrs	r2, r3, #16
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	3302      	adds	r3, #2
 800a27c:	b2d2      	uxtb	r2, r2
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	0e1a      	lsrs	r2, r3, #24
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	3303      	adds	r3, #3
 800a288:	b2d2      	uxtb	r2, r2
 800a28a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a292:	2201      	movs	r2, #1
 800a294:	711a      	strb	r2, [r3, #4]
			break;
 800a296:	e009      	b.n	800a2ac <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800a298:	2302      	movs	r3, #2
 800a29a:	77fb      	strb	r3, [r7, #31]
 800a29c:	e006      	b.n	800a2ac <put_fat+0x29c>
			if (res != FR_OK) break;
 800a29e:	bf00      	nop
 800a2a0:	e004      	b.n	800a2ac <put_fat+0x29c>
			if (res != FR_OK) break;
 800a2a2:	bf00      	nop
 800a2a4:	e002      	b.n	800a2ac <put_fat+0x29c>
			if (res != FR_OK) break;
 800a2a6:	bf00      	nop
 800a2a8:	e000      	b.n	800a2ac <put_fat+0x29c>
			if (res != FR_OK) break;
 800a2aa:	bf00      	nop
		}
	}

	return res;
 800a2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d906      	bls.n	800a2d4 <remove_chain+0x1e>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d302      	bcc.n	800a2da <remove_chain+0x24>
		res = FR_INT_ERR;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	73fb      	strb	r3, [r7, #15]
 800a2d8:	e049      	b.n	800a36e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a2de:	e03b      	b.n	800a358 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff fd98 	bl	8009e18 <get_fat>
 800a2e8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d03b      	beq.n	800a368 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d102      	bne.n	800a2fc <remove_chain+0x46>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	73fb      	strb	r3, [r7, #15]
 800a2fa:	e038      	b.n	800a36e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d102      	bne.n	800a30a <remove_chain+0x54>
 800a304:	2301      	movs	r3, #1
 800a306:	73fb      	strb	r3, [r7, #15]
 800a308:	e031      	b.n	800a36e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a30a:	2200      	movs	r2, #0
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff fe7e 	bl	800a010 <put_fat>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d126      	bne.n	800a36c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d013      	beq.n	800a354 <remove_chain+0x9e>
				fs->free_clust++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	3301      	adds	r3, #1
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a33c:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	795b      	ldrb	r3, [r3, #5]
 800a346:	f043 0301 	orr.w	r3, r3, #1
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a352:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d3bc      	bcc.n	800a2e0 <remove_chain+0x2a>
 800a366:	e002      	b.n	800a36e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800a368:	bf00      	nop
 800a36a:	e000      	b.n	800a36e <remove_chain+0xb8>
			if (res != FR_OK) break;
 800a36c:	bf00      	nop
		}
	}

	return res;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d111      	bne.n	800a3ac <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d006      	beq.n	800a3a6 <create_chain+0x2e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d31d      	bcc.n	800a3e2 <create_chain+0x6a>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	613b      	str	r3, [r7, #16]
 800a3aa:	e01a      	b.n	800a3e2 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff fd32 	bl	8009e18 <get_fat>
 800a3b4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d801      	bhi.n	800a3c0 <create_chain+0x48>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e07f      	b.n	800a4c0 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c6:	d101      	bne.n	800a3cc <create_chain+0x54>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	e079      	b.n	800a4c0 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d201      	bcs.n	800a3de <create_chain+0x66>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	e070      	b.n	800a4c0 <create_chain+0x148>
		scl = clst;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d307      	bcc.n	800a40a <create_chain+0x92>
			ncl = 2;
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	429a      	cmp	r2, r3
 800a404:	d901      	bls.n	800a40a <create_chain+0x92>
 800a406:	2300      	movs	r3, #0
 800a408:	e05a      	b.n	800a4c0 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a40a:	6979      	ldr	r1, [r7, #20]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff fd03 	bl	8009e18 <get_fat>
 800a412:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00e      	beq.n	800a438 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d002      	beq.n	800a428 <create_chain+0xb0>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d101      	bne.n	800a42c <create_chain+0xb4>
			return cs;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	e049      	b.n	800a4c0 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	429a      	cmp	r2, r3
 800a432:	d1d8      	bne.n	800a3e6 <create_chain+0x6e>
 800a434:	2300      	movs	r3, #0
 800a436:	e043      	b.n	800a4c0 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800a438:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a43a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff fde5 	bl	800a010 <put_fat>
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d109      	bne.n	800a464 <create_chain+0xec>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7ff fdd8 	bl	800a010 <put_fat>
 800a460:	4603      	mov	r3, r0
 800a462:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d121      	bne.n	800a4ae <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a470:	461a      	mov	r2, r3
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d01c      	beq.n	800a4be <create_chain+0x146>
			fs->free_clust--;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a494:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49c:	795b      	ldrb	r3, [r3, #5]
 800a49e:	f043 0301 	orr.w	r3, r3, #1
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4aa:	715a      	strb	r2, [r3, #5]
 800a4ac:	e007      	b.n	800a4be <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d102      	bne.n	800a4ba <create_chain+0x142>
 800a4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b8:	e000      	b.n	800a4bc <create_chain+0x144>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d009      	beq.n	800a502 <dir_sdi+0x3a>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d301      	bcc.n	800a506 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800a502:	2302      	movs	r3, #2
 800a504:	e0aa      	b.n	800a65c <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d110      	bne.n	800a52e <dir_sdi+0x66>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d107      	bne.n	800a52e <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d115      	bne.n	800a560 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a540:	891b      	ldrh	r3, [r3, #8]
 800a542:	461a      	mov	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	4293      	cmp	r3, r2
 800a548:	d301      	bcc.n	800a54e <dir_sdi+0x86>
			return FR_INT_ERR;
 800a54a:	2302      	movs	r3, #2
 800a54c:	e086      	b.n	800a65c <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	e043      	b.n	800a5e8 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a56c:	895b      	ldrh	r3, [r3, #10]
 800a56e:	095b      	lsrs	r3, r3, #5
 800a570:	b29b      	uxth	r3, r3
 800a572:	461a      	mov	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a580:	789b      	ldrb	r3, [r3, #2]
 800a582:	fb02 f303 	mul.w	r3, r2, r3
 800a586:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a588:	e021      	b.n	800a5ce <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6979      	ldr	r1, [r7, #20]
 800a594:	4618      	mov	r0, r3
 800a596:	f7ff fc3f 	bl	8009e18 <get_fat>
 800a59a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a2:	d101      	bne.n	800a5a8 <dir_sdi+0xe0>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e059      	b.n	800a65c <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d909      	bls.n	800a5c2 <dir_sdi+0xfa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d301      	bcc.n	800a5c6 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e04a      	b.n	800a65c <dir_sdi+0x194>
			idx -= ic;
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d2d9      	bcs.n	800a58a <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6979      	ldr	r1, [r7, #20]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fbf5 	bl	8009dd0 <clust2sect>
 800a5e6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <dir_sdi+0x136>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e02e      	b.n	800a65c <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60a:	895b      	ldrh	r3, [r3, #10]
 800a60c:	095b      	lsrs	r3, r3, #5
 800a60e:	b29b      	uxth	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	fbb3 f2f2 	udiv	r2, r3, r2
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	4413      	add	r3, r2
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a622:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63a:	895b      	ldrh	r3, [r3, #10]
 800a63c:	095b      	lsrs	r3, r3, #5
 800a63e:	b29b      	uxth	r3, r3
 800a640:	461a      	mov	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	fbb3 f1f2 	udiv	r1, r3, r2
 800a648:	fb01 f202 	mul.w	r2, r1, r2
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	015b      	lsls	r3, r3, #5
 800a650:	4403      	add	r3, r0
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a658:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a664:	b590      	push	{r4, r7, lr}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a674:	88db      	ldrh	r3, [r3, #6]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <dir_next+0x2a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <dir_next+0x2e>
		return FR_NO_FILE;
 800a68e:	2304      	movs	r3, #4
 800a690:	e12e      	b.n	800a8f0 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a69e:	895b      	ldrh	r3, [r3, #10]
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6ac:	fb01 f202 	mul.w	r2, r1, r2
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 80fa 	bne.w	800a8ac <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6c8:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10d      	bne.n	800a6f2 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e2:	891b      	ldrh	r3, [r3, #8]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	f0c0 80df 	bcc.w	800a8ac <dir_next+0x248>
				return FR_NO_FILE;
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	e0fe      	b.n	800a8f0 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fe:	895b      	ldrh	r3, [r3, #10]
 800a700:	095b      	lsrs	r3, r3, #5
 800a702:	b29b      	uxth	r3, r3
 800a704:	461a      	mov	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	fbb3 f3f2 	udiv	r3, r3, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a712:	6812      	ldr	r2, [r2, #0]
 800a714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a718:	7892      	ldrb	r2, [r2, #2]
 800a71a:	3a01      	subs	r2, #1
 800a71c:	4013      	ands	r3, r2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f040 80c4 	bne.w	800a8ac <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f7ff fb6e 	bl	8009e18 <get_fat>
 800a73c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d801      	bhi.n	800a748 <dir_next+0xe4>
 800a744:	2302      	movs	r3, #2
 800a746:	e0d3      	b.n	800a8f0 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74e:	d101      	bne.n	800a754 <dir_next+0xf0>
 800a750:	2301      	movs	r3, #1
 800a752:	e0cd      	b.n	800a8f0 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	429a      	cmp	r2, r3
 800a766:	f0c0 808e 	bcc.w	800a886 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <dir_next+0x110>
 800a770:	2304      	movs	r3, #4
 800a772:	e0bd      	b.n	800a8f0 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7ff fdf6 	bl	800a378 <create_chain>
 800a78c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <dir_next+0x134>
 800a794:	2307      	movs	r3, #7
 800a796:	e0ab      	b.n	800a8f0 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d101      	bne.n	800a7a2 <dir_next+0x13e>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e0a6      	b.n	800a8f0 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a8:	d101      	bne.n	800a7ae <dir_next+0x14a>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e0a0      	b.n	800a8f0 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff fa86 	bl	8009cc8 <sync_window>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <dir_next+0x162>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e094      	b.n	800a8f0 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7dc:	895b      	ldrh	r3, [r3, #10]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	f7ff f89d 	bl	8009920 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f4:	681c      	ldr	r4, [r3, #0]
 800a7f6:	6979      	ldr	r1, [r7, #20]
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	f7ff fae9 	bl	8009dd0 <clust2sect>
 800a7fe:	4603      	mov	r3, r0
 800a800:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800a804:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a806:	2300      	movs	r3, #0
 800a808:	613b      	str	r3, [r7, #16]
 800a80a:	e021      	b.n	800a850 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a818:	2201      	movs	r2, #1
 800a81a:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff fa4f 	bl	8009cc8 <sync_window>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <dir_next+0x1d0>
 800a830:	2301      	movs	r3, #1
 800a832:	e05d      	b.n	800a8f0 <dir_next+0x28c>
						dp->fs->winsect++;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a840:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a842:	3201      	adds	r2, #1
 800a844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a848:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	3301      	adds	r3, #1
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85c:	789b      	ldrb	r3, [r3, #2]
 800a85e:	461a      	mov	r2, r3
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4293      	cmp	r3, r2
 800a864:	d3d2      	bcc.n	800a80c <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	1acb      	subs	r3, r1, r3
 800a880:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a884:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a88c:	461a      	mov	r2, r3
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6979      	ldr	r1, [r7, #20]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fa97 	bl	8009dd0 <clust2sect>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8aa:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b6:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ce:	895b      	ldrh	r3, [r3, #10]
 800a8d0:	095b      	lsrs	r3, r3, #5
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8dc:	fb01 f202 	mul.w	r2, r1, r2
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	015b      	lsls	r3, r3, #5
 800a8e4:	4403      	add	r3, r0
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8ec:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	371c      	adds	r7, #28
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd90      	pop	{r4, r7, pc}

0800a8f8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a902:	2100      	movs	r1, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fddf 	bl	800a4c8 <dir_sdi>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d135      	bne.n	800a980 <dir_alloc+0x88>
		n = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	4619      	mov	r1, r3
 800a92a:	4610      	mov	r0, r2
 800a92c:	f7ff fa1e 	bl	8009d6c <move_window>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d121      	bne.n	800a97e <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2be5      	cmp	r3, #229	; 0xe5
 800a946:	d006      	beq.n	800a956 <dir_alloc+0x5e>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d107      	bne.n	800a966 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	3301      	adds	r3, #1
 800a95a:	60bb      	str	r3, [r7, #8]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d102      	bne.n	800a96a <dir_alloc+0x72>
 800a964:	e00c      	b.n	800a980 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a966:	2300      	movs	r3, #0
 800a968:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a96a:	2101      	movs	r1, #1
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fe79 	bl	800a664 <dir_next>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0cd      	beq.n	800a918 <dir_alloc+0x20>
 800a97c:	e000      	b.n	800a980 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800a97e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	2b04      	cmp	r3, #4
 800a984:	d101      	bne.n	800a98a <dir_alloc+0x92>
 800a986:	2307      	movs	r3, #7
 800a988:	73fb      	strb	r3, [r7, #15]
	return res;
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	331b      	adds	r3, #27
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	021b      	lsls	r3, r3, #8
 800a9a6:	b21a      	sxth	r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	331a      	adds	r3, #26
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b21b      	sxth	r3, r3
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	b21b      	sxth	r3, r3
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d10f      	bne.n	800a9e4 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	3315      	adds	r3, #21
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	021b      	lsls	r3, r3, #8
 800a9cc:	b21a      	sxth	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	b21b      	sxth	r3, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	b21b      	sxth	r3, r3
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]

	return cl;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bc80      	pop	{r7}
 800a9ee:	4770      	bx	lr

0800a9f0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	331a      	adds	r3, #26
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	701a      	strb	r2, [r3, #0]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	0a1b      	lsrs	r3, r3, #8
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	331b      	adds	r3, #27
 800aa10:	b2d2      	uxtb	r2, r2
 800aa12:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	0c1a      	lsrs	r2, r3, #16
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3314      	adds	r3, #20
 800aa1c:	b2d2      	uxtb	r2, r2
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	0c1b      	lsrs	r3, r3, #16
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	0a1b      	lsrs	r3, r3, #8
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3315      	adds	r3, #21
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bc80      	pop	{r7}
 800aa3a:	4770      	bx	lr

0800aa3c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa44:	2100      	movs	r1, #0
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff fd3e 	bl	800a4c8 <dir_sdi>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <dir_find+0x1e>
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	e03f      	b.n	800aada <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f7ff f97d 	bl	8009d6c <move_window>
 800aa72:	4603      	mov	r3, r0
 800aa74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d12a      	bne.n	800aad2 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <dir_find+0x5c>
 800aa92:	2304      	movs	r3, #4
 800aa94:	75fb      	strb	r3, [r7, #23]
 800aa96:	e01f      	b.n	800aad8 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	330b      	adds	r3, #11
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10b      	bne.n	800aabe <dir_find+0x82>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	220b      	movs	r2, #11
 800aab0:	4619      	mov	r1, r3
 800aab2:	6938      	ldr	r0, [r7, #16]
 800aab4:	f7fe ff4e 	bl	8009954 <mem_cmp>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800aabe:	2100      	movs	r1, #0
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fdcf 	bl	800a664 <dir_next>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0c4      	beq.n	800aa5a <dir_find+0x1e>
 800aad0:	e002      	b.n	800aad8 <dir_find+0x9c>
		if (res != FR_OK) break;
 800aad2:	bf00      	nop
 800aad4:	e000      	b.n	800aad8 <dir_find+0x9c>
			break;
 800aad6:	bf00      	nop

	return res;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aaea:	2101      	movs	r1, #1
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ff03 	bl	800a8f8 <dir_alloc>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d12d      	bne.n	800ab58 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7ff f92c 	bl	8009d6c <move_window>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d11c      	bne.n	800ab58 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	2220      	movs	r2, #32
 800ab28:	2100      	movs	r1, #0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fef8 	bl	8009920 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab36:	6958      	ldr	r0, [r3, #20]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	220b      	movs	r2, #11
 800ab42:	4619      	mov	r1, r3
 800ab44:	f7fe fece 	bl	80098e4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab54:	2201      	movs	r2, #1
 800ab56:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	e002      	b.n	800ab7c <create_name+0x18>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b2f      	cmp	r3, #47	; 0x2f
 800ab82:	d0f8      	beq.n	800ab76 <create_name+0x12>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b5c      	cmp	r3, #92	; 0x5c
 800ab8a:	d0f4      	beq.n	800ab76 <create_name+0x12>
	sfn = dp->fn;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab96:	220b      	movs	r2, #11
 800ab98:	2120      	movs	r1, #32
 800ab9a:	68b8      	ldr	r0, [r7, #8]
 800ab9c:	f7fe fec0 	bl	8009920 <mem_set>
	si = i = b = 0; ni = 8;
 800aba0:	2300      	movs	r3, #0
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	2300      	movs	r3, #0
 800aba6:	613b      	str	r3, [r7, #16]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	2308      	movs	r3, #8
 800abae:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	617a      	str	r2, [r7, #20]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800abbe:	7fbb      	ldrb	r3, [r7, #30]
 800abc0:	2b20      	cmp	r3, #32
 800abc2:	d953      	bls.n	800ac6c <create_name+0x108>
 800abc4:	7fbb      	ldrb	r3, [r7, #30]
 800abc6:	2b2f      	cmp	r3, #47	; 0x2f
 800abc8:	d050      	beq.n	800ac6c <create_name+0x108>
 800abca:	7fbb      	ldrb	r3, [r7, #30]
 800abcc:	2b5c      	cmp	r3, #92	; 0x5c
 800abce:	d04d      	beq.n	800ac6c <create_name+0x108>
		if (c == '.' || i >= ni) {
 800abd0:	7fbb      	ldrb	r3, [r7, #30]
 800abd2:	2b2e      	cmp	r3, #46	; 0x2e
 800abd4:	d003      	beq.n	800abde <create_name+0x7a>
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d30f      	bcc.n	800abfe <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	2b08      	cmp	r3, #8
 800abe2:	d102      	bne.n	800abea <create_name+0x86>
 800abe4:	7fbb      	ldrb	r3, [r7, #30]
 800abe6:	2b2e      	cmp	r3, #46	; 0x2e
 800abe8:	d001      	beq.n	800abee <create_name+0x8a>
 800abea:	2306      	movs	r3, #6
 800abec:	e073      	b.n	800acd6 <create_name+0x172>
			i = 8; ni = 11;
 800abee:	2308      	movs	r3, #8
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	230b      	movs	r3, #11
 800abf4:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800abf6:	7ffb      	ldrb	r3, [r7, #31]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	77fb      	strb	r3, [r7, #31]
 800abfc:	e035      	b.n	800ac6a <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800abfe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	da08      	bge.n	800ac18 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 800ac06:	7ffb      	ldrb	r3, [r7, #31]
 800ac08:	f043 0303 	orr.w	r3, r3, #3
 800ac0c:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ac0e:	7fbb      	ldrb	r3, [r7, #30]
 800ac10:	3b80      	subs	r3, #128	; 0x80
 800ac12:	4a33      	ldr	r2, [pc, #204]	; (800ace0 <create_name+0x17c>)
 800ac14:	5cd3      	ldrb	r3, [r2, r3]
 800ac16:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800ac18:	7fbb      	ldrb	r3, [r7, #30]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4831      	ldr	r0, [pc, #196]	; (800ace4 <create_name+0x180>)
 800ac1e:	f7fe febf 	bl	80099a0 <chk_chr>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <create_name+0xc8>
				return FR_INVALID_NAME;
 800ac28:	2306      	movs	r3, #6
 800ac2a:	e054      	b.n	800acd6 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800ac2c:	7fbb      	ldrb	r3, [r7, #30]
 800ac2e:	2b40      	cmp	r3, #64	; 0x40
 800ac30:	d907      	bls.n	800ac42 <create_name+0xde>
 800ac32:	7fbb      	ldrb	r3, [r7, #30]
 800ac34:	2b5a      	cmp	r3, #90	; 0x5a
 800ac36:	d804      	bhi.n	800ac42 <create_name+0xde>
				b |= 2;
 800ac38:	7ffb      	ldrb	r3, [r7, #31]
 800ac3a:	f043 0302 	orr.w	r3, r3, #2
 800ac3e:	77fb      	strb	r3, [r7, #31]
 800ac40:	e00c      	b.n	800ac5c <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800ac42:	7fbb      	ldrb	r3, [r7, #30]
 800ac44:	2b60      	cmp	r3, #96	; 0x60
 800ac46:	d909      	bls.n	800ac5c <create_name+0xf8>
 800ac48:	7fbb      	ldrb	r3, [r7, #30]
 800ac4a:	2b7a      	cmp	r3, #122	; 0x7a
 800ac4c:	d806      	bhi.n	800ac5c <create_name+0xf8>
					b |= 1; c -= 0x20;
 800ac4e:	7ffb      	ldrb	r3, [r7, #31]
 800ac50:	f043 0301 	orr.w	r3, r3, #1
 800ac54:	77fb      	strb	r3, [r7, #31]
 800ac56:	7fbb      	ldrb	r3, [r7, #30]
 800ac58:	3b20      	subs	r3, #32
 800ac5a:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	613a      	str	r2, [r7, #16]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4413      	add	r3, r2
 800ac66:	7fba      	ldrb	r2, [r7, #30]
 800ac68:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac6a:	e7a1      	b.n	800abb0 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	441a      	add	r2, r3
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ac76:	7fbb      	ldrb	r3, [r7, #30]
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d801      	bhi.n	800ac80 <create_name+0x11c>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	e000      	b.n	800ac82 <create_name+0x11e>
 800ac80:	2300      	movs	r3, #0
 800ac82:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <create_name+0x12a>
 800ac8a:	2306      	movs	r3, #6
 800ac8c:	e023      	b.n	800acd6 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2be5      	cmp	r3, #229	; 0xe5
 800ac94:	d102      	bne.n	800ac9c <create_name+0x138>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2205      	movs	r2, #5
 800ac9a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	2b08      	cmp	r3, #8
 800aca0:	d102      	bne.n	800aca8 <create_name+0x144>
 800aca2:	7ffb      	ldrb	r3, [r7, #31]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800aca8:	7ffb      	ldrb	r3, [r7, #31]
 800acaa:	f003 0303 	and.w	r3, r3, #3
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d103      	bne.n	800acba <create_name+0x156>
 800acb2:	7fbb      	ldrb	r3, [r7, #30]
 800acb4:	f043 0310 	orr.w	r3, r3, #16
 800acb8:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800acba:	7ffb      	ldrb	r3, [r7, #31]
 800acbc:	f003 030c 	and.w	r3, r3, #12
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d103      	bne.n	800accc <create_name+0x168>
 800acc4:	7fbb      	ldrb	r3, [r7, #30]
 800acc6:	f043 0308 	orr.w	r3, r3, #8
 800acca:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	330b      	adds	r3, #11
 800acd0:	7fba      	ldrb	r2, [r7, #30]
 800acd2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800acd4:	2300      	movs	r3, #0
#endif
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	0800d138 	.word	0x0800d138
 800ace4:	0800d080 	.word	0x0800d080

0800ace8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	2b2f      	cmp	r3, #47	; 0x2f
 800acf8:	d003      	beq.n	800ad02 <follow_path+0x1a>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b5c      	cmp	r3, #92	; 0x5c
 800ad00:	d102      	bne.n	800ad08 <follow_path+0x20>
		path++;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	3301      	adds	r3, #1
 800ad06:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad0e:	461a      	mov	r2, r3
 800ad10:	2300      	movs	r3, #0
 800ad12:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b1f      	cmp	r3, #31
 800ad1a:	d80c      	bhi.n	800ad36 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7ff fbd2 	bl	800a4c8 <dir_sdi>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2e:	461a      	mov	r2, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	6153      	str	r3, [r2, #20]
 800ad34:	e049      	b.n	800adca <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad36:	463b      	mov	r3, r7
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ff12 	bl	800ab64 <create_name>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d13a      	bne.n	800adc0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fe76 	bl	800aa3c <dir_find>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	7adb      	ldrb	r3, [r3, #11]
 800ad5e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d12b      	bne.n	800adc4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d126      	bne.n	800adc4 <follow_path+0xdc>
 800ad76:	2305      	movs	r3, #5
 800ad78:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800ad7a:	e023      	b.n	800adc4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	f003 0304 	and.w	r3, r3, #4
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d120      	bne.n	800adc8 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	330b      	adds	r3, #11
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	f003 0310 	and.w	r3, r3, #16
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d102      	bne.n	800ada4 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800ad9e:	2305      	movs	r3, #5
 800ada0:	73fb      	strb	r3, [r7, #15]
 800ada2:	e012      	b.n	800adca <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7ff fdf0 	bl	800a994 <ld_clust>
 800adb4:	4602      	mov	r2, r0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adbc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800adbe:	e7ba      	b.n	800ad36 <follow_path+0x4e>
			if (res != FR_OK) break;
 800adc0:	bf00      	nop
 800adc2:	e002      	b.n	800adca <follow_path+0xe2>
				break;
 800adc4:	bf00      	nop
 800adc6:	e000      	b.n	800adca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adc8:	bf00      	nop
		}
	}

	return res;
 800adca:	7bfb      	ldrb	r3, [r7, #15]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d031      	beq.n	800ae4e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	617b      	str	r3, [r7, #20]
 800adf0:	e002      	b.n	800adf8 <get_ldnumber+0x24>
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	3301      	adds	r3, #1
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	d903      	bls.n	800ae08 <get_ldnumber+0x34>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b3a      	cmp	r3, #58	; 0x3a
 800ae06:	d1f4      	bne.n	800adf2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b3a      	cmp	r3, #58	; 0x3a
 800ae0e:	d11c      	bne.n	800ae4a <get_ldnumber+0x76>
			tp = *path;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	60fa      	str	r2, [r7, #12]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	3b30      	subs	r3, #48	; 0x30
 800ae20:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d80e      	bhi.n	800ae46 <get_ldnumber+0x72>
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d10a      	bne.n	800ae46 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d107      	bne.n	800ae46 <get_ldnumber+0x72>
					vol = (int)i;
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	e002      	b.n	800ae50 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae4e:	693b      	ldr	r3, [r7, #16]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	371c      	adds	r7, #28
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bc80      	pop	{r7}
 800ae58:	4770      	bx	lr
	...

0800ae5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	711a      	strb	r2, [r3, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae76:	461a      	mov	r2, r3
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7fe ff73 	bl	8009d6c <move_window>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <check_fs+0x34>
		return 3;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e04a      	b.n	800af26 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae96:	3301      	adds	r3, #1
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	021b      	lsls	r3, r3, #8
 800ae9c:	b21a      	sxth	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800aea4:	b21b      	sxth	r3, r3
 800aea6:	4313      	orrs	r3, r2
 800aea8:	b21b      	sxth	r3, r3
 800aeaa:	4a21      	ldr	r2, [pc, #132]	; (800af30 <check_fs+0xd4>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d001      	beq.n	800aeb4 <check_fs+0x58>
		return 2;
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e038      	b.n	800af26 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3336      	adds	r3, #54	; 0x36
 800aeb8:	3303      	adds	r3, #3
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	061a      	lsls	r2, r3, #24
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3336      	adds	r3, #54	; 0x36
 800aec2:	3302      	adds	r3, #2
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	4313      	orrs	r3, r2
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	3236      	adds	r2, #54	; 0x36
 800aece:	3201      	adds	r2, #1
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	0212      	lsls	r2, r2, #8
 800aed4:	4313      	orrs	r3, r2
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800aedc:	4313      	orrs	r3, r2
 800aede:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aee2:	4a14      	ldr	r2, [pc, #80]	; (800af34 <check_fs+0xd8>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d101      	bne.n	800aeec <check_fs+0x90>
		return 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	e01c      	b.n	800af26 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3352      	adds	r3, #82	; 0x52
 800aef0:	3303      	adds	r3, #3
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	061a      	lsls	r2, r3, #24
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3352      	adds	r3, #82	; 0x52
 800aefa:	3302      	adds	r3, #2
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	041b      	lsls	r3, r3, #16
 800af00:	4313      	orrs	r3, r2
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	3252      	adds	r2, #82	; 0x52
 800af06:	3201      	adds	r2, #1
 800af08:	7812      	ldrb	r2, [r2, #0]
 800af0a:	0212      	lsls	r2, r2, #8
 800af0c:	4313      	orrs	r3, r2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800af14:	4313      	orrs	r3, r2
 800af16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af1a:	4a06      	ldr	r2, [pc, #24]	; (800af34 <check_fs+0xd8>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d101      	bne.n	800af24 <check_fs+0xc8>
		return 0;
 800af20:	2300      	movs	r3, #0
 800af22:	e000      	b.n	800af26 <check_fs+0xca>

	return 1;
 800af24:	2301      	movs	r3, #1
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	ffffaa55 	.word	0xffffaa55
 800af34:	00544146 	.word	0x00544146

0800af38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b096      	sub	sp, #88	; 0x58
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	4613      	mov	r3, r2
 800af44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af4c:	68b8      	ldr	r0, [r7, #8]
 800af4e:	f7ff ff41 	bl	800add4 <get_ldnumber>
 800af52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af56:	2b00      	cmp	r3, #0
 800af58:	da01      	bge.n	800af5e <find_volume+0x26>
 800af5a:	230b      	movs	r3, #11
 800af5c:	e311      	b.n	800b582 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af5e:	4a98      	ldr	r2, [pc, #608]	; (800b1c0 <find_volume+0x288>)
 800af60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <find_volume+0x3a>
 800af6e:	230c      	movs	r3, #12
 800af70:	e307      	b.n	800b582 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af76:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800af78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01c      	beq.n	800afbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8a:	785b      	ldrb	r3, [r3, #1]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe fc0b 	bl	80097a8 <disk_status>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10c      	bne.n	800afbe <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d007      	beq.n	800afba <find_volume+0x82>
 800afaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afae:	f003 0304 	and.w	r3, r3, #4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800afb6:	230a      	movs	r3, #10
 800afb8:	e2e3      	b.n	800b582 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800afba:	2300      	movs	r3, #0
 800afbc:	e2e1      	b.n	800b582 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc4:	2200      	movs	r2, #0
 800afc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fe fbfd 	bl	80097dc <disk_initialize>
 800afe2:	4603      	mov	r3, r0
 800afe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800afe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aff4:	2303      	movs	r3, #3
 800aff6:	e2c4      	b.n	800b582 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <find_volume+0xd6>
 800affe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b002:	f003 0304 	and.w	r3, r3, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800b00a:	230a      	movs	r3, #10
 800b00c:	e2b9      	b.n	800b582 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b014:	7858      	ldrb	r0, [r3, #1]
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b01c:	330a      	adds	r3, #10
 800b01e:	461a      	mov	r2, r3
 800b020:	2102      	movs	r1, #2
 800b022:	f7fe fc41 	bl	80098a8 <disk_ioctl>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10d      	bne.n	800b048 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b032:	895b      	ldrh	r3, [r3, #10]
 800b034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b038:	d306      	bcc.n	800b048 <find_volume+0x110>
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b040:	895b      	ldrh	r3, [r3, #10]
 800b042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b046:	d901      	bls.n	800b04c <find_volume+0x114>
 800b048:	2301      	movs	r3, #1
 800b04a:	e29a      	b.n	800b582 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b050:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b052:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b054:	f7ff ff02 	bl	800ae5c <check_fs>
 800b058:	4603      	mov	r3, r0
 800b05a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b05e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b062:	2b01      	cmp	r3, #1
 800b064:	d153      	bne.n	800b10e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b066:	2300      	movs	r3, #0
 800b068:	643b      	str	r3, [r7, #64]	; 0x40
 800b06a:	e028      	b.n	800b0be <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b070:	011b      	lsls	r3, r3, #4
 800b072:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b076:	4413      	add	r3, r2
 800b078:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	3304      	adds	r3, #4
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d012      	beq.n	800b0aa <find_volume+0x172>
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	330b      	adds	r3, #11
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	061a      	lsls	r2, r3, #24
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	330a      	adds	r3, #10
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	041b      	lsls	r3, r3, #16
 800b094:	4313      	orrs	r3, r2
 800b096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b098:	3209      	adds	r2, #9
 800b09a:	7812      	ldrb	r2, [r2, #0]
 800b09c:	0212      	lsls	r2, r2, #8
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0a2:	3208      	adds	r2, #8
 800b0a4:	7812      	ldrb	r2, [r2, #0]
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	e000      	b.n	800b0ac <find_volume+0x174>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	3358      	adds	r3, #88	; 0x58
 800b0b2:	443b      	add	r3, r7
 800b0b4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d9d3      	bls.n	800b06c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <find_volume+0x19c>
 800b0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	3358      	adds	r3, #88	; 0x58
 800b0da:	443b      	add	r3, r7
 800b0dc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0e0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <find_volume+0x1bc>
 800b0e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ec:	f7ff feb6 	bl	800ae5c <check_fs>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	e000      	b.n	800b0f6 <find_volume+0x1be>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b0fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <find_volume+0x1d6>
 800b102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b104:	3301      	adds	r3, #1
 800b106:	643b      	str	r3, [r7, #64]	; 0x40
 800b108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d9e2      	bls.n	800b0d4 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b10e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b112:	2b03      	cmp	r3, #3
 800b114:	d101      	bne.n	800b11a <find_volume+0x1e2>
 800b116:	2301      	movs	r3, #1
 800b118:	e233      	b.n	800b582 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b11a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <find_volume+0x1ee>
 800b122:	230d      	movs	r3, #13
 800b124:	e22d      	b.n	800b582 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	7b1b      	ldrb	r3, [r3, #12]
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	b21a      	sxth	r2, r3
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	7adb      	ldrb	r3, [r3, #11]
 800b132:	b21b      	sxth	r3, r3
 800b134:	4313      	orrs	r3, r2
 800b136:	b21a      	sxth	r2, r3
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b13e:	895b      	ldrh	r3, [r3, #10]
 800b140:	b21b      	sxth	r3, r3
 800b142:	429a      	cmp	r2, r3
 800b144:	d001      	beq.n	800b14a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800b146:	230d      	movs	r3, #13
 800b148:	e21b      	b.n	800b582 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	7ddb      	ldrb	r3, [r3, #23]
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	b21a      	sxth	r2, r3
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	7d9b      	ldrb	r3, [r3, #22]
 800b156:	b21b      	sxth	r3, r3
 800b158:	4313      	orrs	r3, r2
 800b15a:	b21b      	sxth	r3, r3
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d112      	bne.n	800b18c <find_volume+0x254>
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b16c:	061a      	lsls	r2, r3, #24
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b174:	041b      	lsls	r3, r3, #16
 800b176:	4313      	orrs	r3, r2
 800b178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b17a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b17e:	0212      	lsls	r2, r2, #8
 800b180:	4313      	orrs	r3, r2
 800b182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b184:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b188:	4313      	orrs	r3, r2
 800b18a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b192:	461a      	mov	r2, r3
 800b194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b196:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	7c1a      	ldrb	r2, [r3, #16]
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1a2:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1aa:	78db      	ldrb	r3, [r3, #3]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d009      	beq.n	800b1c4 <find_volume+0x28c>
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b6:	78db      	ldrb	r3, [r3, #3]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d003      	beq.n	800b1c4 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800b1bc:	230d      	movs	r3, #13
 800b1be:	e1e0      	b.n	800b582 <find_volume+0x64a>
 800b1c0:	2000228c 	.word	0x2000228c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ca:	78db      	ldrb	r3, [r3, #3]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d0:	fb02 f303 	mul.w	r3, r2, r3
 800b1d4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	7b5a      	ldrb	r2, [r3, #13]
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e8:	789b      	ldrb	r3, [r3, #2]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00c      	beq.n	800b208 <find_volume+0x2d0>
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f4:	789b      	ldrb	r3, [r3, #2]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fe:	789b      	ldrb	r3, [r3, #2]
 800b200:	3b01      	subs	r3, #1
 800b202:	4013      	ands	r3, r2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800b208:	230d      	movs	r3, #13
 800b20a:	e1ba      	b.n	800b582 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20e:	7c9b      	ldrb	r3, [r3, #18]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	b21a      	sxth	r2, r3
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	7c5b      	ldrb	r3, [r3, #17]
 800b218:	b21b      	sxth	r3, r3
 800b21a:	4313      	orrs	r3, r2
 800b21c:	b21b      	sxth	r3, r3
 800b21e:	b29a      	uxth	r2, r3
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b226:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b22e:	891b      	ldrh	r3, [r3, #8]
 800b230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b236:	8952      	ldrh	r2, [r2, #10]
 800b238:	0952      	lsrs	r2, r2, #5
 800b23a:	b292      	uxth	r2, r2
 800b23c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b240:	fb01 f202 	mul.w	r2, r1, r2
 800b244:	1a9b      	subs	r3, r3, r2
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800b24c:	230d      	movs	r3, #13
 800b24e:	e198      	b.n	800b582 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	7d1b      	ldrb	r3, [r3, #20]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	b21a      	sxth	r2, r3
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	7cdb      	ldrb	r3, [r3, #19]
 800b25c:	b21b      	sxth	r3, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	b21b      	sxth	r3, r3
 800b262:	b29b      	uxth	r3, r3
 800b264:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d112      	bne.n	800b292 <find_volume+0x35a>
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b272:	061a      	lsls	r2, r3, #24
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b27a:	041b      	lsls	r3, r3, #16
 800b27c:	4313      	orrs	r3, r2
 800b27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b280:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b284:	0212      	lsls	r2, r2, #8
 800b286:	4313      	orrs	r3, r2
 800b288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b28e:	4313      	orrs	r3, r2
 800b290:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	7bdb      	ldrb	r3, [r3, #15]
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	b21a      	sxth	r2, r3
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	7b9b      	ldrb	r3, [r3, #14]
 800b29e:	b21b      	sxth	r3, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	b21b      	sxth	r3, r3
 800b2a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b2a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <find_volume+0x378>
 800b2ac:	230d      	movs	r3, #13
 800b2ae:	e168      	b.n	800b582 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b2b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b4:	4413      	add	r3, r2
 800b2b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b2bc:	8911      	ldrh	r1, [r2, #8]
 800b2be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b2c4:	8952      	ldrh	r2, [r2, #10]
 800b2c6:	0952      	lsrs	r2, r2, #5
 800b2c8:	b292      	uxth	r2, r2
 800b2ca:	fbb1 f2f2 	udiv	r2, r1, r2
 800b2ce:	b292      	uxth	r2, r2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d201      	bcs.n	800b2e0 <find_volume+0x3a8>
 800b2dc:	230d      	movs	r3, #13
 800b2de:	e150      	b.n	800b582 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b2e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b2ec:	7892      	ldrb	r2, [r2, #2]
 800b2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <find_volume+0x3c6>
 800b2fa:	230d      	movs	r3, #13
 800b2fc:	e141      	b.n	800b582 <find_volume+0x64a>
	fmt = FS_FAT12;
 800b2fe:	2301      	movs	r3, #1
 800b300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d902      	bls.n	800b314 <find_volume+0x3dc>
 800b30e:	2302      	movs	r3, #2
 800b310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d902      	bls.n	800b324 <find_volume+0x3ec>
 800b31e:	2303      	movs	r3, #3
 800b320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	3302      	adds	r3, #2
 800b328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b32e:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b336:	461a      	mov	r2, r3
 800b338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b33a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b33c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b340:	4413      	add	r3, r2
 800b342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b344:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b348:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800b34a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	4413      	add	r3, r2
 800b350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b356:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800b358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d124      	bne.n	800b3aa <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b366:	891b      	ldrh	r3, [r3, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <find_volume+0x438>
 800b36c:	230d      	movs	r3, #13
 800b36e:	e108      	b.n	800b582 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b376:	061a      	lsls	r2, r3, #24
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b37e:	041b      	lsls	r3, r3, #16
 800b380:	4313      	orrs	r3, r2
 800b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b384:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b388:	0212      	lsls	r2, r2, #8
 800b38a:	4313      	orrs	r3, r2
 800b38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b38e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b392:	4313      	orrs	r3, r2
 800b394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b39a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a8:	e02b      	b.n	800b402 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b0:	891b      	ldrh	r3, [r3, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <find_volume+0x482>
 800b3b6:	230d      	movs	r3, #13
 800b3b8:	e0e3      	b.n	800b582 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c0:	6a1a      	ldr	r2, [r3, #32]
 800b3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c4:	4413      	add	r3, r2
 800b3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b3cc:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d105      	bne.n	800b3e2 <find_volume+0x4aa>
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	e00e      	b.n	800b400 <find_volume+0x4c8>
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3e8:	695a      	ldr	r2, [r3, #20]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	085a      	lsrs	r2, r3, #1
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b400:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b408:	699a      	ldr	r2, [r3, #24]
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b410:	895b      	ldrh	r3, [r3, #10]
 800b412:	4619      	mov	r1, r3
 800b414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b416:	440b      	add	r3, r1
 800b418:	3b01      	subs	r3, #1
 800b41a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b41c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800b420:	8949      	ldrh	r1, [r1, #10]
 800b422:	fbb3 f3f1 	udiv	r3, r3, r1
 800b426:	429a      	cmp	r2, r3
 800b428:	d201      	bcs.n	800b42e <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800b42a:	230d      	movs	r3, #13
 800b42c:	e0a9      	b.n	800b582 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b434:	461a      	mov	r2, r3
 800b436:	f04f 33ff 	mov.w	r3, #4294967295
 800b43a:	6113      	str	r3, [r2, #16]
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b44a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b452:	2280      	movs	r2, #128	; 0x80
 800b454:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d17a      	bne.n	800b554 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	b21a      	sxth	r2, r3
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b46e:	b21b      	sxth	r3, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	b21b      	sxth	r3, r3
 800b474:	2b01      	cmp	r3, #1
 800b476:	d16d      	bne.n	800b554 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47a:	3301      	adds	r3, #1
 800b47c:	4619      	mov	r1, r3
 800b47e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b480:	f7fe fc74 	bl	8009d6c <move_window>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d164      	bne.n	800b554 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b490:	2200      	movs	r2, #0
 800b492:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b49a:	021b      	lsls	r3, r3, #8
 800b49c:	b21a      	sxth	r2, r3
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b4a4:	b21b      	sxth	r3, r3
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	b21b      	sxth	r3, r3
 800b4aa:	4a38      	ldr	r2, [pc, #224]	; (800b58c <find_volume+0x654>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d151      	bne.n	800b554 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	78db      	ldrb	r3, [r3, #3]
 800b4b4:	061a      	lsls	r2, r3, #24
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b8:	789b      	ldrb	r3, [r3, #2]
 800b4ba:	041b      	lsls	r3, r3, #16
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4c0:	7852      	ldrb	r2, [r2, #1]
 800b4c2:	0212      	lsls	r2, r2, #8
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	4a30      	ldr	r2, [pc, #192]	; (800b590 <find_volume+0x658>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d140      	bne.n	800b554 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b4d8:	061a      	lsls	r2, r3, #24
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b4e0:	041b      	lsls	r3, r3, #16
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b4ea:	0212      	lsls	r2, r2, #8
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4f0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	4a27      	ldr	r2, [pc, #156]	; (800b594 <find_volume+0x65c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d12b      	bne.n	800b554 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b502:	061a      	lsls	r2, r3, #24
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b50a:	041b      	lsls	r3, r3, #16
 800b50c:	4313      	orrs	r3, r2
 800b50e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b510:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b514:	0212      	lsls	r2, r2, #8
 800b516:	4313      	orrs	r3, r2
 800b518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b51a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b51e:	4313      	orrs	r3, r2
 800b520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b526:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b52e:	061a      	lsls	r2, r3, #24
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b536:	041b      	lsls	r3, r3, #16
 800b538:	4313      	orrs	r3, r2
 800b53a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b53c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b540:	0212      	lsls	r2, r2, #8
 800b542:	4313      	orrs	r3, r2
 800b544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b546:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b54a:	4313      	orrs	r3, r2
 800b54c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b54e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b552:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b55a:	461a      	mov	r2, r3
 800b55c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b560:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800b562:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <find_volume+0x660>)
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	3301      	adds	r3, #1
 800b568:	b29a      	uxth	r2, r3
 800b56a:	4b0b      	ldr	r3, [pc, #44]	; (800b598 <find_volume+0x660>)
 800b56c:	801a      	strh	r2, [r3, #0]
 800b56e:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <find_volume+0x660>)
 800b570:	881a      	ldrh	r2, [r3, #0]
 800b572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b578:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b57a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b57c:	f7fe fb7a 	bl	8009c74 <clear_lock>
#endif

	return FR_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3758      	adds	r7, #88	; 0x58
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	ffffaa55 	.word	0xffffaa55
 800b590:	41615252 	.word	0x41615252
 800b594:	61417272 	.word	0x61417272
 800b598:	20002290 	.word	0x20002290

0800b59c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b5ae:	f107 0310 	add.w	r3, r7, #16
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fc0e 	bl	800add4 <get_ldnumber>
 800b5b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	da01      	bge.n	800b5c4 <f_mount+0x28>
 800b5c0:	230b      	movs	r3, #11
 800b5c2:	e02f      	b.n	800b624 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b5c4:	4a19      	ldr	r2, [pc, #100]	; (800b62c <f_mount+0x90>)
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d007      	beq.n	800b5e4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800b5d4:	69b8      	ldr	r0, [r7, #24]
 800b5d6:	f7fe fb4d 	bl	8009c74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d004      	beq.n	800b5f4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	490d      	ldr	r1, [pc, #52]	; (800b62c <f_mount+0x90>)
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <f_mount+0x6e>
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d001      	beq.n	800b60e <f_mount+0x72>
 800b60a:	2300      	movs	r3, #0
 800b60c:	e00a      	b.n	800b624 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b60e:	f107 0108 	add.w	r1, r7, #8
 800b612:	f107 030c 	add.w	r3, r7, #12
 800b616:	2200      	movs	r2, #0
 800b618:	4618      	mov	r0, r3
 800b61a:	f7ff fc8d 	bl	800af38 <find_volume>
 800b61e:	4603      	mov	r3, r0
 800b620:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b622:	7dfb      	ldrb	r3, [r7, #23]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3720      	adds	r7, #32
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	2000228c 	.word	0x2000228c

0800b630 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b63e:	f843 0c44 	str.w	r0, [r3, #-68]
 800b642:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b646:	f843 1c48 	str.w	r1, [r3, #-72]
 800b64a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b64e:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b656:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <f_open+0x32>
 800b65e:	2309      	movs	r3, #9
 800b660:	e2e6      	b.n	800bc30 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 800b662:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b666:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b66e:	461a      	mov	r2, r3
 800b670:	2300      	movs	r3, #0
 800b672:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b678:	461a      	mov	r2, r3
 800b67a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b67e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b682:	f003 031f 	and.w	r3, r3, #31
 800b686:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b68a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b68e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b692:	f023 0301 	bic.w	r3, r3, #1
 800b696:	b2da      	uxtb	r2, r3
 800b698:	f107 0110 	add.w	r1, r7, #16
 800b69c:	3908      	subs	r1, #8
 800b69e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6a2:	3b10      	subs	r3, #16
 800b6a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7ff fc45 	bl	800af38 <find_volume>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6b4:	f102 020f 	add.w	r2, r2, #15
 800b6b8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b6ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6be:	f103 030f 	add.w	r3, r3, #15
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 82ae 	bne.w	800bc26 <f_open+0x5f6>
		INIT_BUF(dj);
 800b6ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6d4:	3b1c      	subs	r3, #28
 800b6d6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800b6da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b6de:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800b6e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6e6:	3b10      	subs	r3, #16
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff fafc 	bl	800ace8 <follow_path>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6f6:	f102 020f 	add.w	r2, r2, #15
 800b6fa:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800b6fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b700:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 800b704:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b708:	f102 0208 	add.w	r2, r2, #8
 800b70c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b70e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b712:	f103 030f 	add.w	r3, r3, #15
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d126      	bne.n	800b76a <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 800b71c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b720:	f103 0308 	add.w	r3, r3, #8
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <f_open+0x108>
				res = FR_INVALID_NAME;
 800b72a:	2306      	movs	r3, #6
 800b72c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b730:	f102 020f 	add.w	r2, r2, #15
 800b734:	7013      	strb	r3, [r2, #0]
 800b736:	e018      	b.n	800b76a <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b738:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b73c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b740:	f023 0301 	bic.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	461a      	mov	r2, r3
 800b750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b754:	3b10      	subs	r3, #16
 800b756:	4611      	mov	r1, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe f93b 	bl	80099d4 <chk_lock>
 800b75e:	4603      	mov	r3, r0
 800b760:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b764:	f102 020f 	add.w	r2, r2, #15
 800b768:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b76a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b76e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b772:	f003 031c 	and.w	r3, r3, #28
 800b776:	2b00      	cmp	r3, #0
 800b778:	f000 8134 	beq.w	800b9e4 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 800b77c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b780:	f103 030f 	add.w	r3, r3, #15
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d02e      	beq.n	800b7e8 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b78a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b78e:	f103 030f 	add.w	r3, r3, #15
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b04      	cmp	r3, #4
 800b796:	d112      	bne.n	800b7be <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b798:	f7fe f98c 	bl	8009ab4 <enq_lock>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d007      	beq.n	800b7b2 <f_open+0x182>
 800b7a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7a6:	3b10      	subs	r3, #16
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff f99a 	bl	800aae2 <dir_register>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	e000      	b.n	800b7b4 <f_open+0x184>
 800b7b2:	2312      	movs	r3, #18
 800b7b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b7b8:	f102 020f 	add.w	r2, r2, #15
 800b7bc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b7be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b7c8:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b7cc:	f043 0308 	orr.w	r3, r3, #8
 800b7d0:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 800b7d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b7d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 800b7dc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b7e0:	f102 0208 	add.w	r2, r2, #8
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	e01f      	b.n	800b828 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b7e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7ec:	f103 0308 	add.w	r3, r3, #8
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	330b      	adds	r3, #11
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	f003 0311 	and.w	r3, r3, #17
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <f_open+0x1dc>
					res = FR_DENIED;
 800b7fe:	2307      	movs	r3, #7
 800b800:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b804:	f102 020f 	add.w	r2, r2, #15
 800b808:	7013      	strb	r3, [r2, #0]
 800b80a:	e00d      	b.n	800b828 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b80c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b810:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d005      	beq.n	800b828 <f_open+0x1f8>
						res = FR_EXIST;
 800b81c:	2308      	movs	r3, #8
 800b81e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b822:	f102 020f 	add.w	r2, r2, #15
 800b826:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b828:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b82c:	f103 030f 	add.w	r3, r3, #15
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	f040 8108 	bne.w	800ba48 <f_open+0x418>
 800b838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b83c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b840:	f003 0308 	and.w	r3, r3, #8
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 80ff 	beq.w	800ba48 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 800b84a:	f7fb fc65 	bl	8007118 <get_fattime>
 800b84e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b852:	f103 0304 	add.w	r3, r3, #4
 800b856:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b858:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b85c:	f103 0308 	add.w	r3, r3, #8
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	330e      	adds	r3, #14
 800b864:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b868:	f102 0204 	add.w	r2, r2, #4
 800b86c:	6812      	ldr	r2, [r2, #0]
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	701a      	strb	r2, [r3, #0]
 800b872:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b876:	f103 0304 	add.w	r3, r3, #4
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	0a1b      	lsrs	r3, r3, #8
 800b880:	b29a      	uxth	r2, r3
 800b882:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b886:	f103 0308 	add.w	r3, r3, #8
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	330f      	adds	r3, #15
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b896:	f103 0304 	add.w	r3, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	0c1a      	lsrs	r2, r3, #16
 800b89e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8a2:	f103 0308 	add.w	r3, r3, #8
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3310      	adds	r3, #16
 800b8aa:	b2d2      	uxtb	r2, r2
 800b8ac:	701a      	strb	r2, [r3, #0]
 800b8ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8b2:	f103 0304 	add.w	r3, r3, #4
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	0e1a      	lsrs	r2, r3, #24
 800b8ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8be:	f103 0308 	add.w	r3, r3, #8
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3311      	adds	r3, #17
 800b8c6:	b2d2      	uxtb	r2, r2
 800b8c8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b8ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8ce:	f103 0308 	add.w	r3, r3, #8
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	330b      	adds	r3, #11
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b8da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8de:	f103 0308 	add.w	r3, r3, #8
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	331c      	adds	r3, #28
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	701a      	strb	r2, [r3, #0]
 800b8ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8ee:	f103 0308 	add.w	r3, r3, #8
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	331d      	adds	r3, #29
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8fe:	f103 0308 	add.w	r3, r3, #8
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	331e      	adds	r3, #30
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b90e:	f103 0308 	add.w	r3, r3, #8
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	331f      	adds	r3, #31
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b91a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b91e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b922:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b926:	f102 0208 	add.w	r2, r2, #8
 800b92a:	6811      	ldr	r1, [r2, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff f831 	bl	800a994 <ld_clust>
 800b932:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b936:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b938:	2100      	movs	r1, #0
 800b93a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b93e:	f103 0308 	add.w	r3, r3, #8
 800b942:	6818      	ldr	r0, [r3, #0]
 800b944:	f7ff f854 	bl	800a9f0 <st_clust>
				dj.fs->wflag = 1;
 800b948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b94c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b954:	2201      	movs	r2, #1
 800b956:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800b958:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d072      	beq.n	800ba48 <f_open+0x418>
					dw = dj.fs->winsect;
 800b962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b966:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b970:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b974:	f102 0204 	add.w	r2, r2, #4
 800b978:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b97a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b97e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b982:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b986:	6811      	ldr	r1, [r2, #0]
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe fc94 	bl	800a2b6 <remove_chain>
 800b98e:	4603      	mov	r3, r0
 800b990:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b994:	f102 020f 	add.w	r2, r2, #15
 800b998:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800b99a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b99e:	f103 030f 	add.w	r3, r3, #15
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d14f      	bne.n	800ba48 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b9a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b9ac:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 800b9b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9bc:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800b9be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b9c2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b9c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b9ca:	f102 0204 	add.w	r2, r2, #4
 800b9ce:	6811      	ldr	r1, [r2, #0]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fe f9cb 	bl	8009d6c <move_window>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b9dc:	f102 020f 	add.w	r2, r2, #15
 800b9e0:	7013      	strb	r3, [r2, #0]
 800b9e2:	e031      	b.n	800ba48 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b9e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9e8:	f103 030f 	add.w	r3, r3, #15
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d12a      	bne.n	800ba48 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b9f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9f6:	f103 0308 	add.w	r3, r3, #8
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	330b      	adds	r3, #11
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f003 0310 	and.w	r3, r3, #16
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <f_open+0x3e6>
					res = FR_NO_FILE;
 800ba08:	2304      	movs	r3, #4
 800ba0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba0e:	f102 020f 	add.w	r2, r2, #15
 800ba12:	7013      	strb	r3, [r2, #0]
 800ba14:	e018      	b.n	800ba48 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ba16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba1a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d010      	beq.n	800ba48 <f_open+0x418>
 800ba26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba2a:	f103 0308 	add.w	r3, r3, #8
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330b      	adds	r3, #11
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <f_open+0x418>
						res = FR_DENIED;
 800ba3c:	2307      	movs	r3, #7
 800ba3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba42:	f102 020f 	add.w	r2, r2, #15
 800ba46:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800ba48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba4c:	f103 030f 	add.w	r3, r3, #15
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d157      	bne.n	800bb06 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba5a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ba5e:	f003 0308 	and.w	r3, r3, #8
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <f_open+0x44c>
				mode |= FA__WRITTEN;
 800ba66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba70:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ba74:	f043 0320 	orr.w	r3, r3, #32
 800ba78:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ba7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba80:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800ba84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ba8e:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800ba92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba96:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800ba98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba9c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800baa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa4:	461a      	mov	r2, r3
 800baa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800baaa:	f103 0308 	add.w	r3, r3, #8
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bab2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bab6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800baba:	f023 0301 	bic.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf14      	ite	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	2300      	moveq	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	461a      	mov	r2, r3
 800baca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bace:	3b10      	subs	r3, #16
 800bad0:	4611      	mov	r1, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe f812 	bl	8009afc <inc_lock>
 800bad8:	4602      	mov	r2, r0
 800bada:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bade:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae6:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800bae8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800baec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800baf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d105      	bne.n	800bb06 <f_open+0x4d6>
 800bafa:	2302      	movs	r3, #2
 800bafc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb00:	f102 020f 	add.w	r2, r2, #15
 800bb04:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bb06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb0a:	f103 030f 	add.w	r3, r3, #15
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 8088 	bne.w	800bc26 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 800bb16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bb1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb22:	461a      	mov	r2, r3
 800bb24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb28:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800bb2c:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800bb2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bb3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb42:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800bb46:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb4a:	f102 0208 	add.w	r2, r2, #8
 800bb4e:	6811      	ldr	r1, [r2, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe ff1f 	bl	800a994 <ld_clust>
 800bb56:	4602      	mov	r2, r0
 800bb58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb5c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb64:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bb66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb6a:	f103 0308 	add.w	r3, r3, #8
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	331f      	adds	r3, #31
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	061a      	lsls	r2, r3, #24
 800bb76:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb7a:	f103 0308 	add.w	r3, r3, #8
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	331e      	adds	r3, #30
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	041b      	lsls	r3, r3, #16
 800bb86:	4313      	orrs	r3, r2
 800bb88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb8c:	f102 0208 	add.w	r2, r2, #8
 800bb90:	6812      	ldr	r2, [r2, #0]
 800bb92:	321d      	adds	r2, #29
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	0212      	lsls	r2, r2, #8
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800bb9e:	f102 0208 	add.w	r2, r2, #8
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	321c      	adds	r2, #28
 800bba6:	7812      	ldrb	r2, [r2, #0]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bbae:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800bbb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbb6:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800bbb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bbbc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bbc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800bbca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bbce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bbd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	2300      	movs	r3, #0
 800bbda:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bbdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bbe0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bbe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe8:	461a      	mov	r2, r3
 800bbea:	2300      	movs	r3, #0
 800bbec:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bbee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bbf2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800bbf6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bbfa:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800bbfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc02:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800bc04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bc08:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bc0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc16:	88da      	ldrh	r2, [r3, #6]
 800bc18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bc1c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bc20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc24:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800bc26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bc2a:	f103 030f 	add.w	r3, r3, #15
 800bc2e:	781b      	ldrb	r3, [r3, #0]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b098      	sub	sp, #96	; 0x60
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	460b      	mov	r3, r1
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	72fb      	strb	r3, [r7, #11]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 800bc4a:	7afb      	ldrb	r3, [r7, #11]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d902      	bls.n	800bc56 <f_mkfs+0x1a>
 800bc50:	2313      	movs	r3, #19
 800bc52:	f000 bce0 	b.w	800c616 <f_mkfs+0x9da>
	vol = get_ldnumber(&path);
 800bc56:	f107 030c 	add.w	r3, r7, #12
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff f8ba 	bl	800add4 <get_ldnumber>
 800bc60:	6378      	str	r0, [r7, #52]	; 0x34
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	da02      	bge.n	800bc6e <f_mkfs+0x32>
 800bc68:	230b      	movs	r3, #11
 800bc6a:	f000 bcd4 	b.w	800c616 <f_mkfs+0x9da>
	fs = FatFs[vol];
 800bc6e:	4aa6      	ldr	r2, [pc, #664]	; (800bf08 <f_mkfs+0x2cc>)
 800bc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc76:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fs) return FR_NOT_ENABLED;
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d102      	bne.n	800bc84 <f_mkfs+0x48>
 800bc7e:	230c      	movs	r3, #12
 800bc80:	f000 bcc9 	b.w	800c616 <f_mkfs+0x9da>
	fs->fs_type = 0;
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 800bc94:	2300      	movs	r3, #0
 800bc96:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 800bc9a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fd fd9c 	bl	80097dc <disk_initialize>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bcaa:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <f_mkfs+0x80>
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	f000 bcad 	b.w	800c616 <f_mkfs+0x9da>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bcbc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <f_mkfs+0x92>
 800bcc8:	230a      	movs	r3, #10
 800bcca:	f000 bca4 	b.w	800c616 <f_mkfs+0x9da>
#if _MAX_SS != _MIN_SS		/* Get disk sector size */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd4:	330a      	adds	r3, #10
 800bcd6:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800bcda:	461a      	mov	r2, r3
 800bcdc:	2102      	movs	r1, #2
 800bcde:	f7fd fde3 	bl	80098a8 <disk_ioctl>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10d      	bne.n	800bd04 <f_mkfs+0xc8>
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcee:	895b      	ldrh	r3, [r3, #10]
 800bcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf4:	d806      	bhi.n	800bd04 <f_mkfs+0xc8>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	895b      	ldrh	r3, [r3, #10]
 800bcfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd02:	d202      	bcs.n	800bd0a <f_mkfs+0xce>
		return FR_DISK_ERR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	f000 bc86 	b.w	800c616 <f_mkfs+0x9da>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 800bd0a:	f107 0214 	add.w	r2, r7, #20
 800bd0e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800bd12:	2101      	movs	r1, #1
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fd fdc7 	bl	80098a8 <disk_ioctl>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <f_mkfs+0xea>
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b7f      	cmp	r3, #127	; 0x7f
 800bd24:	d802      	bhi.n	800bd2c <f_mkfs+0xf0>
			return FR_DISK_ERR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	f000 bc75 	b.w	800c616 <f_mkfs+0x9da>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 800bd2c:	7afb      	ldrb	r3, [r7, #11]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <f_mkfs+0xfa>
 800bd32:	2300      	movs	r3, #0
 800bd34:	e000      	b.n	800bd38 <f_mkfs+0xfc>
 800bd36:	233f      	movs	r3, #63	; 0x3f
 800bd38:	657b      	str	r3, [r7, #84]	; 0x54
		n_vol -= b_vol;				/* Volume size */
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	1e5a      	subs	r2, r3, #1
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4013      	ands	r3, r2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <f_mkfs+0x116>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d121      	bne.n	800bd9c <f_mkfs+0x160>
		vs = n_vol / (2000 / (SS(fs) / 512));
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd60:	8952      	ldrh	r2, [r2, #10]
 800bd62:	0a52      	lsrs	r2, r2, #9
 800bd64:	b292      	uxth	r2, r2
 800bd66:	4611      	mov	r1, r2
 800bd68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bd6c:	fb92 f2f1 	sdiv	r2, r2, r1
 800bd70:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd74:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (i = 0; vs < vst[i]; i++) ;
 800bd76:	2300      	movs	r3, #0
 800bd78:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd7a:	e002      	b.n	800bd82 <f_mkfs+0x146>
 800bd7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd7e:	3301      	adds	r3, #1
 800bd80:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd82:	4a62      	ldr	r2, [pc, #392]	; (800bf0c <f_mkfs+0x2d0>)
 800bd84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d3f4      	bcc.n	800bd7c <f_mkfs+0x140>
		au = cst[i];
 800bd92:	4a5f      	ldr	r2, [pc, #380]	; (800bf10 <f_mkfs+0x2d4>)
 800bd94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd9a:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bda2:	d308      	bcc.n	800bdb6 <f_mkfs+0x17a>
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdaa:	895b      	ldrh	r3, [r3, #10]
 800bdac:	461a      	mov	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb4:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <f_mkfs+0x184>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b80      	cmp	r3, #128	; 0x80
 800bdc4:	d901      	bls.n	800bdca <f_mkfs+0x18e>
 800bdc6:	2380      	movs	r3, #128	; 0x80
 800bdc8:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd2:	62bb      	str	r3, [r7, #40]	; 0x28
	fmt = FS_FAT12;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d902      	bls.n	800bdea <f_mkfs+0x1ae>
 800bde4:	2302      	movs	r3, #2
 800bde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 800bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d902      	bls.n	800bdfa <f_mkfs+0x1be>
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 800bdfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d114      	bne.n	800be2c <f_mkfs+0x1f0>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	3302      	adds	r3, #2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be0e:	8952      	ldrh	r2, [r2, #10]
 800be10:	4413      	add	r3, r2
 800be12:	3b01      	subs	r3, #1
 800be14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be1a:	8952      	ldrh	r2, [r2, #10]
 800be1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_rsv = 32;
 800be22:	2320      	movs	r3, #32
 800be24:	643b      	str	r3, [r7, #64]	; 0x40
		n_dir = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	63bb      	str	r3, [r7, #56]	; 0x38
 800be2a:	e02a      	b.n	800be82 <f_mkfs+0x246>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 800be2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be30:	2b01      	cmp	r3, #1
 800be32:	d107      	bne.n	800be44 <f_mkfs+0x208>
 800be34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be36:	4613      	mov	r3, r2
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	4413      	add	r3, r2
 800be3c:	3301      	adds	r3, #1
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	3303      	adds	r3, #3
 800be42:	e002      	b.n	800be4a <f_mkfs+0x20e>
 800be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be46:	3302      	adds	r3, #2
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be52:	895b      	ldrh	r3, [r3, #10]
 800be54:	461a      	mov	r2, r3
 800be56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be58:	4413      	add	r3, r2
 800be5a:	3b01      	subs	r3, #1
 800be5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be62:	8952      	ldrh	r2, [r2, #10]
 800be64:	fbb3 f3f2 	udiv	r3, r3, r2
 800be68:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_rsv = 1;
 800be6a:	2301      	movs	r3, #1
 800be6c:	643b      	str	r3, [r7, #64]	; 0x40
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be74:	895b      	ldrh	r3, [r3, #10]
 800be76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800be7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be7e:	b29b      	uxth	r3, r3
 800be80:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 800be82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be86:	4413      	add	r3, r2
 800be88:	647b      	str	r3, [r7, #68]	; 0x44
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 800be8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8e:	4413      	add	r3, r2
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
	b_data = b_dir + n_dir;				/* Data area start sector */
 800be92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	4413      	add	r3, r2
 800be98:	623b      	str	r3, [r7, #32]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800be9a:	6a3a      	ldr	r2, [r7, #32]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	441a      	add	r2, r3
 800bea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d901      	bls.n	800beae <f_mkfs+0x272>
 800beaa:	230e      	movs	r3, #14
 800beac:	e3b3      	b.n	800c616 <f_mkfs+0x9da>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 800beae:	f107 0218 	add.w	r2, r7, #24
 800beb2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800beb6:	2103      	movs	r1, #3
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fd fcf5 	bl	80098a8 <disk_ioctl>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d106      	bne.n	800bed2 <f_mkfs+0x296>
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <f_mkfs+0x296>
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bed0:	d901      	bls.n	800bed6 <f_mkfs+0x29a>
 800bed2:	2301      	movs	r3, #1
 800bed4:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	4413      	add	r3, r2
 800bedc:	1e5a      	subs	r2, r3, #1
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	425b      	negs	r3, r3
 800bee2:	4013      	ands	r3, r2
 800bee4:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 800bee6:	69ba      	ldr	r2, [r7, #24]
 800bee8:	6a3b      	ldr	r3, [r7, #32]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 800beee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d10e      	bne.n	800bf14 <f_mkfs+0x2d8>
		n_rsv += n;
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800befa:	4413      	add	r3, r2
 800befc:	643b      	str	r3, [r7, #64]	; 0x40
		b_fat += n;
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf02:	4413      	add	r3, r2
 800bf04:	647b      	str	r3, [r7, #68]	; 0x44
 800bf06:	e009      	b.n	800bf1c <f_mkfs+0x2e0>
 800bf08:	2000228c 	.word	0x2000228c
 800bf0c:	0800d1b8 	.word	0x0800d1b8
 800bf10:	0800d1d0 	.word	0x0800d1d0
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf18:	4413      	add	r3, r2
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf24:	1ad2      	subs	r2, r2, r3
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	1ad2      	subs	r2, r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf30:	62bb      	str	r3, [r7, #40]	; 0x28
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 800bf32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d104      	bne.n	800bf44 <f_mkfs+0x308>
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d908      	bls.n	800bf56 <f_mkfs+0x31a>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 800bf44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d106      	bne.n	800bf5a <f_mkfs+0x31e>
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d801      	bhi.n	800bf5a <f_mkfs+0x31e>
		return FR_MKFS_ABORTED;
 800bf56:	230e      	movs	r3, #14
 800bf58:	e35d      	b.n	800c616 <f_mkfs+0x9da>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 800bf5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d103      	bne.n	800bf6a <f_mkfs+0x32e>
		sys = 0x0C;		/* FAT32X */
 800bf62:	230c      	movs	r3, #12
 800bf64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf68:	e014      	b.n	800bf94 <f_mkfs+0x358>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 800bf6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d107      	bne.n	800bf82 <f_mkfs+0x346>
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf78:	d203      	bcs.n	800bf82 <f_mkfs+0x346>
			sys = 0x01;	/* FAT12(<65536) */
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf80:	e008      	b.n	800bf94 <f_mkfs+0x358>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf88:	d201      	bcs.n	800bf8e <f_mkfs+0x352>
 800bf8a:	2304      	movs	r3, #4
 800bf8c:	e000      	b.n	800bf90 <f_mkfs+0x354>
 800bf8e:	2306      	movs	r3, #6
 800bf90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 800bf94:	7afb      	ldrb	r3, [r7, #11]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <f_mkfs+0x366>
			md = 0xF0;
 800bf9a:	23f0      	movs	r3, #240	; 0xf0
 800bf9c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800bfa0:	e07a      	b.n	800c098 <f_mkfs+0x45c>
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 800bfa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfaa:	895b      	ldrh	r3, [r3, #10]
 800bfac:	461a      	mov	r2, r3
 800bfae:	2100      	movs	r1, #0
 800bfb0:	f7fd fcb6 	bl	8009920 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bfba:	61fb      	str	r3, [r7, #28]
			tbl[1] = 1;						/* Partition start head */
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	3302      	adds	r3, #2
 800bfc8:	2201      	movs	r2, #1
 800bfca:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	3303      	adds	r3, #3
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800bfdc:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	3305      	adds	r3, #5
 800bfe2:	22fe      	movs	r2, #254	; 0xfe
 800bfe4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfea:	441a      	add	r2, r3
 800bfec:	4b5a      	ldr	r3, [pc, #360]	; (800c158 <f_mkfs+0x51c>)
 800bfee:	fba3 1302 	umull	r1, r3, r3, r2
 800bff2:	1ad2      	subs	r2, r2, r3
 800bff4:	0852      	lsrs	r2, r2, #1
 800bff6:	4413      	add	r3, r2
 800bff8:	0b5b      	lsrs	r3, r3, #13
 800bffa:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	089b      	lsrs	r3, r3, #2
 800c000:	b2da      	uxtb	r2, r3
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	3306      	adds	r3, #6
 800c006:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c00a:	b2d2      	uxtb	r2, r2
 800c00c:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	3307      	adds	r3, #7
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	3308      	adds	r3, #8
 800c01c:	223f      	movs	r2, #63	; 0x3f
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	3309      	adds	r3, #9
 800c024:	2200      	movs	r2, #0
 800c026:	701a      	strb	r2, [r3, #0]
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	330a      	adds	r3, #10
 800c02c:	2200      	movs	r2, #0
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	330b      	adds	r3, #11
 800c034:	2200      	movs	r2, #0
 800c036:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	330c      	adds	r3, #12
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	b29b      	uxth	r3, r3
 800c046:	0a1b      	lsrs	r3, r3, #8
 800c048:	b29a      	uxth	r2, r3
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	330d      	adds	r3, #13
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	0c1a      	lsrs	r2, r3, #16
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	330e      	adds	r3, #14
 800c05a:	b2d2      	uxtb	r2, r2
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	0e1a      	lsrs	r2, r3, #24
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	330f      	adds	r3, #15
 800c066:	b2d2      	uxtb	r2, r2
 800c068:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	2255      	movs	r2, #85	; 0x55
 800c06e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	22aa      	movs	r2, #170	; 0xaa
 800c076:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 800c07a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c07c:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c080:	2301      	movs	r3, #1
 800c082:	2200      	movs	r2, #0
 800c084:	f7fd fbf0 	bl	8009868 <disk_write>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <f_mkfs+0x456>
				return FR_DISK_ERR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e2c1      	b.n	800c616 <f_mkfs+0x9da>
			md = 0xF8;
 800c092:	23f8      	movs	r3, #248	; 0xf8
 800c094:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	61fb      	str	r3, [r7, #28]
	mem_set(tbl, 0, SS(fs));
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0a2:	895b      	ldrh	r3, [r3, #10]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	69f8      	ldr	r0, [r7, #28]
 800c0aa:	f7fd fc39 	bl	8009920 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800c0ae:	220b      	movs	r2, #11
 800c0b0:	492a      	ldr	r1, [pc, #168]	; (800c15c <f_mkfs+0x520>)
 800c0b2:	69f8      	ldr	r0, [r7, #28]
 800c0b4:	f7fd fc16 	bl	80098e4 <mem_cpy>
	i = SS(fs);								/* Sector size */
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0be:	895b      	ldrh	r3, [r3, #10]
 800c0c0:	65bb      	str	r3, [r7, #88]	; 0x58
	ST_WORD(tbl + BPB_BytsPerSec, i);
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	330b      	adds	r3, #11
 800c0c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0c8:	b2d2      	uxtb	r2, r2
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	0a1b      	lsrs	r3, r3, #8
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	330c      	adds	r3, #12
 800c0d8:	b2d2      	uxtb	r2, r2
 800c0da:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	330d      	adds	r3, #13
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	330e      	adds	r3, #14
 800c0ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ec:	b2d2      	uxtb	r2, r2
 800c0ee:	701a      	strb	r2, [r3, #0]
 800c0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	0a1b      	lsrs	r3, r3, #8
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	330f      	adds	r3, #15
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	3310      	adds	r3, #16
 800c104:	2201      	movs	r2, #1
 800c106:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 800c108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d101      	bne.n	800c114 <f_mkfs+0x4d8>
 800c110:	2300      	movs	r3, #0
 800c112:	e001      	b.n	800c118 <f_mkfs+0x4dc>
 800c114:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c118:	65bb      	str	r3, [r7, #88]	; 0x58
	ST_WORD(tbl + BPB_RootEntCnt, i);
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	3311      	adds	r3, #17
 800c11e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	701a      	strb	r2, [r3, #0]
 800c124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c126:	b29b      	uxth	r3, r3
 800c128:	0a1b      	lsrs	r3, r3, #8
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	3312      	adds	r3, #18
 800c130:	b2d2      	uxtb	r2, r2
 800c132:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c13a:	d211      	bcs.n	800c160 <f_mkfs+0x524>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	3313      	adds	r3, #19
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	0a1b      	lsrs	r3, r3, #8
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	3314      	adds	r3, #20
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	e01c      	b.n	800c192 <f_mkfs+0x556>
 800c158:	0515565b 	.word	0x0515565b
 800c15c:	0800d090 	.word	0x0800d090
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	3320      	adds	r3, #32
 800c166:	b2d2      	uxtb	r2, r2
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	0a1b      	lsrs	r3, r3, #8
 800c170:	b29a      	uxth	r2, r3
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	3321      	adds	r3, #33	; 0x21
 800c176:	b2d2      	uxtb	r2, r2
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	0c1a      	lsrs	r2, r3, #16
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	3322      	adds	r3, #34	; 0x22
 800c182:	b2d2      	uxtb	r2, r2
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	0e1a      	lsrs	r2, r3, #24
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	3323      	adds	r3, #35	; 0x23
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	3315      	adds	r3, #21
 800c196:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c19a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	3318      	adds	r3, #24
 800c1a0:	223f      	movs	r2, #63	; 0x3f
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	3319      	adds	r3, #25
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	331a      	adds	r3, #26
 800c1b0:	22ff      	movs	r2, #255	; 0xff
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	331b      	adds	r3, #27
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	331c      	adds	r3, #28
 800c1c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	701a      	strb	r2, [r3, #0]
 800c1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	0a1b      	lsrs	r3, r3, #8
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	331d      	adds	r3, #29
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1d8:	0c1a      	lsrs	r2, r3, #16
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	331e      	adds	r3, #30
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e4:	0e1a      	lsrs	r2, r3, #24
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	331f      	adds	r3, #31
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 800c1ee:	f7fa ff93 	bl	8007118 <get_fattime>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 800c1f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1fa:	2b03      	cmp	r3, #3
 800c1fc:	d161      	bne.n	800c2c2 <f_mkfs+0x686>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	3343      	adds	r3, #67	; 0x43
 800c204:	b2d2      	uxtb	r2, r2
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	0a1b      	lsrs	r3, r3, #8
 800c20e:	b29a      	uxth	r2, r3
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	3344      	adds	r3, #68	; 0x44
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	0c1a      	lsrs	r2, r3, #16
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	3345      	adds	r3, #69	; 0x45
 800c220:	b2d2      	uxtb	r2, r2
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	0e1a      	lsrs	r2, r3, #24
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	3346      	adds	r3, #70	; 0x46
 800c22c:	b2d2      	uxtb	r2, r2
 800c22e:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	3324      	adds	r3, #36	; 0x24
 800c234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c236:	b2d2      	uxtb	r2, r2
 800c238:	701a      	strb	r2, [r3, #0]
 800c23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	0a1b      	lsrs	r3, r3, #8
 800c240:	b29a      	uxth	r2, r3
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	3325      	adds	r3, #37	; 0x25
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]
 800c24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24c:	0c1a      	lsrs	r2, r3, #16
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	3326      	adds	r3, #38	; 0x26
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	701a      	strb	r2, [r3, #0]
 800c256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c258:	0e1a      	lsrs	r2, r3, #24
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	3327      	adds	r3, #39	; 0x27
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	332c      	adds	r3, #44	; 0x2c
 800c266:	2202      	movs	r2, #2
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	332d      	adds	r3, #45	; 0x2d
 800c26e:	2200      	movs	r2, #0
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	332e      	adds	r3, #46	; 0x2e
 800c276:	2200      	movs	r2, #0
 800c278:	701a      	strb	r2, [r3, #0]
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	332f      	adds	r3, #47	; 0x2f
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	3330      	adds	r3, #48	; 0x30
 800c286:	2201      	movs	r2, #1
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	3331      	adds	r3, #49	; 0x31
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	3332      	adds	r3, #50	; 0x32
 800c296:	2206      	movs	r2, #6
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	3333      	adds	r3, #51	; 0x33
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	3340      	adds	r3, #64	; 0x40
 800c2a6:	2280      	movs	r2, #128	; 0x80
 800c2a8:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	3342      	adds	r3, #66	; 0x42
 800c2ae:	2229      	movs	r2, #41	; 0x29
 800c2b0:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	3347      	adds	r3, #71	; 0x47
 800c2b6:	2213      	movs	r2, #19
 800c2b8:	498e      	ldr	r1, [pc, #568]	; (800c4f4 <f_mkfs+0x8b8>)
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fb12 	bl	80098e4 <mem_cpy>
 800c2c0:	e034      	b.n	800c32c <f_mkfs+0x6f0>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	3327      	adds	r3, #39	; 0x27
 800c2c8:	b2d2      	uxtb	r2, r2
 800c2ca:	701a      	strb	r2, [r3, #0]
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	0a1b      	lsrs	r3, r3, #8
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	3328      	adds	r3, #40	; 0x28
 800c2d8:	b2d2      	uxtb	r2, r2
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	0c1a      	lsrs	r2, r3, #16
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	3329      	adds	r3, #41	; 0x29
 800c2e4:	b2d2      	uxtb	r2, r2
 800c2e6:	701a      	strb	r2, [r3, #0]
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	0e1a      	lsrs	r2, r3, #24
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	332a      	adds	r3, #42	; 0x2a
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	3316      	adds	r3, #22
 800c2f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2fa:	b2d2      	uxtb	r2, r2
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c300:	b29b      	uxth	r3, r3
 800c302:	0a1b      	lsrs	r3, r3, #8
 800c304:	b29a      	uxth	r2, r3
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	3317      	adds	r3, #23
 800c30a:	b2d2      	uxtb	r2, r2
 800c30c:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	3324      	adds	r3, #36	; 0x24
 800c312:	2280      	movs	r2, #128	; 0x80
 800c314:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	3326      	adds	r3, #38	; 0x26
 800c31a:	2229      	movs	r2, #41	; 0x29
 800c31c:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	332b      	adds	r3, #43	; 0x2b
 800c322:	2213      	movs	r2, #19
 800c324:	4974      	ldr	r1, [pc, #464]	; (800c4f8 <f_mkfs+0x8bc>)
 800c326:	4618      	mov	r0, r3
 800c328:	f7fd fadc 	bl	80098e4 <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c332:	2255      	movs	r2, #85	; 0x55
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c33c:	22aa      	movs	r2, #170	; 0xaa
 800c33e:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 800c340:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c344:	2301      	movs	r3, #1
 800c346:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c348:	69f9      	ldr	r1, [r7, #28]
 800c34a:	f7fd fa8d 	bl	8009868 <disk_write>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <f_mkfs+0x71c>
		return FR_DISK_ERR;
 800c354:	2301      	movs	r3, #1
 800c356:	e15e      	b.n	800c616 <f_mkfs+0x9da>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 800c358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d107      	bne.n	800c370 <f_mkfs+0x734>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 800c360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c362:	1d9a      	adds	r2, r3, #6
 800c364:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c368:	2301      	movs	r3, #1
 800c36a:	69f9      	ldr	r1, [r7, #28]
 800c36c:	f7fd fa7c 	bl	8009868 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 800c370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c372:	64bb      	str	r3, [r7, #72]	; 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800c374:	2300      	movs	r3, #0
 800c376:	65bb      	str	r3, [r7, #88]	; 0x58
 800c378:	e0a1      	b.n	800c4be <f_mkfs+0x882>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c380:	895b      	ldrh	r3, [r3, #10]
 800c382:	461a      	mov	r2, r3
 800c384:	2100      	movs	r1, #0
 800c386:	69f8      	ldr	r0, [r7, #28]
 800c388:	f7fd faca 	bl	8009920 <mem_set>
		n = md;								/* Media descriptor byte */
 800c38c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800c390:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 800c392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c396:	2b03      	cmp	r3, #3
 800c398:	d023      	beq.n	800c3e2 <f_mkfs+0x7a6>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 800c39a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d101      	bne.n	800c3a6 <f_mkfs+0x76a>
 800c3a2:	4a56      	ldr	r2, [pc, #344]	; (800c4fc <f_mkfs+0x8c0>)
 800c3a4:	e001      	b.n	800c3aa <f_mkfs+0x76e>
 800c3a6:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	0a1b      	lsrs	r3, r3, #8
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	b2d2      	uxtb	r2, r2
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	0c1a      	lsrs	r2, r3, #16
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	3302      	adds	r3, #2
 800c3d0:	b2d2      	uxtb	r2, r2
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	0e1a      	lsrs	r2, r3, #24
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	3303      	adds	r3, #3
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	e03b      	b.n	800c45a <f_mkfs+0x81e>
		} else {
			n |= 0xFFFFFF00;
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800c3e8:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	0a1b      	lsrs	r3, r3, #8
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	0c1a      	lsrs	r2, r3, #16
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	3302      	adds	r3, #2
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	701a      	strb	r2, [r3, #0]
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	0e1a      	lsrs	r2, r3, #24
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	3303      	adds	r3, #3
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	3304      	adds	r3, #4
 800c41e:	22ff      	movs	r2, #255	; 0xff
 800c420:	701a      	strb	r2, [r3, #0]
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	3305      	adds	r3, #5
 800c426:	22ff      	movs	r2, #255	; 0xff
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	3306      	adds	r3, #6
 800c42e:	22ff      	movs	r2, #255	; 0xff
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	3307      	adds	r3, #7
 800c436:	22ff      	movs	r2, #255	; 0xff
 800c438:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	3308      	adds	r3, #8
 800c43e:	22ff      	movs	r2, #255	; 0xff
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	3309      	adds	r3, #9
 800c446:	22ff      	movs	r2, #255	; 0xff
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	330a      	adds	r3, #10
 800c44e:	22ff      	movs	r2, #255	; 0xff
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	330b      	adds	r3, #11
 800c456:	220f      	movs	r2, #15
 800c458:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800c45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c45c:	1c53      	adds	r3, r2, #1
 800c45e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c460:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c464:	2301      	movs	r3, #1
 800c466:	69f9      	ldr	r1, [r7, #28]
 800c468:	f7fd f9fe 	bl	8009868 <disk_write>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <f_mkfs+0x83a>
			return FR_DISK_ERR;
 800c472:	2301      	movs	r3, #1
 800c474:	e0cf      	b.n	800c616 <f_mkfs+0x9da>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	461a      	mov	r2, r3
 800c480:	2100      	movs	r1, #0
 800c482:	69f8      	ldr	r0, [r7, #28]
 800c484:	f7fd fa4c 	bl	8009920 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800c488:	2301      	movs	r3, #1
 800c48a:	61bb      	str	r3, [r7, #24]
 800c48c:	e010      	b.n	800c4b0 <f_mkfs+0x874>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800c48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c490:	1c53      	adds	r3, r2, #1
 800c492:	64bb      	str	r3, [r7, #72]	; 0x48
 800c494:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c498:	2301      	movs	r3, #1
 800c49a:	69f9      	ldr	r1, [r7, #28]
 800c49c:	f7fd f9e4 	bl	8009868 <disk_write>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <f_mkfs+0x86e>
				return FR_DISK_ERR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e0b5      	b.n	800c616 <f_mkfs+0x9da>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d8ea      	bhi.n	800c48e <f_mkfs+0x852>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800c4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f43f af5a 	beq.w	800c37a <f_mkfs+0x73e>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 800c4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d101      	bne.n	800c4d2 <f_mkfs+0x896>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	e000      	b.n	800c4d4 <f_mkfs+0x898>
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d4:	65bb      	str	r3, [r7, #88]	; 0x58
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800c4d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4d8:	1c53      	adds	r3, r2, #1
 800c4da:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4dc:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	69f9      	ldr	r1, [r7, #28]
 800c4e4:	f7fd f9c0 	bl	8009868 <disk_write>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d008      	beq.n	800c500 <f_mkfs+0x8c4>
			return FR_DISK_ERR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e091      	b.n	800c616 <f_mkfs+0x9da>
 800c4f2:	bf00      	nop
 800c4f4:	0800d09c 	.word	0x0800d09c
 800c4f8:	0800d0b0 	.word	0x0800d0b0
 800c4fc:	00ffff00 	.word	0x00ffff00
	} while (--i);
 800c500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c502:	3b01      	subs	r3, #1
 800c504:	65bb      	str	r3, [r7, #88]	; 0x58
 800c506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1e4      	bne.n	800c4d6 <f_mkfs+0x89a>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 800c50c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c510:	2b03      	cmp	r3, #3
 800c512:	d173      	bne.n	800c5fc <f_mkfs+0x9c0>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	2252      	movs	r2, #82	; 0x52
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	3301      	adds	r3, #1
 800c51e:	2252      	movs	r2, #82	; 0x52
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	3302      	adds	r3, #2
 800c526:	2261      	movs	r2, #97	; 0x61
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	3303      	adds	r3, #3
 800c52e:	2241      	movs	r2, #65	; 0x41
 800c530:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c538:	2272      	movs	r2, #114	; 0x72
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	f203 13e5 	addw	r3, r3, #485	; 0x1e5
 800c542:	2272      	movs	r2, #114	; 0x72
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 800c54c:	2241      	movs	r2, #65	; 0x41
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	f203 13e7 	addw	r3, r3, #487	; 0x1e7
 800c556:	2261      	movs	r2, #97	; 0x61
 800c558:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c564:	3a01      	subs	r2, #1
 800c566:	b2d2      	uxtb	r2, r2
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	b29b      	uxth	r3, r3
 800c572:	0a1b      	lsrs	r3, r3, #8
 800c574:	b29a      	uxth	r2, r3
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800c57c:	b2d2      	uxtb	r2, r2
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	3b01      	subs	r3, #1
 800c584:	0c1a      	lsrs	r2, r3, #16
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c592:	3b01      	subs	r3, #1
 800c594:	0e1a      	lsrs	r2, r3, #24
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	701a      	strb	r2, [r3, #0]
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	f203 13ed 	addw	r3, r3, #493	; 0x1ed
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	701a      	strb	r2, [r3, #0]
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5ce:	2255      	movs	r2, #85	; 0x55
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c5d8:	22aa      	movs	r2, #170	; 0xaa
 800c5da:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 800c5dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	69f9      	ldr	r1, [r7, #28]
 800c5e8:	f7fd f93e 	bl	8009868 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 800c5ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ee:	1dda      	adds	r2, r3, #7
 800c5f0:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	69f9      	ldr	r1, [r7, #28]
 800c5f8:	f7fd f936 	bl	8009868 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 800c5fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f7fd f94f 	bl	80098a8 <disk_ioctl>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bf14      	ite	ne
 800c610:	2301      	movne	r3, #1
 800c612:	2300      	moveq	r3, #0
 800c614:	b2db      	uxtb	r3, r3
}
 800c616:	4618      	mov	r0, r3
 800c618:	3760      	adds	r7, #96	; 0x60
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop

0800c620 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c62e:	2301      	movs	r3, #1
 800c630:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c636:	4b1e      	ldr	r3, [pc, #120]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c638:	7a5b      	ldrb	r3, [r3, #9]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d831      	bhi.n	800c6a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c640:	4b1b      	ldr	r3, [pc, #108]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c642:	7a5b      	ldrb	r3, [r3, #9]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	461a      	mov	r2, r3
 800c648:	4b19      	ldr	r3, [pc, #100]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c64a:	2100      	movs	r1, #0
 800c64c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c64e:	4b18      	ldr	r3, [pc, #96]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c650:	7a5b      	ldrb	r3, [r3, #9]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	4a16      	ldr	r2, [pc, #88]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c65e:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c660:	7a5b      	ldrb	r3, [r3, #9]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	461a      	mov	r2, r3
 800c666:	4b12      	ldr	r3, [pc, #72]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c668:	4413      	add	r3, r2
 800c66a:	79fa      	ldrb	r2, [r7, #7]
 800c66c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c66e:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c670:	7a5b      	ldrb	r3, [r3, #9]
 800c672:	b2db      	uxtb	r3, r3
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	b2d1      	uxtb	r1, r2
 800c678:	4a0d      	ldr	r2, [pc, #52]	; (800c6b0 <FATFS_LinkDriverEx+0x90>)
 800c67a:	7251      	strb	r1, [r2, #9]
 800c67c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c67e:	7dbb      	ldrb	r3, [r7, #22]
 800c680:	3330      	adds	r3, #48	; 0x30
 800c682:	b2da      	uxtb	r2, r3
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	3301      	adds	r3, #1
 800c68c:	223a      	movs	r2, #58	; 0x3a
 800c68e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	3302      	adds	r3, #2
 800c694:	222f      	movs	r2, #47	; 0x2f
 800c696:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	3303      	adds	r3, #3
 800c69c:	2200      	movs	r2, #0
 800c69e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc80      	pop	{r7}
 800c6ae:	4770      	bx	lr
 800c6b0:	200022ac 	.word	0x200022ac

0800c6b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c6be:	2200      	movs	r2, #0
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff ffac 	bl	800c620 <FATFS_LinkDriverEx>
 800c6c8:	4603      	mov	r3, r0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	4912      	ldr	r1, [pc, #72]	; (800c724 <MX_USB_DEVICE_Init+0x50>)
 800c6dc:	4812      	ldr	r0, [pc, #72]	; (800c728 <MX_USB_DEVICE_Init+0x54>)
 800c6de:	f7fb ffe7 	bl	80086b0 <USBD_Init>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6e8:	f7f4 f802 	bl	80006f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c6ec:	490f      	ldr	r1, [pc, #60]	; (800c72c <MX_USB_DEVICE_Init+0x58>)
 800c6ee:	480e      	ldr	r0, [pc, #56]	; (800c728 <MX_USB_DEVICE_Init+0x54>)
 800c6f0:	f7fc f809 	bl	8008706 <USBD_RegisterClass>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6fa:	f7f3 fff9 	bl	80006f0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c6fe:	490c      	ldr	r1, [pc, #48]	; (800c730 <MX_USB_DEVICE_Init+0x5c>)
 800c700:	4809      	ldr	r0, [pc, #36]	; (800c728 <MX_USB_DEVICE_Init+0x54>)
 800c702:	f7fa ffb5 	bl	8007670 <USBD_MSC_RegisterStorage>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c70c:	f7f3 fff0 	bl	80006f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c710:	4805      	ldr	r0, [pc, #20]	; (800c728 <MX_USB_DEVICE_Init+0x54>)
 800c712:	f7fc f811 	bl	8008738 <USBD_Start>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c71c:	f7f3 ffe8 	bl	80006f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c720:	bf00      	nop
 800c722:	bd80      	pop	{r7, pc}
 800c724:	200000c4 	.word	0x200000c4
 800c728:	200022b8 	.word	0x200022b8
 800c72c:	20000020 	.word	0x20000020
 800c730:	20000114 	.word	0x20000114

0800c734 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	4603      	mov	r3, r0
 800c73c:	6039      	str	r1, [r7, #0]
 800c73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2212      	movs	r2, #18
 800c744:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c746:	4b03      	ldr	r3, [pc, #12]	; (800c754 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bc80      	pop	{r7}
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	200000e0 	.word	0x200000e0

0800c758 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	6039      	str	r1, [r7, #0]
 800c762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2204      	movs	r2, #4
 800c768:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c76a:	4b03      	ldr	r3, [pc, #12]	; (800c778 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	bc80      	pop	{r7}
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	200000f4 	.word	0x200000f4

0800c77c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	6039      	str	r1, [r7, #0]
 800c786:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	4907      	ldr	r1, [pc, #28]	; (800c7b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c792:	4808      	ldr	r0, [pc, #32]	; (800c7b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c794:	f7fc ff48 	bl	8009628 <USBD_GetString>
 800c798:	e004      	b.n	800c7a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	4904      	ldr	r1, [pc, #16]	; (800c7b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c79e:	4805      	ldr	r0, [pc, #20]	; (800c7b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7a0:	f7fc ff42 	bl	8009628 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7a4:	4b02      	ldr	r3, [pc, #8]	; (800c7b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	2000257c 	.word	0x2000257c
 800c7b4:	0800d0c4 	.word	0x0800d0c4

0800c7b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	6039      	str	r1, [r7, #0]
 800c7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	4904      	ldr	r1, [pc, #16]	; (800c7d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7c8:	4804      	ldr	r0, [pc, #16]	; (800c7dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7ca:	f7fc ff2d 	bl	8009628 <USBD_GetString>
  return USBD_StrDesc;
 800c7ce:	4b02      	ldr	r3, [pc, #8]	; (800c7d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	2000257c 	.word	0x2000257c
 800c7dc:	0800d0d0 	.word	0x0800d0d0

0800c7e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	221a      	movs	r2, #26
 800c7f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7f2:	f000 f843 	bl	800c87c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7f6:	4b02      	ldr	r3, [pc, #8]	; (800c800 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	200000f8 	.word	0x200000f8

0800c804 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	6039      	str	r1, [r7, #0]
 800c80e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d105      	bne.n	800c822 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	4907      	ldr	r1, [pc, #28]	; (800c838 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c81a:	4808      	ldr	r0, [pc, #32]	; (800c83c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c81c:	f7fc ff04 	bl	8009628 <USBD_GetString>
 800c820:	e004      	b.n	800c82c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	4904      	ldr	r1, [pc, #16]	; (800c838 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c826:	4805      	ldr	r0, [pc, #20]	; (800c83c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c828:	f7fc fefe 	bl	8009628 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c82c:	4b02      	ldr	r3, [pc, #8]	; (800c838 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	2000257c 	.word	0x2000257c
 800c83c:	0800d0e0 	.word	0x0800d0e0

0800c840 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	4603      	mov	r3, r0
 800c848:	6039      	str	r1, [r7, #0]
 800c84a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d105      	bne.n	800c85e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	4907      	ldr	r1, [pc, #28]	; (800c874 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c856:	4808      	ldr	r0, [pc, #32]	; (800c878 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c858:	f7fc fee6 	bl	8009628 <USBD_GetString>
 800c85c:	e004      	b.n	800c868 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	4904      	ldr	r1, [pc, #16]	; (800c874 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c862:	4805      	ldr	r0, [pc, #20]	; (800c878 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c864:	f7fc fee0 	bl	8009628 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c868:	4b02      	ldr	r3, [pc, #8]	; (800c874 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	2000257c 	.word	0x2000257c
 800c878:	0800d0ec 	.word	0x0800d0ec

0800c87c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c882:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <Get_SerialNum+0x44>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c888:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <Get_SerialNum+0x48>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c88e:	4b0e      	ldr	r3, [pc, #56]	; (800c8c8 <Get_SerialNum+0x4c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4413      	add	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c8a2:	2208      	movs	r2, #8
 800c8a4:	4909      	ldr	r1, [pc, #36]	; (800c8cc <Get_SerialNum+0x50>)
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f000 f814 	bl	800c8d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8ac:	2204      	movs	r2, #4
 800c8ae:	4908      	ldr	r1, [pc, #32]	; (800c8d0 <Get_SerialNum+0x54>)
 800c8b0:	68b8      	ldr	r0, [r7, #8]
 800c8b2:	f000 f80f 	bl	800c8d4 <IntToUnicode>
  }
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	1ffff7e8 	.word	0x1ffff7e8
 800c8c4:	1ffff7ec 	.word	0x1ffff7ec
 800c8c8:	1ffff7f0 	.word	0x1ffff7f0
 800c8cc:	200000fa 	.word	0x200000fa
 800c8d0:	2000010a 	.word	0x2000010a

0800c8d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	75fb      	strb	r3, [r7, #23]
 800c8ea:	e027      	b.n	800c93c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	0f1b      	lsrs	r3, r3, #28
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d80b      	bhi.n	800c90c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	0f1b      	lsrs	r3, r3, #28
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	4619      	mov	r1, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	440b      	add	r3, r1
 800c904:	3230      	adds	r2, #48	; 0x30
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]
 800c90a:	e00a      	b.n	800c922 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	0f1b      	lsrs	r3, r3, #28
 800c910:	b2da      	uxtb	r2, r3
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	4619      	mov	r1, r3
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	440b      	add	r3, r1
 800c91c:	3237      	adds	r2, #55	; 0x37
 800c91e:	b2d2      	uxtb	r2, r2
 800c920:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	3301      	adds	r3, #1
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	4413      	add	r3, r2
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	3301      	adds	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]
 800c93c:	7dfa      	ldrb	r2, [r7, #23]
 800c93e:	79fb      	ldrb	r3, [r7, #7]
 800c940:	429a      	cmp	r2, r3
 800c942:	d3d3      	bcc.n	800c8ec <IntToUnicode+0x18>
  }
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bc80      	pop	{r7}
 800c94e:	4770      	bx	lr

0800c950 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	4603      	mov	r3, r0
 800c958:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c95a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	bc80      	pop	{r7}
 800c964:	4770      	bx	lr

0800c966 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c966:	b480      	push	{r7}
 800c968:	b085      	sub	sp, #20
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	4603      	mov	r3, r0
 800c96e:	60b9      	str	r1, [r7, #8]
 800c970:	607a      	str	r2, [r7, #4]
 800c972:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c97a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c982:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c984:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c986:	4618      	mov	r0, r3
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bc80      	pop	{r7}
 800c98e:	4770      	bx	lr

0800c990 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c99a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bc80      	pop	{r7}
 800c9a4:	4770      	bx	lr

0800c9a6 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c9b0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bc80      	pop	{r7}
 800c9ba:	4770      	bx	lr

0800c9bc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	607a      	str	r2, [r7, #4]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);  // 0 включение �?ветодиода
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	2120      	movs	r1, #32
 800c9d4:	480e      	ldr	r0, [pc, #56]	; (800ca10 <STORAGE_Read_FS+0x54>)
 800c9d6:	f7f5 f80b 	bl	80019f0 <HAL_GPIO_WritePin>
#ifndef MEM
 w25qReadPage(buf, blk_addr * 2);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4619      	mov	r1, r3
 800c9e0:	68b8      	ldr	r0, [r7, #8]
 800c9e2:	f7f4 f865 	bl	8000ab0 <w25qReadPage>
 w25qReadPage(buf + 256, blk_addr * 2 + 1);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	f7f4 f85b 	bl	8000ab0 <w25qReadPage>
#else
 memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
#endif
 HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);  // 1 выключение �?ветодиода
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	2120      	movs	r1, #32
 800c9fe:	4804      	ldr	r0, [pc, #16]	; (800ca10 <STORAGE_Read_FS+0x54>)
 800ca00:	f7f4 fff6 	bl	80019f0 <HAL_GPIO_WritePin>
 return (USBD_OK);
 800ca04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	40010c00 	.word	0x40010c00

0800ca14 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60b9      	str	r1, [r7, #8]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]
 800ca24:	4613      	mov	r3, r2
 800ca26:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);  // 0 включение �?ветодиода
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2110      	movs	r1, #16
 800ca2c:	4808      	ldr	r0, [pc, #32]	; (800ca50 <STORAGE_Write_FS+0x3c>)
 800ca2e:	f7f4 ffdf 	bl	80019f0 <HAL_GPIO_WritePin>
#ifndef MEM
  w25qWritingByUSB(blk_addr, buf);
 800ca32:	68b9      	ldr	r1, [r7, #8]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7f3 fbe3 	bl	8000200 <w25qWritingByUSB>
#else
 memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
#endif
HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);  // 1 выключение �?ветодиода
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	2110      	movs	r1, #16
 800ca3e:	4804      	ldr	r0, [pc, #16]	; (800ca50 <STORAGE_Write_FS+0x3c>)
 800ca40:	f7f4 ffd6 	bl	80019f0 <HAL_GPIO_WritePin>
 return (USBD_OK);
 800ca44:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	40010c00 	.word	0x40010c00

0800ca54 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800ca54:	b480      	push	{r7}
 800ca56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800ca58:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bc80      	pop	{r7}
 800ca60:	4770      	bx	lr
	...

0800ca64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a0d      	ldr	r2, [pc, #52]	; (800caa8 <HAL_PCD_MspInit+0x44>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d113      	bne.n	800ca9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca76:	4b0d      	ldr	r3, [pc, #52]	; (800caac <HAL_PCD_MspInit+0x48>)
 800ca78:	69db      	ldr	r3, [r3, #28]
 800ca7a:	4a0c      	ldr	r2, [pc, #48]	; (800caac <HAL_PCD_MspInit+0x48>)
 800ca7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ca80:	61d3      	str	r3, [r2, #28]
 800ca82:	4b0a      	ldr	r3, [pc, #40]	; (800caac <HAL_PCD_MspInit+0x48>)
 800ca84:	69db      	ldr	r3, [r3, #28]
 800ca86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2100      	movs	r1, #0
 800ca92:	2014      	movs	r0, #20
 800ca94:	f7f4 fc91 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca98:	2014      	movs	r0, #20
 800ca9a:	f7f4 fcaa 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca9e:	bf00      	nop
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	40005c00 	.word	0x40005c00
 800caac:	40021000 	.word	0x40021000

0800cab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cac4:	4619      	mov	r1, r3
 800cac6:	4610      	mov	r0, r2
 800cac8:	f7fb fe7e 	bl	80087c8 <USBD_LL_SetupStage>
}
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800cae6:	78fa      	ldrb	r2, [r7, #3]
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	440b      	add	r3, r1
 800caf4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	78fb      	ldrb	r3, [r7, #3]
 800cafc:	4619      	mov	r1, r3
 800cafe:	f7fb feb0 	bl	8008862 <USBD_LL_DataOutStage>
}
 800cb02:	bf00      	nop
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	460b      	mov	r3, r1
 800cb14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800cb1c:	78fa      	ldrb	r2, [r7, #3]
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	4613      	mov	r3, r2
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	4413      	add	r3, r2
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	440b      	add	r3, r1
 800cb2a:	333c      	adds	r3, #60	; 0x3c
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	78fb      	ldrb	r3, [r7, #3]
 800cb30:	4619      	mov	r1, r3
 800cb32:	f7fb ff07 	bl	8008944 <USBD_LL_DataInStage>
}
 800cb36:	bf00      	nop
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b082      	sub	sp, #8
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fc f817 	bl	8008b80 <USBD_LL_SOF>
}
 800cb52:	bf00      	nop
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb62:	2301      	movs	r3, #1
 800cb64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d001      	beq.n	800cb72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb6e:	f7f3 fdbf 	bl	80006f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cb78:	7bfa      	ldrb	r2, [r7, #15]
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fb ffc7 	bl	8008b10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fb ff80 	bl	8008a8e <USBD_LL_Reset>
}
 800cb8e:	bf00      	nop
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
	...

0800cb98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fb ffc1 	bl	8008b2e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	699b      	ldr	r3, [r3, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d005      	beq.n	800cbc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbb4:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <HAL_PCD_SuspendCallback+0x30>)
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	4a03      	ldr	r2, [pc, #12]	; (800cbc8 <HAL_PCD_SuspendCallback+0x30>)
 800cbba:	f043 0306 	orr.w	r3, r3, #6
 800cbbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	e000ed00 	.word	0xe000ed00

0800cbcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fb ffbb 	bl	8008b56 <USBD_LL_Resume>
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cbf0:	4a23      	ldr	r2, [pc, #140]	; (800cc80 <USBD_LL_Init+0x98>)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a21      	ldr	r2, [pc, #132]	; (800cc80 <USBD_LL_Init+0x98>)
 800cbfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cc00:	4b1f      	ldr	r3, [pc, #124]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc02:	4a20      	ldr	r2, [pc, #128]	; (800cc84 <USBD_LL_Init+0x9c>)
 800cc04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc06:	4b1e      	ldr	r3, [pc, #120]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc08:	2208      	movs	r2, #8
 800cc0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc0c:	4b1c      	ldr	r3, [pc, #112]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc0e:	2202      	movs	r2, #2
 800cc10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc12:	4b1b      	ldr	r3, [pc, #108]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc18:	4b19      	ldr	r3, [pc, #100]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc1e:	4b18      	ldr	r3, [pc, #96]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc24:	4816      	ldr	r0, [pc, #88]	; (800cc80 <USBD_LL_Init+0x98>)
 800cc26:	f7f4 fefb 	bl	8001a20 <HAL_PCD_Init>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cc30:	f7f3 fd5e 	bl	80006f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc3a:	2318      	movs	r3, #24
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f7f6 fc47 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc4a:	2358      	movs	r3, #88	; 0x58
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	2180      	movs	r1, #128	; 0x80
 800cc50:	f7f6 fc3f 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc5a:	2398      	movs	r3, #152	; 0x98
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	2181      	movs	r1, #129	; 0x81
 800cc60:	f7f6 fc37 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc6a:	23d8      	movs	r3, #216	; 0xd8
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	2101      	movs	r1, #1
 800cc70:	f7f6 fc2f 	bl	80034d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	2000277c 	.word	0x2000277c
 800cc84:	40005c00 	.word	0x40005c00

0800cc88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f4 ffbd 	bl	8001c1e <HAL_PCD_Start>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 f96e 	bl	800cf8c <USBD_Get_USB_Status>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	4611      	mov	r1, r2
 800ccca:	461a      	mov	r2, r3
 800cccc:	4603      	mov	r3, r0
 800ccce:	70fb      	strb	r3, [r7, #3]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70bb      	strb	r3, [r7, #2]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cce6:	78bb      	ldrb	r3, [r7, #2]
 800cce8:	883a      	ldrh	r2, [r7, #0]
 800ccea:	78f9      	ldrb	r1, [r7, #3]
 800ccec:	f7f5 f912 	bl	8001f14 <HAL_PCD_EP_Open>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 f948 	bl	800cf8c <USBD_Get_USB_Status>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	460b      	mov	r3, r1
 800cd14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd24:	78fa      	ldrb	r2, [r7, #3]
 800cd26:	4611      	mov	r1, r2
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f5 f950 	bl	8001fce <HAL_PCD_EP_Close>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f000 f929 	bl	800cf8c <USBD_Get_USB_Status>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd62:	78fa      	ldrb	r2, [r7, #3]
 800cd64:	4611      	mov	r1, r2
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7f5 faac 	bl	80022c4 <HAL_PCD_EP_Flush>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 f90a 	bl	800cf8c <USBD_Get_USB_Status>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cda0:	78fa      	ldrb	r2, [r7, #3]
 800cda2:	4611      	mov	r1, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7f5 f9d9 	bl	800215c <HAL_PCD_EP_SetStall>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 f8eb 	bl	800cf8c <USBD_Get_USB_Status>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdde:	78fa      	ldrb	r2, [r7, #3]
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f5 fa1a 	bl	800221c <HAL_PCD_EP_ClrStall>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f8cc 	bl	800cf8c <USBD_Get_USB_Status>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b085      	sub	sp, #20
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce14:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	da0c      	bge.n	800ce38 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce1e:	78fb      	ldrb	r3, [r7, #3]
 800ce20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce24:	68f9      	ldr	r1, [r7, #12]
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3302      	adds	r3, #2
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	e00b      	b.n	800ce50 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce3e:	68f9      	ldr	r1, [r7, #12]
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	440b      	add	r3, r1
 800ce4a:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ce4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bc80      	pop	{r7}
 800ce58:	4770      	bx	lr

0800ce5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce66:	2300      	movs	r3, #0
 800ce68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce74:	78fa      	ldrb	r2, [r7, #3]
 800ce76:	4611      	mov	r1, r2
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7f5 f826 	bl	8001eca <HAL_PCD_SetAddress>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 f881 	bl	800cf8c <USBD_Get_USB_Status>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	607a      	str	r2, [r7, #4]
 800cea2:	461a      	mov	r2, r3
 800cea4:	460b      	mov	r3, r1
 800cea6:	72fb      	strb	r3, [r7, #11]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ceba:	893b      	ldrh	r3, [r7, #8]
 800cebc:	7af9      	ldrb	r1, [r7, #11]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	f7f5 f915 	bl	80020ee <HAL_PCD_EP_Transmit>
 800cec4:	4603      	mov	r3, r0
 800cec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 f85e 	bl	800cf8c <USBD_Get_USB_Status>
 800ced0:	4603      	mov	r3, r0
 800ced2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ced4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	461a      	mov	r2, r3
 800ceea:	460b      	mov	r3, r1
 800ceec:	72fb      	strb	r3, [r7, #11]
 800ceee:	4613      	mov	r3, r2
 800cef0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf00:	893b      	ldrh	r3, [r7, #8]
 800cf02:	7af9      	ldrb	r1, [r7, #11]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	f7f5 f8aa 	bl	800205e <HAL_PCD_EP_Receive>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 f83b 	bl	800cf8c <USBD_Get_USB_Status>
 800cf16:	4603      	mov	r3, r0
 800cf18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf36:	78fa      	ldrb	r2, [r7, #3]
 800cf38:	4611      	mov	r1, r2
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f5 f8c0 	bl	80020c0 <HAL_PCD_EP_GetRxCount>
 800cf40:	4603      	mov	r3, r0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf54:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <USBD_static_malloc+0x14>)
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bc80      	pop	{r7}
 800cf5e:	4770      	bx	lr
 800cf60:	20002a6c 	.word	0x20002a6c

0800cf64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]

}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bc80      	pop	{r7}
 800cf74:	4770      	bx	lr

0800cf76 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf76:	b480      	push	{r7}
 800cf78:	b083      	sub	sp, #12
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	460b      	mov	r3, r1
 800cf80:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cf82:	bf00      	nop
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bc80      	pop	{r7}
 800cf8a:	4770      	bx	lr

0800cf8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	2b03      	cmp	r3, #3
 800cf9e:	d817      	bhi.n	800cfd0 <USBD_Get_USB_Status+0x44>
 800cfa0:	a201      	add	r2, pc, #4	; (adr r2, 800cfa8 <USBD_Get_USB_Status+0x1c>)
 800cfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa6:	bf00      	nop
 800cfa8:	0800cfb9 	.word	0x0800cfb9
 800cfac:	0800cfbf 	.word	0x0800cfbf
 800cfb0:	0800cfc5 	.word	0x0800cfc5
 800cfb4:	0800cfcb 	.word	0x0800cfcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]
    break;
 800cfbc:	e00b      	b.n	800cfd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc2:	e008      	b.n	800cfd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc8:	e005      	b.n	800cfd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfca:	2302      	movs	r3, #2
 800cfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800cfce:	e002      	b.n	800cfd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfd4:	bf00      	nop
  }
  return usb_status;
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bc80      	pop	{r7}
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop

0800cfe4 <memset>:
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	4402      	add	r2, r0
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d100      	bne.n	800cfee <memset+0xa>
 800cfec:	4770      	bx	lr
 800cfee:	f803 1b01 	strb.w	r1, [r3], #1
 800cff2:	e7f9      	b.n	800cfe8 <memset+0x4>

0800cff4 <__libc_init_array>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	2600      	movs	r6, #0
 800cff8:	4d0c      	ldr	r5, [pc, #48]	; (800d02c <__libc_init_array+0x38>)
 800cffa:	4c0d      	ldr	r4, [pc, #52]	; (800d030 <__libc_init_array+0x3c>)
 800cffc:	1b64      	subs	r4, r4, r5
 800cffe:	10a4      	asrs	r4, r4, #2
 800d000:	42a6      	cmp	r6, r4
 800d002:	d109      	bne.n	800d018 <__libc_init_array+0x24>
 800d004:	f000 f828 	bl	800d058 <_init>
 800d008:	2600      	movs	r6, #0
 800d00a:	4d0a      	ldr	r5, [pc, #40]	; (800d034 <__libc_init_array+0x40>)
 800d00c:	4c0a      	ldr	r4, [pc, #40]	; (800d038 <__libc_init_array+0x44>)
 800d00e:	1b64      	subs	r4, r4, r5
 800d010:	10a4      	asrs	r4, r4, #2
 800d012:	42a6      	cmp	r6, r4
 800d014:	d105      	bne.n	800d022 <__libc_init_array+0x2e>
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	f855 3b04 	ldr.w	r3, [r5], #4
 800d01c:	4798      	blx	r3
 800d01e:	3601      	adds	r6, #1
 800d020:	e7ee      	b.n	800d000 <__libc_init_array+0xc>
 800d022:	f855 3b04 	ldr.w	r3, [r5], #4
 800d026:	4798      	blx	r3
 800d028:	3601      	adds	r6, #1
 800d02a:	e7f2      	b.n	800d012 <__libc_init_array+0x1e>
 800d02c:	0800d20c 	.word	0x0800d20c
 800d030:	0800d20c 	.word	0x0800d20c
 800d034:	0800d20c 	.word	0x0800d20c
 800d038:	0800d210 	.word	0x0800d210

0800d03c <memcpy>:
 800d03c:	440a      	add	r2, r1
 800d03e:	4291      	cmp	r1, r2
 800d040:	f100 33ff 	add.w	r3, r0, #4294967295
 800d044:	d100      	bne.n	800d048 <memcpy+0xc>
 800d046:	4770      	bx	lr
 800d048:	b510      	push	{r4, lr}
 800d04a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d04e:	4291      	cmp	r1, r2
 800d050:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d054:	d1f9      	bne.n	800d04a <memcpy+0xe>
 800d056:	bd10      	pop	{r4, pc}

0800d058 <_init>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	bf00      	nop
 800d05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05e:	bc08      	pop	{r3}
 800d060:	469e      	mov	lr, r3
 800d062:	4770      	bx	lr

0800d064 <_fini>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	bf00      	nop
 800d068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d06a:	bc08      	pop	{r3}
 800d06c:	469e      	mov	lr, r3
 800d06e:	4770      	bx	lr
